<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>博客园-键盘上的手艺人</title><link>http://www.cnblogs.com/jiayongji/</link><description>书写是为了更好的思考</description><language>zh-cn</language><lastBuildDate>Sat, 23 Sep 2017 00:05:52 GMT</lastBuildDate><pubDate>Sat, 23 Sep 2017 00:05:52 GMT</pubDate><ttl>60</ttl><item><title>python面向对象基础</title><link>http://www.cnblogs.com/jiayongji/archive/2017/09/09/7496969.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Fri, 08 Sep 2017 16:47:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/09/09/7496969.html</guid><description><![CDATA[本文主要讲述python面向对象的一些基础语法。

# 创建对象及对象的属性

创建一个名为Person类，继承自object类（object类是所有类的祖先类），类体为空：


```python
class Person(object):
    pass
```

创建一个Person类的实例：


```python
p1 = Person()
```

为p1动态添加一个'name'属性：


```python
p1.name = 'Tom'
print p1.name
```

    Tom
    

为p1动态添加方法（其实方法也可以看成是对象实例的特殊属性）：


```python
import types
p1.get_name = types.MethodType(lambda self:self.name,p1,Person)
print p1.get_name()
```

    Tom
    

再创建另外一个Person对象：


```python
p2 = Person()
print p2.name
```


    ---------------------------------------------------------------------------

    AttributeError                            Traceback (most recent call last)

    <ipython-input-10-e3abcd8b0fdd> in <module>()
          1 p2 = Person()
    ----> 2 print p2.name
    

    AttributeError: 'Person' object has no attribute 'name'


可以看出为p1对象动态添加的'name'属性并不会影响到Person类的其他对象。

# 带可变参数的构造方法


```python
class Person(object):
    # 这里self为实例方法的第一个必须的参数，必须要有，且要放在第一个；第二个name为自定义必选参数，后面的kwargs是可选参数列表
    def __init__(self,name,**kwargs):
        self.name = name
        for k,v in kwargs.iteritems():
            # 设置实例属性值
            setattr(self,k,v)
```


```python
p = Person('Tom',age = 19,gender = 'male')
print p.name
print p.age
print p.gender
```

    Tom
    19
    male
    

# 实例属性（包括属性和方法）的可见性

python中实例的属性（包括属性和方法）是根据命名来进行可见性约束的，规则如下：

* `attr`  内外部都可见

* `__attr__`  预置属性，内外部都可见，但不建议普通属性这样命名

* `_attr`  内部可见、外部不可见（但只是倡议，并非强制约束）  

* `__attr`  内部可见、外部不可见（强制约束）

举例说明：


```python
class Person(object):
    attr1 = 1
    __attr2__ = 2
    _attr3 = 3
    __attr4 = 4
```


```python
p = Person()
```


```python
print p.attr1
```

    1
    


```python
print p.__attr2__
```

    2
    


```python
print p._attr3
```

    3
    


```python
print p.__attr4
```


    ---------------------------------------------------------------------------

    AttributeError                            Traceback (most recent call last)

    <ipython-input-20-47493f4f761b> in <module>()
    ----> 1 print p.__attr4
    

    AttributeError: 'Person' object has no attribute '__attr4'


# 类属性

写在类中，而非方法中的属性，其可见性规则和实例属性类似。

注：当实例修改了某个类属性之后，其实是创建了一个新的**同名的**实例属性，并不会让类属性值本身真正发生改变。而实例属性的访问优先级是高于类属性的。

# 类方法

类方法就是用`@classmethod`装饰器修饰的方法。`

# 类的继承

### object类

这是所有类的祖先类。一个自定义类如果不指定继承哪个类，那它默认继承object类，如：


```python
class Person:
    pass
p = Person()
print isinstance(p,Person)
print isinstance(p,object)
```

    True
    True
    

### 类的构造方法

```python
def __init__(self,arg1,arg2,...):
    ...
```

在子类的构造方法中要调用父类的构造方法进行初始化，才能获取到父类的实例属性（获取类属性不需要），调用方式：

```python
# SubClass：子类类名
super(SubClass,self).__init__(attr1,attr2,...)  #这里不用再写'self'参数了
```

举例：


```python
class Person(object):
    attr = 1
    def __init__(self,name,age):
        self.name = name
        self.age = age

class Student(Person):
    def __init__(self,name,age,score):
        super(Student,self).__init__(name,age)
        self.score = score
```


```python
s = Student('Tom',18,98)
```


```python
print s
```

    <__main__.Student object at 0x03A31D10>
    


```python
print s.age
print s.name
print s.score
print s.attr
```

    18
    Tom
    98
    1
    

> 小贴士：python作为动态语言，调用实例的方法时，并不会去检查类型的合法性，只要调的方法是实例有的并且参数正确，就可以调用。

> 例如：只要一个对象实例有名为'read'的方法，它就是一个file-like对象，就可以作为参数传入json.load()函数中。

### 类的多重继承


```python
class A:
    pass
class B(A):
    pass
class C(A):
    pass
class D(B,C):
    pass

d = D()
print isinstance(d,D)
print isinstance(d,B)
print isinstance(d,C)
print isinstance(d,A)
```

    True
    True
    True
    True
    

可以看出B、C类都继承了A类，而D类又同时继承了B、C类，所以D类的对象同时也是A、B、C三个类的实例。

# 获取对象的信息


```python
class Person(object):
    name = 'Tom'
p = Person()
```

### 判断对象是否是某个类/类型


```python
print isinstance(p,Person)
```

    True
    


```python
print isinstance([1,2,3],list)
```

    True
    

### 获取对象的类型


```python
print type(p)
```

    <class '__main__.Person'>
    

### 获取对象的所有属性（包括方法）


```python
print dir(p)
```

    ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'name']
    

### 获取对象某个属性的值


```python
print getattr(p,'name')
```

    Tom
    

### 设置对象的属性值


```python
setattr(p,'age',19)
print p.age
```

    19
    

# 特殊方法（也叫做魔术方法）

* `__str__(self)`和`__repr__(self)`：用于print等显示函数，前者用于给用户看，后者给开发看。

* `__cmp__(self,s)`：用于`cmp()`、`sorted()`等和顺序有关的函数，其中s为另一个同类型的对象。

* `__len__(self)`：用于`len()`函数。

* `__add__(self,s)`、`__sub__(self,s)`、`__mul__(self,s)`、`__div__(self,s)`：用于对象的加减乘除四则运算。

* `__int__(self)`：用于`int()`函数。

* `__float__(self)`：用于`float()`函数。

* `__slots__(self)`：返回一个字符串列表或元组，限制类可以具有的属性。

* `__call__(self)`：让对象变成可调用的（用双括号`()`运算符调用）。

注：实现了`__call__(self)`方法的对象就变成了可以像函数那样调用的了，所以python的对象和函数的区分其实不明显。

举例：


```python
class Say(object):
    def __call__(self,a,b):
        print 'You say:{0} and {1}'.format(a,b)
        
s = Say()
s('hello','world')
```

    You say:hello and world
    

# 装饰器

* `@property`装饰器：装饰属性的getter方法。

* `@attr.setter`装饰器：装饰属性的setter方法。

举例：


```python
class Student(object):
    def __init__(self,name,score):
        self.name = name
        # 这里score定义成一个私有的属性
        self.__score = score
        
    # 相当于getter方法
    @property
    def score(self):
        return self.__score
    
    # 相当于setter方法
    @score.setter
    def score(self,score):
        if score > 100 or score < 0:
            raise ValueError('Invalid score!')
        self.__score = score
        
    # 定义一个新的grade属性
    @property
    def grade(self):
        if self.__score >= 80:
            return 'A'
        elif self.__score < 60:
            return 'C'
        else:
            return 'B'
        
s = Student('Tom',90)
print s.grade
s.score = 59
print s.grade
print s.score
```

    A
    C
    59
    


```python
s.score = -1
```


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    <ipython-input-10-7a8b6a159a64> in <module>()
    ----> 1 s.score = -1
    

    <ipython-input-9-9b3f1ca25afb> in score(self, score)
         14     def score(self,score):
         15         if score > 100 or score < 0:
    ---> 16             raise ValueError('Invalid score!')
         17         self.__score = score
         18 
    

    ValueError: Invalid score!



```python
s.grade = 'C'
```


    ---------------------------------------------------------------------------

    AttributeError                            Traceback (most recent call last)

    <ipython-input-11-de53788b008a> in <module>()
    ----> 1 s.grade = 'C'
    

    AttributeError: can't set attribute]]></description></item><item><title>Python资源集锦</title><link>http://www.cnblogs.com/jiayongji/archive/2017/09/03/7469651.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 03 Sep 2017 07:13:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/09/03/7469651.html</guid><description><![CDATA[# 各种编译好的whl库
[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)

# 官方库管理平台
[https://pypi.python.org/pypi](https://pypi.python.org/pypi)]]></description></item><item><title>PDB——Python调试利器详解</title><link>http://www.cnblogs.com/jiayongji/archive/2017/09/03/7469214.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 03 Sep 2017 05:23:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/09/03/7469214.html</guid><description><![CDATA[> python 2.7 pdb官方文档：https://docs.python.org/2.7/library/pdb.html
 
pdb是ptyhon内置的一个调试库，是调试python代码的好帮手，本文是对其用法的详细介绍。

# QuickStart
### 待调试的代码内容
文件名：test.py：
```python
# coding:utf-8
import pdb
s1 = 'aaa'
pdb.set_trace()
s2 = 'bbb'
s3 = 'ccc'
pdb.set_trace()
s = s1 + s2 + s3
print s
```

可以看出在代码的第4、7行分别打了一个断点，使用的是`pdb.set_trace()`函数。

### 开始调试

在和代码文件相同路径下打开命令行窗口，输入命令：`python test1.py`

接着就进入了调试状态：
```bash
(.env) E:\code\python-basic\tools\pdb\sample>python test1.py
> e:\code\python-basic\tools\pdb\sample\test1.py(5)<module>()
-> s2 = 'bbb'
(Pdb)
```

可以看出直接执行到了第一个断点所在的下一行，并停在了这里。

这时可以执行命令：`n`进行下一步：
```
(Pdb) n
> e:\code\python-basic\tools\pdb\sample\test1.py(6)<module>()
-> s3 = 'ccc'
(Pdb)
```

使用`p <变量名>`命令打印已经出现过的变量的值：
```
(Pdb) p s1
'aaa'
(Pdb) p s2
'bbb'
(Pdb) p s3
*** NameError: NameError("name 's3' is not defined",)
(Pdb)
```

因为当前变量s3还没有被赋值，所以打印s3的时候提示`NameError`异常。 

使用`l`命令打印出当前的代码段：
```
(Pdb) l
  1     # coding:utf-8
  2     import pdb
  3     s1 = 'aaa'
  4     pdb.set_trace()
  5     s2 = 'bbb'
  6  -> s3 = 'ccc'
  7     pdb.set_trace()
  8     s = s1 + s2 + s3
  9     print s
[EOF]
(Pdb)
```

退出调试：`q`命令
```
(Pdb) q
Traceback (most recent call last):
  File "test1.py", line 6, in <module>
    s3 = 'ccc'
  File "test1.py", line 6, in <module>
    s3 = 'ccc'
  File "d:\programs\python27\Lib\bdb.py", line 49, in trace_dispatch
    return self.dispatch_line(frame)
  File "d:\programs\python27\Lib\bdb.py", line 68, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit

(.env) E:\code\python-basic\tools\pdb\sample>
```

# PDB调试的另一种方式

QuickStart中使用的调试方式不够优雅，因为是通过修改代码的方式打断点的，用起来不太方便。那么能不能动态打断点呢？答案是当然可以，请接着往下看。

### 准备待调试的代码

删除掉QuickStart中代码中的`pdb.set_trace()`，剩下的代码如下：
文件名：test2.py
```python
# coding:utf-8
s1 = 'aaa'
s2 = 'bbb'
s3 = 'ccc'
s = s1 + s2 + s3
print s
```

### 开始调试

在test2.py相同路径下打开命令行，输入命令：`python -m pdb test2.py`
```
(.env) E:\code\python-basic\tools\pdb\sample>python -m pdb test2.py
> e:\code\python-basic\tools\pdb\sample\test2.py(2)<module>()
-> s1 = 'aaa'
(Pdb) l
  1     # coding:utf-8
  2  -> s1 = 'aaa'
  3     s2 = 'bbb'
  4     s3 = 'ccc'
  5     s = s1 + s2 + s3
  6     print s
[EOF]
(Pdb)
```

可以看到当前代码中我们还没有打任何断点，代码默认停在了第1行。

执行一个命令`n`：
```
(Pdb) n
> e:\code\python-basic\tools\pdb\sample\test2.py(3)<module>()
-> s2 = 'bbb'
(Pdb) l
  1     # coding:utf-8
  2     s1 = 'aaa'
  3  -> s2 = 'bbb'
  4     s3 = 'ccc'
  5     s = s1 + s2 + s3
  6     print s
[EOF]
(Pdb)
```

可以看到单步执行到了下一行。

如果我们想在第5行打一个断点，该怎么打呢？用`b <行号>`命令在某一行打一个断点：
```
(Pdb) b 5
Breakpoint 1 at e:\code\python-basic\tools\pdb\sample\test2.py:5
(Pdb) l
[EOF]
(Pdb) n
> e:\code\python-basic\tools\pdb\sample\test2.py(4)<module>()
-> s3 = 'ccc'
(Pdb) l
  1     # coding:utf-8
  2     s1 = 'aaa'
  3     s2 = 'bbb'
  4  -> s3 = 'ccc'
  5 B   s = s1 + s2 + s3
  6     print s
[EOF]
(Pdb)
```

这样就成功地在第5行打了一个断点。

查看当前打了哪些断点：`b`命令
```
(Pdb) b
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at e:\code\python-basic\tools\pdb\sample\test2.py:5
(Pdb)
```

# PDB调试命令汇总

### 高级命令

以上的示例只是展示了最简单的顺序结构的代码的调试方法，而实际应用中遇到的大多数代码都有着较为复杂的逻辑结构，比如循环结构、分支结构、调用函数、调用其他模块的函数、使用类和对象等等。

针对这些场景还有很多更高级的调试命令，其实掌握了前面的几个简单的命令的用法后，下面的这些更高级的命令就都很容易上手了，多用几遍就能很快掌握了。

命令|命令全称|功能
---|---|---
h|help|查看帮助
n|next|执行下一条语句
s|step|执行下一条语句，如果是函数，则会执行到函数的第一句
b|break|列出当前的所有断点
b <行号>|/|在某一行打一个断点
b <文件名>:<行号>|/|在某个文件的某行打一个断点
b <函数名>|/|在某个函数的第一行打一个断点
cl|clear|清除所有断点
cl n1 n2 ...|/|清除编号为n1、n2...的断点
cl <行号> |/|清除某行的断点
cl <文件名>:<行号>|/|清除某个文件某行的断点
r|return|执行当前函数到结束
c|continue|执行到下一个断点
l|list|列出源码（前后11行代码）
l <行号>|/|列出某行周围11行代码
l <行号1> <行号2>|/|列出两个行号范围内的代码
p <变量名>|print <变量名>|输出变量的值
pp <变量名>|/|好看一点的输出
q|quit|退出debug
unt|until|退出循环或当期堆栈
run|/|重新启动debug
a|args|列出当前执行的函数的参数
w|where|打印当前执行堆栈

注：平时使用的时候通常用的都是各个命令的简写形式，当然用全称也是可以的（如果不嫌麻烦的话）。

### 补充

* 在命令行中进入调试模式的方法：`python -m pdb demo.py`
* 在调试模式中按一下`Enter`键表示执行一下上一条命令。]]></description></item><item><title>python collections库</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/28/7442314.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Mon, 28 Aug 2017 00:20:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/28/7442314.html</guid><description><![CDATA[collections库是python内置的集合库，本文主要讲解以下5种数据结构的用法：

* namedtuple  命名元组，是tuple的子类
* deque  双向列表
* defaultdict  有默认值的字典，是dict的子类
* OrderedDict  key有序的字典，是dict的子类
* Counter  计数器，是dict的子类

# 准备工作


```python
from collections import namedtuple,deque,defaultdict,OrderedDict,Counter
```

# namedtuple (python 2.6+)

用法：namedtuple('名称',[属性列表])


```python
Point = namedtuple('Point',['x','y'])
p = Point(1,2)
```


```python
print '【Output】'
print p
print p.x,p.y
print p.count,p.index
print isinstance(p,Point)
print isinstance(p,tuple)
```

    【Output】
    Point(x=1, y=2)
    1 2
    <built-in method count of Point object at 0x038B2288> <built-in method index of Point object at 0x038B2288>
    True
    True
    

# deque (python 2.4+)

适用于队列和栈，插入和删除元素很高效。


```python
lst = ['a','b','c']
dq = deque(lst)
dq.append('d')
print dq
```

    deque(['a', 'b', 'c', 'd'])
    


```python
dq.pop()
```




    'd'




```python
print dq
```

    deque(['a', 'b', 'c'])
    


```python
dq.appendleft('-1')
```


```python
print dq
```

    deque(['-1', 'a', 'b', 'c'])
    


```python
dq.popleft()
```




    '-1'




```python
print dq
```

    deque(['a', 'b', 'c'])
    

# defaultdict (python 2.5+)

当key不存在的时候可返回一个默认值，默认值由传入的函数对象决定。


```python
dd = defaultdict(lambda:'N/A')
dd['key1'] = 'aa';
print dd['key1']
print dd['key2']
```

    aa
    N/A
    

# OrderedDict(python 2.7+)

key值有序的字典，顺序按照插入的顺序排序。


```python
data = [('a',1),('b',2),('c',3)]
d = dict(data)
print d
```

    {'a': 1, 'c': 3, 'b': 2}
    


```python
od = OrderedDict(data)
print od
```

    OrderedDict([('a', 1), ('b', 2), ('c', 3)])
    

# Counter (python 2.7+)

### 用序列生成Counter对象


```python
s = 'abcdeabcdabcaba'
c = Counter(s)
print c
```

    Counter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1})
    


```python
print c.most_common(3)
```

    [('a', 5), ('b', 4), ('c', 3)]
    


```python
print sorted(c)
```

    ['a', 'b', 'c', 'd', 'e']
    


```python
print ''.join(sorted(c.elements()))
```

    aaaaabbbbcccdde
    


```python
print c.values()
```

    [5, 3, 4, 1, 2]
    


```python
print c.elements()
```

    <itertools.chain object at 0x039BC630>
    

### 更新Counter对象


```python
d = Counter('bbb')
c.update(d)
```


```python
print c.most_common()
```

    [('b', 7), ('a', 5), ('c', 3), ('d', 2), ('e', 1)]
    

### 用字典生成Counter对象


```python
d = {'a':1,'b':2,'c':3}
c = Counter(d)
print c
```

    Counter({'c': 3, 'b': 2, 'a': 1})
    

### value值为字符串时，按照字典序排序


```python
d = {'a':'aa1','b':'ba1','c':'ca2'}
c = Counter(d)
print c
```

    Counter({'c': 'ca2', 'b': 'ba1', 'a': 'aa1'})]]></description></item><item><title>《Deep Work》思维导图读书笔记</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/27/7441868.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 27 Aug 2017 14:32:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/27/7441868.html</guid><description><![CDATA[![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170827223136668-577771573.png)]]></description></item><item><title>分析了六十多年间100万字的政府工作报告，我看到了这样的变迁...</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/23/7420915.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Wed, 23 Aug 2017 15:57:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/23/7420915.html</guid><description><![CDATA[> 版权声明：本文为博主AzureSky原创文章，转载请注明出处：http://www.cnblogs.com/jiayongji/p/7420915.html

每年我国政府都会发布年度政府工作报告，而报告中出现最多的TopN关键词都会成为媒体热议的焦点，更是体现了过去一年和未来政府工作的重点和趋势。

在中央政府网站上也可以看到从1954年至今每年的政府工作报告，链接：http://www.gov.cn/guoqing/2006-02/16/content_2616810.htm

那么突发奇想，从这60多年间的政府工作报告中可以看出来什么样的变迁呢？说干就干，下面就是实现这一想法的历程。

# 目标是什么

* 获取1954年至今历年政府工作报告的全文，并统计出每年政府工作报告中Top20的关键词，并用图表可视化展示出来。

* 统计每十年的政府工作报告的合并Top20关键词，并用图表直观展示出来，从中分析出变迁的趋势。

# 准备工作

### 数据获取

数据获取阶段需要有两个准备：

* 网页链接：

2017年政府工作报告链接：http://www.gov.cn/premier/2017-03/16/content_5177940.htm

1954~2017年政府工作报告汇总页面链接：http://www.gov.cn/guoqing/2006-02/16/content_2616810.htm

* 技术准备

使用非常好用的web库——requests获取网页内容。

### 数据解析

使用BeautifulSoup库解析网页HTML内容，从中解析出政府工作报告的文本内容。

### 数据处理与分析

使用结巴分词库（jieba）对政府工作报告文本内容进行分词、过滤无效词、统计词频。

### 结果展示

使用matplotlib库画出每十年政府工作报告关键词的散点分布图，通过对比不同年代的图，分析其中的变化趋势。

# 动手搞

准备工作做好后，我们开始按照计划一步步地开始实施。

### 获取网页HTML内容

为了代码复用，创建一个html_utils.py文件，提供下载网页内容的函数，并提供了一个HTML页面解析异常类：

```python
# coding:utf-8
# html工具函数
import requests

# 通用请求Hearders
HEADERS = {'User-Agent':'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36'}

# html页面解析异常
class HtmlParseError(Exception):
    def __init__(self,value):
        self.value = value
        
    def __str__(self):
        return repr(self.value)

# 获取网页页面html全文
def get_html(url):
    resp = requests.get(url,headers = HEADERS)
    resp.encoding = 'utf-8'
    if resp:
        return resp.text
    return None
```

### 创建一个分词工具

我们的总体思路是先获取网页内容，然后从网页内容中解析出政府工作报告正文，然后对其进行分词，这里分词需要用到jieba模块，我们创建一个cut_text_utils.py文件，在其中提供分词的函数，内容如下：

```python
# coding:utf-8
# 分词操作工具函数
import sys
import jieba
from collections import Counter

# 对一段文本进行分词，并过滤掉长度小于2的词（标点、虚词等），用全模式分词
def cut_text(text):
    cut_list = jieba.cut(text.lower())
    return [word for word in cut_list if len(word) >= 2]
    
# 统计出一段文本中出现数量最多的前n个关键词及数量
def get_topn_words(text,topn):
    cut_list = cut_text(text)
    counter = Counter(cut_list)
    return counter.most_common(topn)

if __name__ == '__main__':
    # 设置字节流编码方式为utf-8
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    s = u'我想和女朋友一起去北京故宫博物院参观和闲逛。'
    # print cut_text(s)
    print get_topn_words(s,5)
```

运行上述Demo脚本，输出：

[(u'参观', 1), (u'北京故宫博物院', 1), (u'一起', 1), (u'女朋友', 1), (u'闲逛', 1)]

### 创建一个绘图工具

最终要使用matplotlib库绘出关键词的散点图，可以更直观地进行分析，所以我们再写一个绘图工具文件visual_utils.py，内容如下：

```python
# coding:utf-8
import matplotlib.pyplot as plt

# 指定默认字体，防止画图时中文乱码
plt.rcParams['font.sans-serif'] = ['SimHei']  

# 传入一组关键词及词频列表，从高到低绘出每个关键词频率的散点图
# keywords示例：[(u'张三',10),(u'李四',12),(u'王五',7)]
def draw_keywords_scatter(keywords,title = None,xlabel = None,ylabel = None):
    # 先对keywords按词频从高到低排序
    keywords = sorted(keywords,key = lambda item:item[1],reverse = True)

    # 解析出关键词列表
    words = [x[0] for x in keywords]
    # 解析出对应的词频列表
    times = [x[1] for x in keywords]
    
    x = range(len(keywords))
    y = times
    plt.plot(x, y, 'b^')
    plt.xticks(x, words, rotation=45)
    plt.margins(0.08)
    plt.subplots_adjust(bottom=0.15)
    # 图表名称
    plt.title(title)
    # x,y轴名称
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.show()
    
def main():
    draw_keywords_scatter([(u'张三',10),(u'李四',12),(u'王五',7)],u'出勤统计图',u'姓名',u'出勤次数')
    
if __name__ == '__main__':
    main()
    
```

运行上面的Demo脚本，绘图结果如下：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170823235616839-947595794.png)



### 解析2017年政府工作报告

接下来我们先获取到2017年的政府工作报告试试水，创建一个文件year2017_analysis.py，内容如下：

```python
# coding:utf-8
# 分析2017年政府工作报告，从中提取出前20个高频词
import sys
from bs4 import BeautifulSoup as BS
import html_utils
import cut_text_utils

# 2017年政府工作报告全文URL
REPORT_URL = 'http://www.gov.cn/premier/2017-03/16/content_5177940.htm'

# 从2017年政府工作报告html页面内容中解析出正文
def parse_report_article(html):
    soup = BS(html,'html.parser')
    article = soup.find('div',attrs = {'id':'UCAP-CONTENT'})  # 报告正文，这里可以通过分析网页HTML结构获取到解析的方法
    return article.text
    
# 传入2017年政府工作报告全文的URL，解析出topn关键词及词频
def get_topn_words(url,topn):
    html = html_utils.get_html(url)
    article = parse_report_article(html)
    return cut_text_utils.get_topn_words(article,topn)
    
def main():
    # 设置字节流编码方式为utf-8
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    with open('out.tmp','w+') as fout:
        fout.write(str(get_topn_words(REPORT_URL,20)))
    
if __name__ == '__main__':
    main()
```

运行上述脚本，然后在当前目录下可以看到产生了一个out.tmp文件，其内容如下：

[(u'发展', 125), (u'改革', 68), (u'推进', 65), (u'建设', 54), (u'经济', 52), (u'加强', 45), (u'推动', 42), (u'加快', 40), (u'政府', 39), (u'创新', 36), (u'完善', 35), (u'全面', 35), (u'企业', 35), (u'促进', 34), (u'提高', 32), (u'就业', 31), (u'实施', 31), (u'中国', 31), (u'工作', 29), (u'支持', 29)]

从中可以看出2017年的前五关键词是：发展，改革，推进，建设，经济，和我们经常在媒体上看到的情况也比较吻合。

### 解析1954到2017每年的政府工作报告

思路是这样的，首先从汇总页面获取到每年政府工作报告网页的链接，然后分别爬取每个链接获取到网页内容，接着解析出每年的政府工作报告正文，最后对每10年的政府工作报告合并分析出Top20关键词并展示出来。

导包：

```python
# coding:utf-8
# 1954~2017年政府工作报告汇总分析
import sys
import json
from collections import OrderedDict
from bs4 import BeautifulSoup as BS
import html_utils
from html_utils import HtmlParseError
import cut_text_utils
```

汇总页面URL：

```python
# 汇总URL
SUMMARY_URL = 'http://www.gov.cn/guoqing/2006-02/16/content_2616810.htm'
```

从汇总页面解析出每年政府工作报告全文页面的URL列表：

```python
# 从汇总页面解析出每年政府工作报告全文页面的URL
# 注：只有2017年的页面URL是专题页面而非全文页面
def get_report_urls(summary_url):
    html = html_utils.get_html(summary_url)
    soup = BS(html,'html.parser')
    reports_table = soup.select('#UCAP-CONTENT table tbody')[0]
    reports = [(atag.text,atag['href']) for trtag in reports_table.select('tr') for tdtag in trtag.select('td') if len(tdtag.select('a')) != 0 for atag in tdtag.select('a')]
    
    # 过滤去2017年的URL
    report_urls = [x for x in reports if x[0] != '2017']
    report_urls.append(('2017',REPORT2017_URL))
    # 按照年份升序排序
    report_urls = sorted(report_urls,key = lambda item:item[0])
    return report_urls
```

从报告正文页面html中解析出正文内容：

注：这里要考虑两种不同的页面结构进行解析。

```python
# 从报告页面html中解析出正文内容
# 考虑到不同年份报告的2种不同的html结构，采用两种解析方案
def parse_report_article(html):
    soup = BS(html,'html.parser')
    # 解析方案1
    article = soup.select('#UCAP-CONTENT')
    # 若article为空，则换方案2来解析
    if len(article) == 0:
        article = soup.select('.p1')
        # 若还为空，则抛出异常
        if len(article) == 0:
            raise HtmlParseError('parse report error!')
            
    return article[0].text
```

通过上述函数结合使用，可以爬取到1954年到2017年的所有政府工作报告的文本，总字数为100万零7000多字。

接着以下几个函数用来解析关键词：

```python
# 传入某一年政府工作报告全文的URL，解析出topn关键词及词频
def get_topn_words(url,topn):
    html = html_utils.get_html(url)
    article = parse_report_article(html)
    return cut_text_utils.get_topn_words(article,topn)

# 传入若干个政府工作报告全文的URL，解析出合并topn关键词
# save_reports：是否保存文本到文件中（reports.txt）
def get_topn_words_from_urls(urls,topn,save_reports = False):
    htmls = [html_utils.get_html(url) for url in urls]
    # 汇总文本
    summary_atricle = '\n'.join([parse_report_article(html) for html in htmls])
    if save_reports:
        with open('reports.txt','w+') as fout:
            fout.write(summary_atricle)
    return cut_text_utils.get_topn_words(summary_atricle,topn)

# 根据传入的每年的政府工作报告全文URL，解析出每年的topn关键词
def get_topn_words_yearly(report_urls,topn):
    keywords = OrderedDict()
    # 遍历url列表，解析出每年政府工作报告的top30关键词并存入字典keywords
    for year,url in report_urls:
        print 'start to parse {year} report...'.format(year = year)
        keywords[year] = get_topn_words(url,topn)
    return keywords

# 根据传入的每年的政府工作报告全文URL，解析出每个十年的合并topn关键词
def get_topn_words_decadal(report_urls,topn):
    # 统计出每个10年的topn关键词
    decade1 = ['1964','1960','1959','1958','1957','1956','1955','1954']
    decade2 = ['1987','1986','1985','1984','1983','1982','1981','1980','1979','1978','1975']
    decade3 = ['1997','1996','1995','1994','1993','1992','1991','1990','1989','1988']
    decade4 = ['2007','2006','2005','2004','2003','2002','2001','2000','1999','1998']
    decade5 = ['2017','2016','2015','2014','2013','2012','2011','2010','2009','2008']
    
    keywords = OrderedDict()
    decade_items = [('1954-1964',decade1),('1975-1987',decade2),('1988-1997',decade3),('1998-2007',decade4),('2008-2017',decade5)]
    for years,decade in decade_items:
        print 'start to parse {years} reports...'.format(years = years)
        urls = [item[1] for item in report_urls if item[0] in decade]
        keywords[years] = get_topn_words_from_urls(urls,topn)
        
    return keywords
```

汇总以上代码，合并为summary_analysis.py文件，内容如下：

```python
# coding:utf-8
# 1954~2017年政府工作报告汇总分析
import sys
import json
from collections import OrderedDict
from bs4 import BeautifulSoup as BS
import html_utils
from html_utils import HtmlParseError
import cut_text_utils
import visual_utils

# 汇总URL
SUMMARY_URL = 'http://www.gov.cn/guoqing/2006-02/16/content_2616810.htm'

# 2017年政府工作报告全文URL
REPORT2017_URL = 'http://www.gov.cn/premier/2017-03/16/content_5177940.htm'

# 从汇总页面解析出每年政府工作报告全文页面的URL
# 注：只有2017年的页面URL是专题页面而非全文页面
def get_report_urls(summary_url):
    html = html_utils.get_html(summary_url)
    soup = BS(html,'html.parser')
    reports_table = soup.select('#UCAP-CONTENT table tbody')[0]
    reports = [(atag.text,atag['href']) for trtag in reports_table.select('tr') for tdtag in trtag.select('td') if len(tdtag.select('a')) != 0 for atag in tdtag.select('a')]
    
    # 过滤去2017年的URL
    report_urls = [x for x in reports if x[0] != '2017']
    report_urls.append(('2017',REPORT2017_URL))
    # 按照年份升序排序
    report_urls = sorted(report_urls,key = lambda item:item[0])
    return report_urls

# 从报告页面html中解析出正文内容
# 考虑到不同年份报告的2种不同的html结构，采用两种解析方案
def parse_report_article(html):
    soup = BS(html,'html.parser')
    # 解析方案1
    article = soup.select('#UCAP-CONTENT')
    # 若article为空，则换方案2来解析
    if len(article) == 0:
        article = soup.select('.p1')
        # 若还为空，则抛出异常
        if len(article) == 0:
            raise HtmlParseError('parse report error!')
            
    return article[0].text

# 传入某一年政府工作报告全文的URL，解析出topn关键词及词频
def get_topn_words(url,topn):
    html = html_utils.get_html(url)
    article = parse_report_article(html)
    return cut_text_utils.get_topn_words(article,topn)

# 传入若干个政府工作报告全文的URL，解析出合并topn关键词
# save_reports：是否保存文本到文件中（reports.txt）
def get_topn_words_from_urls(urls,topn,save_reports = False):
    htmls = [html_utils.get_html(url) for url in urls]
    # 汇总文本
    summary_atricle = '\n'.join([parse_report_article(html) for html in htmls])
    if save_reports:
        with open('reports.txt','w+') as fout:
            fout.write(summary_atricle)
    return cut_text_utils.get_topn_words(summary_atricle,topn)

# 根据传入的每年的政府工作报告全文URL，解析出每年的topn关键词
def get_topn_words_yearly(report_urls,topn):
    keywords = OrderedDict()
    # 遍历url列表，解析出每年政府工作报告的top30关键词并存入字典keywords
    for year,url in report_urls:
        print 'start to parse {year} report...'.format(year = year)
        keywords[year] = get_topn_words(url,topn)
    return keywords

# 根据传入的每年的政府工作报告全文URL，解析出每个十年的合并topn关键词
def get_topn_words_decadal(report_urls,topn):
    # 统计出每个10年的topn关键词
    decade1 = ['1964','1960','1959','1958','1957','1956','1955','1954']
    decade2 = ['1987','1986','1985','1984','1983','1982','1981','1980','1979','1978','1975']
    decade3 = ['1997','1996','1995','1994','1993','1992','1991','1990','1989','1988']
    decade4 = ['2007','2006','2005','2004','2003','2002','2001','2000','1999','1998']
    decade5 = ['2017','2016','2015','2014','2013','2012','2011','2010','2009','2008']
    
    keywords = OrderedDict()
    decade_items = [('1954-1964',decade1),('1975-1987',decade2),('1988-1997',decade3),('1998-2007',decade4),('2008-2017',decade5)]
    for years,decade in decade_items:
        print 'start to parse {years} reports...'.format(years = years)
        urls = [item[1] for item in report_urls if item[0] in decade]
        keywords[years] = get_topn_words_from_urls(urls,topn)
        
    return keywords

def main():
    # 设置字节流编码方式为utf-8
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    # 按年代分析每10年的政府工作报告
    report_urls = get_report_urls(SUMMARY_URL)
    keywords = get_topn_words_decadal(report_urls,20)
    
    # 将结果保存到文件
    with open('out.tmp','w+') as fout:
        for years,words in keywords.items():
            fout.write('【{years}】\n'.format(years = years.decode('unicode-escape').encode('utf-8')))
            for word,count in words:
                fout.write('{word}:{count};'.format(word = word,count = count))
            fout.write('\n\n')
            
    # 绘出散点图
    for years,words in keywords.items():
        visual_utils.draw_keywords_scatter(words[:20],u'{years}年政府工作报告关键词Top{topn}'.format(years = years,topn = 20),u'关键词',u'出现总次数')
    

if __name__ == '__main__':
    main()
```

运行该文件，在当前目录下的out.tmp文件可以看到其内容如下：

【1954-1964】
我们:932;人民:695;国家:690;我国:664;建设:650;发展:641;社会主义:618;生产:509;工业:491;农业:481;工作:396;增长:385;增加:376;必须:361;计划:339;已经:328;方面:299;进行:298;全国:295;企业:267;

【1975-1987】
发展:1012;我们:1011;经济:875;建设:664;我国:609;企业:586;人民:577;国家:569;社会主义:535;改革:499;工作:488;生产:486;必须:451;提高:368;增长:349;方面:349;进行:349;问题:320;增加:290;加强:288;

【1988-1997】
发展:1182;经济:789;建设:696;改革:537;工作:495;加强:485;企业:485;继续:455;国家:435;社会:432;我们:399;我国:378;社会主义:350;积极:340;进一步:334;人民:331;提高:311;政府:289;增加:276;必须:275;

【1998-2007】
发展:814;建设:597;加强:536;经济:459;工作:430;改革:402;企业:368;继续:320;社会:287;政府:284;推进:261;增加:245;加快:240;积极:240;进一步:236;坚持:228;我们:221;提高:217;农村:207;管理:203;

【2008-2017】
发展:1115;建设:597;经济:554;推进:507;改革:479;加强:456;社会:345;加快:344;政府:320;提高:312;实施:301;促进:301;我们:294;工作:287;制度:272;增长:259;完善:248;政策:240;就业:240;企业:240;

同时也绘出了5张图，分别如下：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170823235634058-1378784948.png)

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170823235639996-1786401143.png)

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170823235645949-1630728779.png)

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170823235651527-363866568.png)

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170823235657136-1205464240.png)



### 结果分析

从以上5张图可以看出，1954~1964年间，“我们”是绝对的关键词，其次第二梯队是：人民，国家，我国，建设，发展，社会主义，第三梯队是：生产，工业，农业，从中可以感受到鲜明的时代气息。

到了1978年改革开放及其后的十年间，“发展”成为了绝对的关键词，而第二梯队的关键词是：经济，建设，我国，企业...“生产”也是提到的次数很多的关键词。

1988~1997这十年间，“发展”依然是绝对的关键词，而第二梯队的关键词基本还是：经济，建设，改革，企业....

1998~2007是进入新世纪的十年，“发展”的主旋律依然没有变化，“农村”这一关键词进入前20，体现国家对农业的重视。印象中也就是在这几年间国家取消了延续了2000多年历史的农业税，从此不用再“交公粮”了。

再看最近的十年：2008~2017，“发展”依然是第一要务，而“制度”、“政策”、“就业”等关键词进入前20，具有新时代的特色。

# 获取本文项目源码

[GitHub](https://github.com/dnxbjyj/py-project/tree/master/gov_work_report_analysis)

# 1954~2017政府工作报告原文汇总

https://github.com/dnxbjyj/py-project/blob/master/gov_work_report_analysis/reports-bak.txt]]></description></item><item><title>python日期和时间的处理</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/21/7407313.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Mon, 21 Aug 2017 15:31:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/21/7407313.html</guid><description><![CDATA[总结一下python中对日期和时间的常用处理方法。

# 准备


```python
import time,datetime
```

# 常用操作

### 输出当前的日期时间

方式一：


```python
now = time.localtime()

print '【Output】'
print type(now)
print now
print now[:3]
```

    【Output】
    <type 'time.struct_time'>
    time.struct_time(tm_year=2017, tm_mon=8, tm_mday=21, tm_hour=23, tm_min=15, tm_sec=42, tm_wday=0, tm_yday=233, tm_isdst=0)
    (2017, 8, 21)
    

输出当前时间戳（单位：秒）：


```python
print '【Output】'
print time.time()
```

    【Output】
    1503329021.99
    

方式二：


```python
now = datetime.datetime.now()
print '【Output】'
print now.strftime('%Y-%m-%d %H:%M:%S')
```

    【Output】
    2017-08-21 23:23:46
    

### 格式化输出当前时间


```python
t = time.localtime()
print '【Output】'
print time.strftime('%Y-%m-%d %H:%M:%S',t)
time.sleep(2)
print time.strftime('%Y-%m-%d %H:%M:%S')  # 如果不指定时间，输出的就是当前时间
```

    【Output】
    2017-08-21 23:17:57
    2017-08-21 23:17:59
    

附：格式化字符串总结

* %a  英文星期简称
* %A  英文星期全称
* %b  英文月份简称
* %B  英文月份全称
* %c  本地日期时间
* %d  日期，1~31
* %H  小时，0~23
* %I  小时，0~12
* %m  月，01~12
* %M  分钟，0~59
* %S  秒，0~59
* %j  年中当天的天数
* %w  星期数，1~7
* %W  年中的第几周
* %x  当天日期，格式：01/31/17
* %X  本地的当天时间
* %y  年份，00~99
* %Y  年份完整拼写

### 字符串转为日期时间对象


```python
t = time.strptime('2000-1-1 10:00','%Y-%m-%d %H:%M')  # 注：前后格式要保持一致，否则转换会出错
print '【Output】'
print type(t)
print t
```

    【Output】
    <type 'time.struct_time'>
    time.struct_time(tm_year=2000, tm_mon=1, tm_mday=1, tm_hour=10, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=1, tm_isdst=-1)
    

### 构造datetime对象


```python
dt = datetime.datetime(2010,1,1,23)
print '【Output】'
print type(dt)
print dt
```

    【Output】
    <type 'datetime.datetime'>
    2010-01-01 23:00:00
    

### 将struct_time对象转为时间戳（秒）


```python
now = time.localtime()
timestamp = time.mktime(now)
print '【Output】'
print timestamp
```

    【Output】
    1503329307.0
    

### 将时间戳（秒）转为struct_time对象


```python
timestamp = 1480000000
print '【Output】'
print time.localtime(timestamp)
```

    【Output】
    time.struct_time(tm_year=2016, tm_mon=11, tm_mday=24, tm_hour=23, tm_min=6, tm_sec=40, tm_wday=3, tm_yday=329, tm_isdst=0)
    


```python

```]]></description></item><item><title>python生成器</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/20/7401291.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 20 Aug 2017 12:36:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/20/7401291.html</guid><description><![CDATA[本文讲解一下python生成器的基本用法。

# 生成器的使用场景

当数据量很大的时候，比如从一个超大文本文件中读取内容，如果一下子把数据全部放在列表中，相当于一下子把大量数据放在了内存中，有可能造成内存溢出。那么如何解决呢？

解决方案：不存储所有的数据，而是存储列表元素的生成算法（相当于递推公式），只在使用的时候再根据生成算法生成相应的元素（惰性计算），这就是生成器。

# 创建生成器的方式

### 把列表生成式的中括号改为小括号


```python
a = (x for x in range(3))
print '【Output】'
print type(a)
print a.next()
print '-----'
for x in a:
    print x
```

    【Output】
    <type 'generator'>
    0
    -----
    1
    2
    

### 用yield关键字

如果生成器的递推算法比较复杂，列表生成式的方式已经无法满足要求，那么可以用函数+yield关键字的方式来创建生成器。

如果一个函数中出现了yield关键字，那么这个函数就不再是一个普通函数了，而变成了一个生成器，例如：


```python
def getNum(max):
    x = 0
    while x < max:
        yield x  # 相当于把普通函数的return语句变成了yield语句
        x += 1
a = getNum(3)

print '【Output】'
print type(a)
for x in a:
    print x
```

    【Output】
    <type 'generator'>
    0
    1
    2
    

### 函数遇到yield就中断的特性


```python
def get():
    for i in range(3):
        print 'step' + str(i)
        yield i
    yield 111
    
    for i in range(10,12):
        print 'step' + str(i)
        yield i
    yield 222

a = get()
print '【Output】'
for x in a:
    print x
```

    【Output】
    step0
    0
    step1
    1
    step2
    2
    111
    step10
    10
    step11
    11
    222
    

# 生成器的应用：生成斐波那契数列


```python
def fib(max):
    a,m,n = 0,1,1
    while(a < max):
        yield m
        m,n = n,m+n
        a += 1
print '【Output】'
for x in fib(6):
    print x
```

    【Output】
    1
    1
    2
    3
    5
    8]]></description></item><item><title>思维导图——numpy基本知识</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/17/7384842.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Thu, 17 Aug 2017 14:46:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/17/7384842.html</guid><description><![CDATA[![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170817224537646-765535006.png)]]></description></item><item><title>python用装饰器实现一个计时器</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/17/7384698.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Thu, 17 Aug 2017 14:19:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/17/7384698.html</guid><description><![CDATA[直接上代码：


```python
import time
from functools import wraps

# 定义装饰器
def fn_timer(function):
    @wraps(function)
    def function_timer(*args,**kwargs):
        t0 = time.time()
        result = function(*args,**kwargs)
        t1 = time.time()
        print '[finished {func_name} in {time:.2f}s]'.format(func_name = function.__name__,time = t1 - t0)
        return result
    return function_timer

# 使用装饰器来计时
@fn_timer
def download(url):
    # 模拟下载3秒
    print 'start to download from {0}...'.format(url)
    time.sleep(3)
    print 'download finished!'

download('www.baidu.com')
```

    start to download from www.baidu.com...
    download finished!
    [finished download in 3.00s]]]></description></item><item><title>MySQL-python数据库模块用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/17/7384639.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Thu, 17 Aug 2017 14:05:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/17/7384639.html</guid><description><![CDATA[本文主要介绍在python中如何使用MySQL数据库。

# 准备工作

### 安装mysql

* Linux (Ubuntu)

`apt-get install mysql-server`

安装完成之后在命令行中输入：`mysql -uroot -proot`，看是否能够成功登入MySQL命令行，如果能够成功登入，则说明安装成功。

* Windows

下载MSI安装包mysql-installer-community-5.7.19.0.msi安装，官网地址：https://dev.mysql.com/downloads/installer/

注：注意下载页面这样一句话：Note: MySQL Installer is 32 bit, but will install both 32 bit and 64 bit binaries.

也就是说32位版本和64位版本的安装包是二合一的。

下载之后打开一路Next安装即可，只需在有一步设置账号的时候设置好MySQL的登录用户名和密码即可（比如我设置的用户名/密码是：root/root）。

安装完成之后在命令行中输入：`mysql -uroot -proot`，看是否能够成功登入MySQL命令行，如果能够成功登入，则说明安装成功；如果提示找不到mysql命令，则还需要手工把mysql.exe的路径添加到环境变量，比如我的路径是：`C:\Program Files\MySQL\MySQL Server 5.7\bin`

### 安装MySQL-python驱动模块

* Linux (Ubuntu)

`pip install MySQL-python`

* Windows

Windows下直接用`pip install MySQL-python`命令安装会报错：_mysql.c(42) : fatal error C1083: Cannot open include file: 'config-win.h':No such file or directory

解决方法：

在命令行中输入`python`命令打开python控制台，查看本地安装的python是32位的还是64位的，然后根据本地python的位数来下载如下两个安装包的其中之一：

32位：MySQL-python-1.2.5.win32-py2.7.exe，下载地址：https://pan.baidu.com/s/1qYa5H4w

64位：MySQL-python-1.2.5.win-amd64-py2.7.exe，下载地址：https://pan.baidu.com/s/1qYa5H4w

在安装时可能还会遇到问题：python version 2.7 required which was not found in the registry

解决方法：下载register.py文件，并在命令行中用python命令执行该脚本即可，下载地址：https://pan.baidu.com/s/1mihz25M

### 验证安装是否成功

进入python交互式环境，输入：`import MySQLdb`,如果没有报错，则表明安装mysql及MySQL-python成功。

### 在virtualenv虚拟化环境中安装MySQL-python

如果日常使用的是virtualenv环境，因为virtualenv是相对独立的环境，所以还需要单独安装MySQL-python。

* Linux (Ubuntu)

`pip install MySQL-python`

* Windows

在主环境安装好MySQL-python后，进入python安装目录（如：C:\Python27）下的lib\site-packages目录下，找到如下四组文件/文件夹：

`MySQL_python-1.2.5-py2.7.egg-info`（文件夹）

`MySQLdb` （文件夹）

`_mysql_exceptions.py/_mysql_exceptions.pyc/_mysql_exceptions.pyo` （文件）

`_mysql.pyd`（文件）

然后把以上几个文件/文件夹都复制到virtualenv安装目录的lib\site-packages目录下。然后在virtualenv环境下进入pyton交互式环境，输入`import MySQLdb`验证是否成功。

### 预置mysql数据

* 在命令行中登录mysql（假如用户名/密码是：root/root）：`mysql -uroot -proot`

以下命令都是在登录mysql后的mysql命令行中执行的：

* 查看当前有哪些数据库：`show databases;`

* 创建一个新的名为info的数据库：`create database info;`

* 切换到info数据库：`use info;`

* 创建一个表person：`create table person(id int not null auto_increment primary key,name varchar(32),age int);`

* 查看当前有哪些表：`show tables;`

* 往person表中插入一些数据：

```bash
insert into person(name,age) values('Tom',18);
insert into person(name,age) values('John',23);
insert into person(name,age) values('Amy',15);
```

* 查询person表：`select * from person;`

```bash
mysql> select * from person;
+----+------+------+
| id | name | age  |
+----+------+------+
|  1 | Tom  |   18 |
|  2 | John |   23 |
|  3 | Amy  |   15 |
+----+------+------+
3 rows in set (0.00 sec)
```

# 用python操作数据库

### 连接mysql

导入包：


```python
import MySQLdb
```

获取数据库连接对象：


```python
conn = MySQLdb.connect(user = 'root',passwd = 'root',host = '127.0.0.1')
```

注：MySQLdb.connect()函数可以接收的常用的几个参数：

* host：连接的服务器主机名，默认为本机（localhost）

* user：数据库用户名，默认为当前用户

* passwd：用户登录密码，无默认值

* db：连接的数据库名，无默认值

* read_default_file：使用指定的mysql配置文件

* port：连接端口，默认为3306

* connect_timeout：连接超时时间，单位为秒

获取游标（相当于一个指针）：


```python
cur = conn.cursor()
```

设置当前数据库为info：


```python
conn.select_db('info')
```

注：不建议在python中操作数据库创建表。

### 执行sql语句插入数据

假如向person表中插入数据：


```python
sql = 'insert into person(name,age) values("Zhangsan",34)'  # 组装sql
cur.execute(sql)  # 执行sql
conn.commit()  # 提交，如果没有这句，更改不会生效
cur.close()
conn.close()  # 用完之后最好关闭游标和连接对象
```

此时去mysql中，进入info数据库，查询：`select * from person;`，结果如下：

```bash
mysql> select * from person;
+----+----------+------+
| id | name     | age  |
+----+----------+------+
|  1 | Tom      |   18 |
|  2 | John     |   23 |
|  3 | Amy      |   15 |
|  4 | Zhangsan |   34 |
+----+----------+------+
4 rows in set (0.00 sec)
```

发现成功插入一条数据。

### 批量插入数据

使用占位符和列表：


```python
sql = 'insert into person(name,age) values(%s,%s)'
cur.execute(sql,('Lisi',23))  # 插入一条数据
persons = [('Wangwu',32),('Zhaoliu',12),('Tianqi',45)]
cur.executemany(sql,persons)  # 插入多条
conn.commit()  # 提交
```

此时去mysql中，进入info数据库，查询：`select * from person;`，结果如下：

```bash
mysql> select * from person;
+----+----------+------+
| id | name     | age  |
+----+----------+------+
|  1 | Tom      |   18 |
|  2 | John     |   23 |
|  3 | Amy      |   15 |
|  4 | Zhangsan |   34 |
|  5 | Lisi     |   23 |
|  6 | Wangwu   |   32 |
|  7 | Zhaoliu  |   12 |
|  8 | Tianqi   |   45 |
+----+----------+------+
8 rows in set (0.07 sec)
```

### 删除数据


```python
sql = 'delete from person where name = "Tianqi"'
cur.execute(sql)
conn.commit()
```

```bash
mysql> select * from person;
+----+----------+------+
| id | name     | age  |
+----+----------+------+
|  1 | Tom      |   18 |
|  2 | John     |   23 |
|  3 | Amy      |   15 |
|  4 | Zhangsan |   34 |
|  5 | Lisi     |   23 |
|  6 | Wangwu   |   32 |
|  7 | Zhaoliu  |   12 |
+----+----------+------+
7 rows in set (0.00 sec)
```

### 更新数据


```python
sql = 'update person set age = 88 where name = "Zhaoliu"'
cur.execute(sql)
conn.commit()
```

```bash
mysql> select * from person;
+----+----------+------+
| id | name     | age  |
+----+----------+------+
|  1 | Tom      |   18 |
|  2 | John     |   23 |
|  3 | Amy      |   15 |
|  4 | Zhangsan |   34 |
|  5 | Lisi     |   23 |
|  6 | Wangwu   |   32 |
|  7 | Zhaoliu  |   88 |
+----+----------+------+
7 rows in set (0.00 sec)
```

### 查询数据


```python
sql = 'select * from person'
cur.execute(sql)
# 取查到的所有结果，并把游标移到结尾
print '【Output 1】'
print cur.fetchall()

# 把游标移到开头
cur.scroll(0,'absolute')

# 取查到的前n条数据，并把游标移到第n+1位置
print '【Output 2】'
print cur.fetchmany(3)

# 把游标移到开头
cur.scroll(0,'absolute')

# 取查到的一条数据，并把游标向后移动一位
print '【Output 3】'
print cur.fetchone()
print cur.fetchone()
```

    【Output 1】
    ((1L, 'Tom', 18L), (2L, 'John', 23L), (3L, 'Amy', 15L), (4L, 'Zhangsan', 34L), (5L, 'Lisi', 23L), (6L, 'Wangwu', 32L), (7L, 'Zhaoliu', 88L))
    【Output 2】
    ((1L, 'Tom', 18L), (2L, 'John', 23L), (3L, 'Amy', 15L))
    【Output 3】
    (1L, 'Tom', 18L)
    (2L, 'John', 23L)]]></description></item><item><title>python数据分析基础——初识numpy库</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/13/7354213.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 13 Aug 2017 10:10:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/13/7354213.html</guid><description><![CDATA[numpy库是python的一个著名的科学计算库，本文是一个quickstart。

# 引入：计算BMI

BMI = 体重（kg）/身高（m）^2

假如有如下几组体重和身高数据，让求每组数据的BMI值：


```python
weight = [65.4,59.2,63.6,88.4,68.7]
height = [1.73,1.68,1.71,1.89,1.79]
```


```python
print weight / height ** 2
```

执行上面代码，报错：TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

这是因为普通的除法是元素级的而非向量级的，并不能应用到一组数据上。

解决方案：使用numpy.ndarray数据结构（N维数组），运算是面向矩阵的：


```python
import numpy as np
```


```python
np_weight = np.array(weight)
np_height = np.array(height)
```


```python
print type(np_weight)
print type(np_height)
```

    <type 'numpy.ndarray'>
    <type 'numpy.ndarray'>
    


```python
print np_weight
print np_height
```

    [ 65.4  59.2  63.6  88.4  68.7]
    [ 1.73  1.68  1.71  1.89  1.79]
    

注：和python的列表不同的是，numpy.ndarray数据结构的元素之间是没有逗号分隔的。


```python
np_bmi = np_weight / np_height ** 2
print type(np_bmi)
print np_bmi
```

    <type 'numpy.ndarray'>
    [ 21.85171573  20.97505669  21.75028214  24.7473475   21.44127836]
    

# numpy数组：numpy.ndarray

numpy.ndarray是numpy最基本的数据结构，即N维数组，且数组中的元素需要是同一种类型，如果不是，则会自动转换成同一种类型，如：


```python
print np.array([1.0,'hi',True])
```

    ['1.0' 'hi' 'True']
    

可以看到都被转成了字符串类型。

### 不同数据类型的不同行为


```python
# 普通的python列表
py_list = [1,2,3]
# numpy数组
np_array = np.array(py_list)
```


```python
print py_list + py_list  # 这是列表的拼接
```

    [1, 2, 3, 1, 2, 3]
    


```python
print np_array + np_array  # 这是每两个对应元素之间的运算
```

    [2 4 6]
    

### 子集


```python
print np_bmi[0]
```

    21.8517157272
    


```python
print np_bmi > 23
```

    [False False False  True False]
    


```python
print np_bmi[np_bmi > 23]
```

    [ 24.7473475]
    

### 二维numpy数组

二维numpy数组是以list作为元素的数组，比如：


```python
np_2d = np.array([height,weight])
print type(np_2d)
```

    <type 'numpy.ndarray'>
    


```python
print np_2d
```

    [[  1.73   1.68   1.71   1.89   1.79]
     [ 65.4   59.2   63.6   88.4   68.7 ]]
    


```python
print np_2d.shape
```

    (2, 5)
    

通过shape属性值可以看出，np_2d是一个2行5列的二维数组。

### single type原则


```python
print np.array([[1,2],[3,'4']])
```

    [['1' '2']
     ['3' '4']]
    

### 二维numpy数组的子集


```python
np_2d = np.array([height,weight])
print np_2d
```

    [[  1.73   1.68   1.71   1.89   1.79]
     [ 65.4   59.2   63.6   88.4   68.7 ]]
    


```python
print np_2d[0][2]
```

    1.71
    


```python
print np_2d[0,2]
```

    1.71
    

还可以在两个轴向上分别切片：


```python
print np_2d[:,1:3]
```

    [[  1.68   1.71]
     [ 59.2   63.6 ]]
    

选取第1行：


```python
print np_2d[1,:]
```

    [ 65.4  59.2  63.6  88.4  68.7]
    

求对应的BMI值：


```python
print np_2d[1,:] / np_2d[0,:] ** 2
```

    [ 21.85171573  20.97505669  21.75028214  24.7473475   21.44127836]
    

# 应用

用numpy生成呈正太分布的随机测试数据，并求各项基本的统计数据。

比如生成10000条数据集，记录的是某个镇上所有居民的身高（m）、体重（kg）数据，所用到的函数：

np.random.normal(均值，标准差，取样数)


```python
height = np.random.normal(1.75,0.20,10000)
weight = np.random.normal(60.32,15,10000)
```

下面将若干个（这里是2个）一维数组拼成一个二维数组（有点像zip()函数的作用）：


```python
np_info = np.column_stack((height,weight))
```


```python
print np_info
```

    [[  1.88474198  76.24957048]
     [  1.85353302  64.62674488]
     [  1.74999035  67.5831439 ]
     ..., 
     [  1.78187257  50.11001273]
     [  1.90415778  50.65985964]
     [  1.51573081  41.00493358]]
    

求np_info身高平均值：


```python
print np.mean(np_info[:,0])
```

    1.75460102053
    

求身高的中位数：


```python
print np.median(np_info[:,0])
```

    1.75385473036
    

求身高和体重的相关系数：


```python
print np.corrcoef(np_info[:,0],np_info[:,1])
```

    [[  1.00000000e+00  -1.50825116e-04]
     [ -1.50825116e-04   1.00000000e+00]]
    

求身高的标准差：


```python
print np.std(np_info[:,0])
```

    0.201152169706
    

排序（不会影响源数组）：


```python
print np.sort(np_info[0:10,0])
```

    [ 1.46053123  1.59268772  1.74939538  1.74999035  1.78229515  1.85353302
      1.88474198  1.99755291  2.12384833  2.3727505 ]
    

求和：


```python
print np.sum(np_info[0:10,0])
```

    18.5673265584]]></description></item><item><title>python打包工具pyinstaller的用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/09/7334778.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Wed, 09 Aug 2017 15:07:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/09/7334778.html</guid><description><![CDATA[pyinstaller是一个很好用的python打包工具，在Windows环境下可以将python脚本打包成一个exe可执行文件，并且脚本中所依赖的各种第三方库在打包时候都会被统一处理到一起，这样打包成的exe文件就可以在没有安装这些库的电脑上执行，甚至也可以在没有安装任何python环境的电脑上执行。

## 安装

`pip install pyinstaller`

## 基本用法

在要打包的py脚本（比如名称为demo.py）所在的目录下，执行：

`pyinstaller -F -w -i icon.ico demo.py`

其中icon.ico是当前目录下的一个图标文件，在命令行中执行这条命令后，在当前目录下的dist目录中就会生成一个名为demo.exe的可执行文件，且其图标为icon.ico文件。

几项参数的含义：

* -F：打包为单文件

* -w：Windows程序，不显示命令行窗口，但是如果程序有命令行输入或输出，不要带此项参数！

* -i：后面跟图标文件路径，一定要是ico格式的文件，如果不是可以用格式工厂等软件先转换一下

* demo.py：要打包成exe文件的脚本文件

## 实例

当前目录下有一个名为argtest.py的脚本文件（内容如下），还有一个icon.ico的图片文件。

```python
# coding:utf-8
# 测试argparse模块的基本用法
import argparse

# 创建参数解析对象，并添加脚本用法帮助
parser = argparse.ArgumentParser(description = 'test the base usage of argparse.')

# 添加位置参数
# 所谓位置参数，就是指直接添加的参数而不用使用'-'、'--'等符号
# 添加了位置参数，它就是必选参数
parser.add_argument('arg0')

# 添加可选参数，但如果执行命令时带有该参数，后面必须跟参数值
# '-'后面跟短参数，'--'后面跟长参数
# help参数为该参数的帮助信息
parser.add_argument('-a1','--arg1',help = 'this is arg1')

# 添加可选参数，但后面不能跟参数值
parser.add_argument('-a2','--arg2',help = 'this is arg2',action = 'store_true')

# 添加可选参数并指定参数值数据类型为整型，且数据范围为[0,1,2]，且指定默认值为0,如果输入的值不是整型或值不在要求的范围内，则会报错
parser.add_argument('-a3','--arg3',type = int,choices = [0,1,2],default = 0,help = 'this is arg3')

# 添加一组可选的互斥参数
# a4和a5参数不能同时出现，否则会报错
group = parser.add_mutually_exclusive_group()
group.add_argument('-a4','--arg4',action = 'store_true')
group.add_argument('-a5','--arg5',action = 'store_true')

#####################################

# 执行解析参数
args = parser.parse_args()

# 打印出位置参数'arg0'
print 'arg0 is: ',args.arg0

# 打印出其他位置参数，注意这里要用参数的'--'名称（长参数）
if args.arg1:
    print 'arg1 is: ',args.arg1

# 因为arg2后面没有跟参数值，所以打印出来是True
if args.arg2:
    print 'arg2 is: ',args.arg2
    
if args.arg3:
    print 'arg3 is: ',args.arg3
    
if args.arg4:
    print 'arg4 is: ',args.arg4
    
if args.arg5:
    print 'arg5 is: ',args.arg5
    
```

在命令行当前目录下执行命令：`pyinstaller -F -i icon.ico argtest.py`

执行完之后，发现在当前目录下生成了两个新目录：build、dist以及一个文件：argtest.spec，build目录和argtest.spec都是pyinstaller在打包过程中产生的中间文件，而dist目录中则可以看到生成了一个名为argtest.exe的可执行文件，并且图标为icon.ico的图片。

在当前命令行中先cd到dist目录下，然后执行：`argtest.exe -h`，可以看到：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170809230617433-1730289229.png)


再执行：`argtest.exe 000 -a1 111 -a3 2`，可以看到：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170809230631245-1873121001.png)]]></description></item><item><title>命令行参数解析模块argparse的用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/07/7296605.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 06 Aug 2017 16:36:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/07/7296605.html</guid><description><![CDATA[argparse是python内置的命令行参数解析模块，可以用来为程序配置功能丰富的命令行参数，方便使用，本文总结一下其基本用法。

## 测试脚本

把以下脚本存在argtest.py文件中：

```python
# coding:utf-8
# 测试argparse模块的基本用法
import argparse

# 创建参数解析对象，并添加脚本用法帮助
parser = argparse.ArgumentParser(description = 'test the base usage of argparse.')

# 添加位置参数
# 所谓位置参数，就是指直接添加的参数而不用使用'-'、'--'等符号
# 添加了位置参数，它就是必选参数
parser.add_argument('arg0')

# 添加可选参数，但如果执行命令时带有该参数，后面必须跟参数值
# '-'后面跟短参数，'--'后面跟长参数
# help参数为该参数的帮助信息
parser.add_argument('-a1','--arg1',help = 'this is arg1')

# 添加可选参数，但后面不能跟参数值
parser.add_argument('-a2','--arg2',help = 'this is arg2',action = 'store_true')

# 添加可选参数并指定参数值数据类型为整型，且数据范围为[0,1,2]，且指定默认值为0,如果输入的值不是整型或值不在要求的范围内，则会报错
parser.add_argument('-a3','--arg3',type = int,choices = [0,1,2],default = 0,help = 'this is arg3')

# 添加一组可选的互斥参数
# a4和a5参数不能同时出现，否则会报错
group = parser.add_mutually_exclusive_group()
group.add_argument('-a4','--arg4',action = 'store_true')
group.add_argument('-a5','--arg5',action = 'store_true')

#####################################

# 执行解析参数
args = parser.parse_args()

# 打印出位置参数'arg0'
print 'arg0 is: ',args.arg0

# 打印出其他位置参数，注意这里要用参数的'--'名称（长参数）
if args.arg1:
    print 'arg1 is: ',args.arg1

# 因为arg2后面没有跟参数值，所以打印出来是True
if args.arg2:
    print 'arg2 is: ',args.arg2
    
if args.arg3:
    print 'arg3 is: ',args.arg3
    
if args.arg4:
    print 'arg4 is: ',args.arg4
    
if args.arg5:
    print 'arg5 is: ',args.arg5
    
```

## 执行脚本进行测试

```
(.env) e:\code\python-basic\libs\argparse>argtest.py -h
usage: argtest.py [-h] [-a1 ARG1] [-a2] [-a3 {0,1,2}] [-a4 | -a5] arg0

test the base usage of argparse.

positional arguments:
  arg0

optional arguments:
  -h, --help            show this help message and exit
  -a1 ARG1, --arg1 ARG1
                        this is arg1
  -a2, --arg2           this is arg2
  -a3 {0,1,2}, --arg3 {0,1,2}
                        this is arg3
  -a4, --arg4
  -a5, --arg5
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a1 111 -a2 --ar
g3 2 -a4
arg0 is:  000
arg1 is:  111
arg2 is:  True
arg3 is:  2
arg4 is:  True
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py
usage: argtest.py [-h] [-a1 ARG1] [-a2] [-a3 {0,1,2}] [-a4 | -a5] arg0
argtest.py: error: too few arguments
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000
arg0 is:  000
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a1
usage: argtest.py [-h] [-a1 ARG1] [-a2] [-a3 {0,1,2}] [-a4 | -a5] arg0
argtest.py: error: argument -a1/--arg1: expected one argument
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a1 111
arg0 is:  000
arg1 is:  111
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a1 111 -a2
arg0 is:  000
arg1 is:  111
arg2 is:  True
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a1 111 -a2 222
usage: argtest.py [-h] [-a1 ARG1] [-a2] [-a3 {0,1,2}] [-a4 | -a5] arg0
argtest.py: error: unrecognized arguments: 222
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a3 333         
usage: argtest.py [-h] [-a1 ARG1] [-a2] [-a3 {0,1,2}] [-a4 | -a5] arg0          
argtest.py: error: argument -a3/--arg3: invalid choice: 333 (choose from 0, 1, 2)                                                                             
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a3 2
arg0 is:  000
arg3 is:  2
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a4 -a5
usage: argtest.py [-h] [-a1 ARG1] [-a2] [-a3 {0,1,2}] [-a4 | -a5] arg0
argtest.py: error: argument -a5/--arg5: not allowed with argument -a4/--arg4
```

```
(.env) e:\code\python-basic\libs\argparse>python argtest.py 000 -a4
arg0 is:  000
arg4 is:  True
```]]></description></item><item><title>用ConfigParser模块读写conf配置文件</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/06/7295613.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 06 Aug 2017 10:51:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/06/7295613.html</guid><description><![CDATA[ConfigParser是Python内置的一个读取配置文件的模块，用它来读取和修改配置文件非常方便，本文介绍一下它的基本用法。

## 数据准备

假设当前目录下有一个名为`sys.conf`的配置文件，其内容如下：

```bash
[db]
db_host=127.0.0.1
db_port=22
db_user=root
db_pass=root123

[concurrent]
thread  =    10
processor =    20
```

注：配置文件中，各个配置项其实是用等号'='隔开的键值对，这个等号两边如果有空白符，在处理的时候都会被自动去掉。但是key之前不能存在空白符，否则会报错。

## 配置文件介绍

配置文件即conf文件，其文件结构多为键值对的文件结构，比如上面的sys.conf文件。

conf文件有2个层次结构，`[]`中的文本是section的名称，下面的键值对列表是item，代表每个配置项的键和值。

## 初始化ConfigParser实例


```python
import ConfigParser
```


```python
cf = ConfigParser.ConfigParser()
cf.read('./sys.conf')
```

## 读取所有的section列表

section即`[]`中的内容。


```python
s = cf.sections()
print '【Output】'
print s
```

    【Output】
    ['db', 'concurrent']
    

## 读取指定section下options key列表

options即某个section下的每个键值对的key.


```python
opt = cf.options('concurrent')
print '【Output】'
print opt
```

    【Output】
    ['thread', 'processor']
    

## 获取指定section下的键值对字典列表


```python
items = cf.items('concurrent')
print '【Output】'
print items
```

    【Output】
    [('thread', '10'), ('processor', '20')]
    

## 按照指定数据类型读取配置值

cf对象有get()、getint()、getboolean()、getfloat()四种方法来读取不同数据类型的配置项的值。


```python
db_host = cf.get('db','db_host')
db_port = cf.getint('db','db_port')
thread = cf.getint('concurrent','thread')

print '【Output】'
print db_host,db_port,thread
```

    【Output】
    127.0.0.1 22 10
    

## 修改某个配置项的值

比如要修改一下数据库的密码，可以这样修改：


```python
cf.set('db','db_pass','newpass')
# 修改完了要写入才能生效
with open('sys.conf','w') as f:
    cf.write(f)
```

## 添加一个section


```python
cf.add_section('log')
cf.set('log','name','mylog.log')
cf.set('log','num',100)
cf.set('log','size',10.55)
cf.set('log','auto_save',True)
cf.set('log','info','%(bar)s is %(baz)s!')

# 同样的，要写入才能生效
with open('sys.conf','w') as f:
    cf.write(f)
```

执行上面代码后，sys.conf文件多了一个section，内容如下：

```bash
[log]
name = mylog.log
num = 100
size = 10.55
auto_save = True
info = %(bar)s is %(baz)s!
```

## 移除某个section


```python
cf.remove_section('log')

# 同样的，要写入才能生效
with open('sys.conf','w') as f:
    cf.write(f)
```

## 移除某个option


```python
cf.remove_option('db','db_pass')

# 同样的，要写入才能生效
with open('sys.conf','w') as f:
    cf.write(f)
```]]></description></item><item><title>用python-docx模块读写word文档</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/05/7290410.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sat, 05 Aug 2017 07:38:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/05/7290410.html</guid><description><![CDATA[工作中会遇到需要读取一个有几百页的word文档并从中整理出一些信息的需求，比如产品的API文档一般是word格式的。几百页的文档，如果手工一个个去处理，几乎是不可能的事情。这时就要找一个库写脚本去实现了，而本文要讲的python-docx库就能满足这个需求。

## 安装

·pip install python-docx·

## 写.docx文件

示例代码：

```python
# coding:utf-8
# 写word文档文件
import sys

from docx import Document
from docx.shared import Inches

def main():
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    # 创建文档对象
    document = Document()
    
    # 设置文档标题，中文要用unicode字符串
    document.add_heading(u'我的一个新文档',0)
    
    # 往文档中添加段落
    p = document.add_paragraph('This is a paragraph having some ')
    p.add_run('bold ').bold = True
    p.add_run('and some ')
    p.add_run('italic.').italic = True
    
    # 添加一级标题
    document.add_heading(u'一级标题, level = 1',level = 1)
    document.add_paragraph('Intense quote',style = 'IntenseQuote')
    
    # 添加无序列表
    document.add_paragraph('first item in unordered list',style = 'ListBullet')
    
    # 添加有序列表
    document.add_paragraph('first item in ordered list',style = 'ListNumber')
    document.add_paragraph('second item in ordered list',style = 'ListNumber')
    document.add_paragraph('third item in ordered list',style = 'ListNumber')
    
    # 添加图片，并指定宽度
    document.add_picture('e:/docs/pic.png',width = Inches(1.25))
    
    # 添加表格: 1行3列
    table = document.add_table(rows = 1,cols = 3)
    # 获取第一行的单元格列表对象
    hdr_cells = table.rows[0].cells
    # 为每一个单元格赋值
    # 注：值都要为字符串类型
    hdr_cells[0].text = 'Name'
    hdr_cells[1].text = 'Age'
    hdr_cells[2].text = 'Tel'
    # 为表格添加一行
    new_cells = table.add_row().cells
    new_cells[0].text = 'Tom'
    new_cells[1].text = '19'
    new_cells[2].text = '12345678'
    
    # 添加分页符
    document.add_page_break()
    
    # 往新的一页中添加段落
    p = document.add_paragraph('This is a paragraph in new page.')
    
    # 保存文档
    document.save('e:/docs/demo1.docx')
    
if __name__ == '__main__':
    main()

```

执行以上代码会在'e:/docs/'路径下产生一个demo1.docx文件，其内容如下：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170805153621194-451903993.png)


## 读.docx文件

示例代码：

```python
# coding:utf-8
# 读取已有的word文档
import sys

from docx import Document

def main():
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    # 创建文档对象
    document = Document('e:/docs/demo2.docx')
    
    # 读取文档中所有的段落列表
    ps = document.paragraphs
    # 每个段落有两个属性：style和text
    ps_detail = [(x.text,x.style.name) for x in ps]
    with open('out.tmp','w+') as fout:
        fout.write('')
    # 读取段落并写入一个文件
    with open('out.tmp','a+') as fout:
        for p in ps_detail:
            fout.write(p[0] + '\t' + p[1] + '\n\n')
    
    # 读取文档中的所有段落的列表
    tables = document.tables
    # 遍历table，并将所有单元格内容写入文件中
    with open('out.tmp','a+') as fout:
        for table in tables:
            for row in table.rows:
                for cell in row.cells:
                    fout.write(cell.text + '\t')
                fout.write('\n')
    
if __name__ == '__main__':
    main()
```

假如在'e:/docs/'路径下有一个demo2.docx文档，其内如如下：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170805153715694-964739399.png)


执行上面脚本后，输出的out.tmp文件的内容如下：

![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170805153857506-1181935432.png)

## 注意事项
* 如果段落中是有超链接的，那么段落对象是读取不出来超链接的文本的，需要把超链接先转换成普通文本，方法：全选word文档的所有内容，按快捷键Ctrl+Shift+F9即可。]]></description></item><item><title>git学习总结系列（4）——gitignore文件</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/05/7290022.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sat, 05 Aug 2017 05:32:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/05/7290022.html</guid><description><![CDATA[有时候工作区中会有我们创建的一些密码配置文件，或者自动生成的一些临时文件，比如python代码编译产生的.pyc文件和java代码编译产生的.class文件等，我们在提交代码的时候没有必要把这些文件也提交。这时就可以用.gitignore文件来指定提交时需要忽略的文件/文件夹列表，那么下次提交时这些文件就不会被提交到本地和远程的代码库中。

## 已有的.gitignore文件大全

链接：https://github.com/github/gitignore

针对各种语言的，可以直接拿来用。在github上创建远程仓库的时候，也可以直接指定选择哪些.gitignore文件。

## 自己创建.gitignore文件

* 在当前本地git仓库根目录下，创建一个名为".gitignore"的文件，并在其中按如下格式写入要忽略的文件/文件夹：

```bash
# i will ignore these files:
*.dll
*.class
*.pyc
debug/*
```

注：第1行"#"后面的是注释，第2~4行分别表示要忽略`*.dll、*.class、*.pyc`文件，最后一行表示忽略掉debug目录及目录的所有内容。

* 保存并提交该.gitignore文件。

* 用`git status`命令再查看状态，发现工作区的状态已经是clean了，没有再提示`*.dll、*.class、*.pyc`这些类型的文件和debug目录下的文件未提交了。

## 清除已经提交的文件

比如在配置.gitignore文件之前，就不小心提交了一些dll文件和debug目录下的文件，现在想清除仓库中的这些文件，那么可以这样办：

```bash
git rm *.dll 
git rm -r debug
git rm --cached *.dll
git rm –r --cached debug
git commit -m "清除缓存"
```

执行完之后发现代码库中就没有这些文件/文件夹了。

## 修改git的全局配置

上面添加了.gitignore文件之后，只会对当前仓库产生影响，那么如果想把这个.gitignore文件作为全局配置，该怎么办呢？

* 创建一个.gitignore_global文件，添加要忽略的文件/文件夹清单。

* 执行命令：`git config --global core.excludesfile .gitignore_global`即可。]]></description></item><item><title>git学习总结系列（3）——分支管理</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/04/7288103.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Fri, 04 Aug 2017 15:49:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/04/7288103.html</guid><description><![CDATA[本文主要介绍git分支的概念及常用分支操作。

## 分支的概念

所谓分支，可以理解成一个个相互独立的工作空间，在每一个分支上的改动不会影响到其他分支的代码。git默认的分支是master分支。

试想一下这样一个场景：

正在master分支写主干需求的代码，突然来了一个很紧急的临时需求，需要在一周之内完成。如果在master分支直接开发的话，可能会造成主干需求的代码出现问题，这个时候就可以新拉一个分支（比如叫dev），dev分支的初始代码和master分支的完全相同，这个时候就可以放心的在dev分支上开发新需求了，不用担心会影响到master分支。等到在dev分支开发完新需求并充分测试验证没问题之后，就可以合并到master分支了，合并之后就可以删掉dev分支。

## 创建与合并、删除分支

* 查看当前分支：`git branch`

会列出来所有分支，并且会在当前分支前面加上一个"*"

* 创建一个名为"dev"的分支：`git branch dev`

* 切换到名为"dev"的分支：`git checkout dev`

* 创建一个名为"dev"的分支并切换到dev：`git checkout -b dev`

* 假如当前在master分支，合并dev分支到当前分支：`git merge dev`

* 假如当前在master分支上，删除另外一个分支dev：`git branch -d dev`

注：如果当前在dev分支，那么是无法删除dev分支的。如果dev分支并没有和master分支合并，也是无法删除的，除非使用强制删除命令：`git branch -D dev`

## 查看分支合并历史记录

当合并分支出现冲突时，需要先解决冲突，再合并分支。使用`git log --graph`命令可以查看合并分支的历史记录。

注：要注意的是，`git merge <branch-name>`命令默认采用的是fast-forward模式，也就是如果合并某个分支（比如dev）到比如master分支后，把dev删掉，那么在这种模式下的历史记录里是看不到合并记录的。如果想要看到dev分支合并的历史记录，那么在合并时就要采用普通模式：`git merge --no-ff -m "merge with no-ff" <branch-name>`，这里加-m参数是因为本次合并要创一个新的commit.

## 保存与恢复工作现场

* 假如当前在dev分支上，保存工作现场命令：`git stash`，可保存多个工作现场。

* 查看保存的工作现场列表：`git stash list`

* 恢复并删除最后保存的工作现场：`git stash pop`

* 恢复指定的工作现场：`git stash apply stash@{0}`

* 删除指定的工作现场：`git stash drop stash@{0}`

## 操作远程仓库

* 查看远程库信息：`git remote -v`

* 在本地创建和远程分支相关联的分支：`git checkout -b <local-branch-name> origin/<remote-branch-name>`，本地和远程分支的名称最好相同。

* 把本地dev分支推送到远程库：`git push origin dev`

注：如果推送失败，可能本地代码不是最新的，可以先用`git pull`命令先把远程的代码拉到本地，如果有冲突处理一下冲突，然后再推送。不过`git pull`命令也有可能失败，这是因为没有建立本地分支和远程分支的关联，还需要先用这个命令建立关联：`git branch --set-upstream <local-branch-name> origin/<remote-branch-name>`

## 多人协作推荐的分支策略

* master分支放用于发布的代码，平时不要在master分支上进行日常开发。

* 建立dev分支用于平时的开发，在发布版本的时候把代码合并到master分支。

* 团队的每个人从dev分支建立以自己名字命名的分支，如：zhangsan,lisi,wangwu, 每天结束后都把各自代码合到dev分支上。

* 多人开发的新需要，可以从dev分支建立feature分支，在feature分支上进行开发，开发完成后合入dev分支。

* 当master分支出现bug时，可以基于master拉一个bug分支，在bug分支上修改并调试好bug后再合入master分支。

## 多人协作常见的协作模式

* 日常可以通过`git push origin <local-branch-name>`来往远程推送自己的修改。

* 如果推送失败，说明远程的代码比本地的要新，需要使用`git pull`先试图合并。

* 如果合并有冲突，则先解决冲突，然后在本地commit.

* 如果没有冲突，或解决完冲突后，再使用`git push origin <local-branch-name>`即可推送成功。

* 如果`git pull`命令提示`no tracking information`，则说明本地分支没有和远程分支建立关联，用这个命令建立关联：`git branch --set-upstream <local-branch-name> origin/<remote-branch-name>`

* 如果上面一条命令仍然执行不成功，说明本地仓库还没有和远程仓库建立连接，可以用如下命令建立连接：`git remote add origin git@github.com:xxx/xxx.git`]]></description></item><item><title>专治各种python字符编码问题疑难杂症</title><link>http://www.cnblogs.com/jiayongji/archive/2017/08/04/7287752.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Fri, 04 Aug 2017 15:15:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/08/04/7287752.html</guid><description><![CDATA[## 标准动作

* 在脚本第一行指定编码格式：


```python
# coding:utf-8
```

* 将默认的ascii字符流处理方式变为utf-8：


```python
import sys
sys.getdefaultencoding()
```




    'ascii'




```python
reload(sys)
sys.setdefaultencoding('utf-8')
```

## 常见字符编码知识

### ascii编码

是最早使用、最常见的一种字符编码，包含了128个字符（英文字母、数字、符号、控制字符等），也是下面讲到的所有编码的公共集合。

### ISO8859-1编码

西欧字符集编码。

### gb2312/gbk/gb18030之间的关系

这是简体中文的三种编码，从左到右包含的字符范围依次增大，左边是右边的子集。

### big5编码

繁体中文编码。

### unicode/utf-8/utf-16/utf-32之间的关系

* unicode是一个字符集，表示包含了哪些字符——包含了世界上所有字符。

* 而utf-8/utf-16/utf-32是字符编码，表示用哪种方式表示unicode字符集，是对unicode字符集的具体编码实现方式。

* 最常用的是utf-8

## 获取字符串的编码格式


```python
from chardet import detect
```


```python
detect('abc')
```




    {'confidence': 1.0, 'encoding': 'ascii', 'language': ''}




```python
detect(r'abc')
```




    {'confidence': 1.0, 'encoding': 'ascii', 'language': ''}



注：detect的参数不能是unicode字符串，否则会报错。

## str和unicode对象

str和unicode都是python内置的两种字符串类，并且有着同样的父类：basestring


```python
type('123')
```




    str




```python
type(u'123')
```




    unicode




```python
str.__bases__
```




    (basestring,)




```python
unicode.__bases__
```




    (basestring,)




```python
basestring.__bases__
```




    (object,)



## 用好unicode这个桥梁

有时候并不知道一个字符串的编码是什么（比如从某个文件中读取的内容），这时候如何把这个文件的字符编码转为需要的编码呢（比如utf-8）？

答案是：借助unicode为桥梁。

比如：


```python
with open('content.txt','r') as fin:
    content = fin.read()
    # 这里先把文件内容decode成utf-8编码（中间桥梁），再encode成gbk编码（目标编码）
    target = content.decode('utf-8').encode('gbk')
```

## 把转义的中文unicode字符串转为中文


```python
s = '\u6211'
```


```python
type(s)
```




    str




```python
print s
```

    \u6211
    


```python
print s.decode('unicode-escape').encode('utf-8')
```

    我
    

## 把各种字符都统一成unicode来处理


```python
from __future__ import unicode_literals
```


```python
type('123')
```




    unicode




```python
type(u'123')
```




    unicode



## 解决matplotlib图表中的中文乱码问题

按照matplotlib默认的字符编码，在图表中中文不能正常显示，会显示为方框，如下：


```python
import matplotlib.pyplot as plt
```


```python
x = [1,2,3]
y = [4,6,8]
plt.plot(x,y)
plt.title(u'数据')
plt.show()
```


![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170804231421522-1392373753.png)




解决方法：


```python
plt.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示为方框的问题
plt.title(u'数据')
plt.plot(x,y)
plt.show()
```


![](http://images2017.cnblogs.com/blog/760572/201708/760572-20170804231431178-330608487.png)]]></description></item><item><title>python环境配置问题及解决办法集锦</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/31/7261081.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 30 Jul 2017 16:18:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/31/7261081.html</guid><description><![CDATA[# Windows下用pip安装包时出现"error: Microsoft Visual C++ 9.0 is required"错误
```bash
error: Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpython27
```

* 解决办法：
到网上下载VCForPython27.msi并安装，百度网盘下载地址：http://pan.baidu.com/s/1sluf4SX]]></description></item><item><title>python数据分析基础——初识matplotlib库</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/24/7226923.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Mon, 24 Jul 2017 00:17:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/24/7226923.html</guid><description><![CDATA[# 基本用法


```python
import numpy as np
import matplotlib.pyplot as plt

# 年份
year = [1950,1970,1990,2010]
# 全球总人口（单位：10亿）
pop = [2.519,3.692,5.263,6.972]

# 画折线图
plt.plot(year,pop)  # year:x轴，pop:y轴
# 显示出折线图
plt.show()
```


![](http://images2015.cnblogs.com/blog/760572/201707/760572-20170724081630399-331427950.png)





```python
# 画散点图
plt.scatter(year,pop)
plt.show()
```


![](http://images2015.cnblogs.com/blog/760572/201707/760572-20170724081640758-615003500.png)




# 画直方图


```python
# 数据样本为1000个身高的正态模拟数据
values = np.round(np.random.normal(1.75,0.20,1000),2)
# bins表示直方图划分的区间数
plt.hist(values,bins = 10)
plt.show()
```


![](http://images2015.cnblogs.com/blog/760572/201707/760572-20170724081651336-598389761.png)




# 图表个性化


```python
pop = [1.0,1.262,1.650] + pop
year = [1800,1850,1900] + year

# 设置图表标题
plt.title('World Polulation')
# x,y轴名称
plt.xlabel('Year')
plt.ylabel('Polulation')

# y轴刻度，第二个参数为显示的刻度
plt.yticks([0,2,4,6,8,10],['0','2B','4B','6B','8B','10B'])

# 填充曲线下方区域
plt.fill_between(year,pop,0,color = 'green')

plt.show()
```


![](http://images2015.cnblogs.com/blog/760572/201707/760572-20170724081702524-1674265496.png)

# 解决绘图时中文显示为方块的问题
```python
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体
plt.rcParams['axes.unicode-minus'] = False  # 解决负号显示为方块的问题
```]]></description></item><item><title>备忘</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/20/7210351.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Thu, 20 Jul 2017 03:37:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/20/7210351.html</guid><description><![CDATA[Excel 正则表达式提取值：http://blog.csdn.net/catoop/article/details/70247105
使用VBA在Excel中实现自定义的Sum函数：http://www.xuebuyuan.com/157199.html

http://www.cnblogs.com/fkissx/p/5417363.html
https://www.crifan.com/character_encoding_charset_simpile_tutorial/]]></description></item><item><title>python-json模块的基本用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7148051.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Mon, 10 Jul 2017 14:23:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7148051.html</guid><description><![CDATA[# 准备工作


```python
import json

# 准备数据：
d = dict(name = 'Tom',age = 18)
json_str = '{"name":"Tom","age":18}'
# 注：json字符串中的引号必须为双引号，若为单引号会转换出错。
```

# json数据类型和python数据类型的对应关系

* {} <——> dict
* [] <——> list
* "string" <——> "str"或u"unicode"
* 123.4 <——> int或float
* true/false <——> True/False
* null <——> None

# 常用方法

## 把字典转换成json字符串


```python
ret = json.dumps(d)
print ret
print type(ret)
```

    {"age": 18, "name": "Tom"}
    <type 'str'>


## 把json字符串转成字典


```python
ret = json.loads(json_str)
print ret
print type(ret)
```

    {u'age': 18, u'name': u'Tom'}
    <type 'dict'>


## 把字典转换成json字符串并写入文件


```python
with open('out.txt','w+') as f:
    json.dump(d,f)
```

## 从文件中读取一个json字符串并转换为字典


```python
# 文件(out.txt)内容：{"age": 18, "name": "Tom"}
with open('out.txt','r') as f:
    ret = json.load(f)
    print ret
    print type(ret)
```

    {u'age': 18, u'name': u'Tom'}
    <type 'dict'>


## 自定义对象转成json字符串


```python
class Student(object):
    def __init__(self,name,age):
        self.name = name
        self.age = age

s = Student('Tom',18)
print json.dumps(s)
#　输出：
# TypeError: <__main__.Student object at 0x7f7ab808cf10> is not JSON serializable
```

出错原因：Student对象不是一个可序列化为json的对象。

* 解决方法1：写个转换函数


```python
def student2dict(std):
    return {'name':std.name,'age':std.age}
print json.dumps(s,default = student2dict)
```

    {"age": 18, "name": "Tom"}


* 解决方法2：传入Student对象内置属性：__dict__


```python
print json.dumps(s,default = lambda obj:obj.__dict__)
```

    {"age": 18, "name": "Tom"}


## json字符串转换为自定义对象


```python
def dict2student(d):
    return Student(d['name'],d['age'])
ret = json.loads(json_str,object_hook = dict2student)
print ret
print ret.__dict__
print type(ret)
```

    <__main__.Student object at 0x7f7aaa713ad0>
    {'age': 18, 'name': u'Tom'}
    <class '__main__.Student'>


# 补充

## 更好地输出json


```python
json.dumps(json.loads(json_str),indent = 4)  # indent为缩进的字符数
```




    '{\n    "age": 18, \n    "name": "Tom"\n}'



## 保持json字符串中属性的顺序


```python
from collections import OrderedDict
data = json.loads(json_str,object_pairs_hook = OrderedDict)
print data
```

    OrderedDict([(u'name', u'Tom'), (u'age', 18)])]]></description></item><item><title>python虚拟化运行环境——virtualenv</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7144081.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Mon, 10 Jul 2017 00:08:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7144081.html</guid><description><![CDATA[# 介绍

virtualenv是一种虚拟化环境，可以理解为创建了一个虚拟化的pyhon运行空间，可以从新安装各种库，而与本机环境互不影响，互相隔离。

# 安装及使用

1. 首先要安装包管理工具pip（pip的使用详见：[python包管理工具pip的安装和使用](http://www.cnblogs.com/jiayongji/p/7143849.html)）
2. `pip install virtualenv`
3. 在当前目录下初始化一个虚拟化文件夹env（是隐藏文件夹）：`virtualenv .env`
4. 激活：
```bash
Linux/Mac环境：source .env/bin/activate
Windows：.env\Scripts\activate
```
5. 这样就可以在虚拟化环境中愉快地玩耍了。
6. 离开虚拟化环境：`deactivate`]]></description></item><item><title>python包管理工具pip的安装和使用</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7143849.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 09 Jul 2017 16:58:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7143849.html</guid><description><![CDATA[pip是python的一个非常好用的包管理工具，可以用来很方便地安装和管理各种三方库，本文对其基本用法进行介绍。

# 安装pip

## Windows系统上安装

1. python 2.7.9及以上版本的windows版的安装包已经集成了pip，所以到python.org网站下载python-2.7.9.amd64.msi安装包并安装。
2. 安装时选择"安装pip"。
3. 安装好后添加python.exe和pip.exe文件所在路径到系统环境变量中。这两个路径分别为（假设我的python安装在了D:\Programs\Python27目录下）：
```bash
D:\Programs\Python27
D:\Programs\Python27\Scripts
```
4. 测试：打开cmd，输入：`pip install web.py`
5. 进入python命令行，输入：`import web`，若导入成功则说明pip安装成功。

## Linux系统上安装

1. 到pypi.python.org上搜索pip，下载最新版本的源码压缩包。
2. 在本地解压源码压缩包，进入源码路径，执行：`python setup.py install`即可安装。
3. 测试：打开cmd，输入：`pip install web.py`
4. 进入python命令行，输入：`import web`，若导入成功则说明pip安装成功。

# pip常用命令

* 安装软件包：`pip install 包名`

注：这里的包名，也可以是已经下载好的whl文件或tar.gz压缩包文件路径，或者包所在的URL地址。

* 升级pip自身：`pip install --upgrade pip`

* 查看已经通过pip安装的包：`pip list`

* 显示当前已经通过pip安装的包及版本号：`pip freeze`，显示结果示例：
```bash
certifi==2017.7.27.1
chardet==3.0.4
idna==2.5
requests==2.18.2
urllib3==1.22
virtualenv==15.1.0
web.py==0.38
```

* 将`pip freeze`命令的结果重定向到requirements.txt文件中：`pip freeze > requirements.txt`

* 使用已有的requirements.txt文件在另一个环境上安装各种包（比如在一台新电脑上）：`pip install -r requirements.txt`
注：这个命令的好处就是，如果换了一个新的环境需要安装一个相同的python环境，那么只需要有requirements.txt文件即可快速安装，就不需要再思考要安装哪些包了。

* 查看某个已经安装的包的详情：`pip show 包名`

* 查看过期的包：`pip list --outdated`

* 安装包到用户目录：`pip install 包名 --user`

* 安装本地的安装包：`pip install 目录|文件名`

* 卸载包：`pip uninstall 包名`

* 升级包：`pip install 包名 --upgrade`

* 显示包所在目录：`pip show -f 包名`

* 搜索包：`pip search 关键字`

* 查询可升级的包：`pip list -o`

* 下载包但不安装：`pip install 包名 -d 目录`

* 打包：`pip wheel 包名`

# pip镜像源的设置与使用

## 国内pip镜像

* 豆瓣：http://pypi.douban.com/simple
* 中科大：http://pypi.mirros.ustc.edu.cn/simple

注：使用国内的镜像源，安装各种包速度会快一些。

## 指定单次安装源

`pip install 包名 -i 镜像url`

## 指定全局安装源

pip配置文件：

* Unix、Mac OS的pip配置文件位于：`$HOME/.pip/pip.conf`

* Windows的pip配置文件位于：`%HOME%\pip\pip.ini`
注：Windows下%HOME%路径一般为：`C:\Users\<UserName>\`

往pip配置文件写入如下内容（如果没有配置文件则在相应路径新建一个），这里以豆瓣的镜像为例：
```bash
[global]
trusted-host=pypi.douban.com
timeout=6000
index-url=http://pypi.douban.com/simple
```]]></description></item><item><title>python正则表达式系列（6）——"或"表达式的用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7143746.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 09 Jul 2017 16:07:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/10/7143746.html</guid><description><![CDATA[```python
import re

s1 = u'距离地铁5号线189米'
s2 = u'距离地铁5号线(环中线)189米'
s3 = u'距离地铁5号线（环中线）189米'

p1 = re.compile(u'号线(\d+)米')
print re.findall(p1,s1)
# 输出：[u'189']
print re.findall(p1,s2)
# 输出：[]
print re.findall(p1,s3)
# 输出：[]

p2 = re.compile(u'(?:号线|\)|）)(\d+)')  # 注：这里的'?:'是为了取消分组，不在结果中捕获
print re.findall(p2,s1)
# 输出：[u'189']
print re.findall(p2,s2)
# 输出：[u'189']
print re.findall(p2,s3)
# 输出：[u'189']
```

```python
# 匹配java中的单行注释的正则表达式：
p1 = r'^\s*(//.*$|/\*.*\*/\s*$|$)'

# 匹配java中的多行注释的正则表达式：
code_text = '...'
p2 = r'/\*.+?\*/'
result = re.findall(p2,code_text,re.S)
```]]></description></item><item><title>python爬虫防止IP被封的一些措施</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/09/7143662.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 09 Jul 2017 15:32:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/09/7143662.html</guid><description><![CDATA[在编写爬虫爬取数据的时候，尤其是爬取大量数据的时候，因为很多网站都有反爬虫措施，所以很容易被封IP，就不能继续爬了。本文就如何解决这个问题总结出一些应对措施，这些措施可以单独使用，也可以同时使用，效果更好。

# 伪造User-Agent

在请求头中把User-Agent设置成浏览器中的User-Agent，来伪造浏览器访问。比如：


```python
headers = {'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'}
resp = requests.get(url,headers = headers)
```

# 在每次重复爬取之间设置一个随机时间间隔


```python
# 比如：
time.sleep(random.randint(0,3))  # 暂停0~3秒的整数秒，时间区间：[0,3]
# 或：
time.sleep(random.random())  # 暂停0~1秒，时间区间：[0,1)
```

# 伪造cookies

若从浏览器中可以正常访问一个页面，则可以将浏览器中的cookies复制过来使用，比如：


```python
cookies = dict(uuid='b18f0e70-8705-470d-bc4b-09a8da617e15',UM_distinctid='15d188be71d50-013c49b12ec14a-3f73035d-100200-15d188be71ffd')
resp = requests.get(url,cookies = cookies)
```

```python
# 把浏览器的cookies字符串转成字典
def cookies2dict(cookies):
    items = cookies.split(';')
    d = {}
    for item in items:
        kv = item.split('=',1)
        k = kv[0]
        v = kv[1]
        d[k] = v
    return d
```

注：用浏览器cookies发起请求后，如果请求频率过于频繁仍会被封IP，这时可以在浏览器上进行相应的手工验证（比如点击验证图片等），然后就可以继续正常使用该cookies发起请求。

# 使用代理

可以换着用多个代理IP来进行访问，防止同一个IP发起过多请求而被封IP，比如：


```python
proxies = {'http':'http://10.10.10.10:8765','https':'https://10.10.10.10:8765'}
resp = requests.get(url,proxies = proxies)
# 注：免费的代理IP可以在这个网站上获取：http://www.xicidaili.com/nn/
```]]></description></item><item><title>数据分析文章收集</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/05/7120260.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Wed, 05 Jul 2017 03:14:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/05/7120260.html</guid><description><![CDATA[链家网北京二手房数据：https://github.com/pingao777/2ndhand_house]]></description></item><item><title>微信小程序开发实践点滴——Bmob基本REST API的python封装</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119115.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:36:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119115.html</guid><description><![CDATA[> Refer：Bmob后端云REST API接口文档：http://docs.bmob.cn/data/Restful/a_faststart/doc/index.html

本文使用python对Bmob REST API的基本增删改查接口进行封装，方便在小程序开发时批量插入原始数据。

# 常用操作函数封装

```python
#!/usr/bin/python
# coding:utf-8
# Bmob后端云基本REST API封装
import requests
import json

# 每个应用都会有这两个ID，以下方法如果不传入这两个参数，那么使用这里默认的值
APP_ID = 'XXX'
REST_API_KEY = 'XXX'

# 封装rest api的get方法，根据对象ID获取一条数据
# table_name：要查询的表名
# object_id：要查询的数据记录的ID
def query(table_name,object_id,app_id = APP_ID,rest_api_key = REST_API_KEY):
    # 构建请求头
    headers = {}
    headers['X-Bmob-Application-Id'] = app_id
    headers['X-Bmob-REST-API-Key'] = rest_api_key

    # 构建url
    url = 'https://api.bmob.cn/1/classes/{table_name}/{object_id}'.format(table_name = table_name,object_id = object_id)

    # 发起请求
    resp = requests.get(url,headers = headers,verify = False)
    
    # 设置响应体编码
    resp.encoding = 'utf-8'
    
    if resp and resp.status_code == 200:
        return json.loads(resp.text)
    return None

# 封装rest api的post方法，插入一条记录
# table_name：表名，如果表名还不存在，则先创建一个表再插入数据
# data：字典，要插入的记录的各个字段的字段名和值
def insert(table_name,data,app_id = APP_ID,rest_api_key = REST_API_KEY):
    # 构建请求头
    headers = {}
    headers['X-Bmob-Application-Id'] = app_id
    headers['X-Bmob-REST-API-Key'] = rest_api_key
    headers['Content-Type'] = 'application/json'

    # 构建url
    url = 'https://api.bmob.cn/1/classes/{table_name}'.format(table_name = table_name)

    # 发起请求
    resp = requests.post(url,headers = headers,data = json.dumps(data),verify = False)
    
    # 设置响应体编码
    resp.encoding = 'utf-8'
    
    if resp and resp.status_code == 201:
        print 'insert success!'
        return json.loads(resp.text)
    return None

# 封装rest api的put方法,传入记录ID，修改一条数据
# table_name：要更新的表名
# object_id：要更新的数据记录的ID
# data：字典类型，要更新的数据的键值对
def update(table_name,object_id,data,app_id = APP_ID,rest_api_key = REST_API_KEY):
    # 构建请求头
    headers = {}
    headers['X-Bmob-Application-Id'] = app_id
    headers['X-Bmob-REST-API-Key'] = rest_api_key
    headers['Content-Type'] = 'application/json'

    # 构建url
    url = 'https://api.bmob.cn/1/classes/{table_name}/{object_id}'.format(table_name = table_name,object_id = object_id)

    # 发起请求
    resp = requests.put(url,headers = headers,data = json.dumps(data),verify = False)
    
    # 设置响应体编码
    resp.encoding = 'utf-8'
    
    if resp and resp.status_code == 200:
        print 'update {0} success!'.format(object_id)
        return json.loads(resp.text)
    return None


# 封装rest api的delete方法，根据对象ID删除一条记录
# table_name：要删除的记录所在的表名
# object_id：要删除的数据记录的ID
def delete(table_name,object_id,app_id = APP_ID,rest_api_key = REST_API_KEY):
    # 构建请求头
    headers = {}
    headers['X-Bmob-Application-Id'] = app_id
    headers['X-Bmob-REST-API-Key'] = rest_api_key

    # 构建url
    url = 'https://api.bmob.cn/1/classes/{table_name}/{object_id}'.format(table_name = table_name,object_id = object_id)

    # 发起请求
    resp = requests.delete(url,headers = headers,verify = False)
    
    # 设置响应体编码
    resp.encoding = 'utf-8'
    
    if resp and resp.status_code == 200:
        print 'delete {0} success!'.format(object_id)
        return json.loads(resp.text)
    return None

# 查询一个表中的所有数据
# table_name：要查询的表名
def list(table_name,app_id = APP_ID,rest_api_key = REST_API_KEY):
    # 构建请求头
    headers = {}
    headers['X-Bmob-Application-Id'] = app_id
    headers['X-Bmob-REST-API-Key'] = rest_api_key

    # 构建url
    url = 'https://api.bmob.cn/1/classes/{table_name}'.format(table_name = table_name)

    # 发起请求
    resp = requests.get(url,headers = headers,verify = False)
    
    # 设置响应体编码
    resp.encoding = 'utf-8'
    
    if resp and resp.status_code == 200:
        return json.loads(resp.text)['results']
    return None

# 批量操作：批量创建
# request_data结构：
'''
table_name = 'test'
{
    "requests":[
        {
            "method":"POST",
            "path":"/1/classes/{0}".format(table_name),
            "body":{
                "name":"Tom",
                "age":18
            }
        },
        {
            "method":"POST",
            "path":"/1/classes/{0}".format(table_name),
            "body":{
                "name":"John",
                "age":21
            }
        }
    ]
}

'''
def batch_insert(request_data,app_id = APP_ID,rest_api_key = REST_API_KEY):
    # 构建请求头
    headers = {}
    headers['X-Bmob-Application-Id'] = app_id
    headers['X-Bmob-REST-API-Key'] = rest_api_key
    headers['Content-Type'] = 'application/json'

    # url
    url = 'https://api.bmob.cn/1/batch'

    # 发起请求
    resp = requests.post(url,data = json.dumps(request_data),headers = headers,verify = False)
    
    # 设置响应体编码
    resp.encoding = 'utf-8'
    
    if resp and resp.status_code == 200:
        return json.loads(resp.text)
    return None
```

# 调用示例
```python
#!/usr/bin/python
# coding:utf-8
# 测试工具方法的使用
import bmob_base_utils as utils

def main():
    # 测试query方法
    #resp = utils.query(table_name = 'monthly', object_id = '2290ce60cc')
    #print resp

    # 测试insert方法
    '''
    data = {'name':'Ben','age':18}
    resp = utils.insert(table_name = 'test',data = data)
    print resp
    '''

    # 测试update方法
    #data = {'age':999}
    #utils.update(table_name = 'test',object_id = '79cfd8639b',data = data)

    # 测试delete方法
    #utils.delete(table_name = 'test', object_id = '79cfd8639b')

    # 测试list方法
    # print utils.list('test')

    # 测试batch_insert方法
    request_data = {}
    request_data['requests'] = []
    
    table_name = 'test'
    data1 = {
        "method":"POST",
        "path":"/1/classes/{0}".format(table_name),
        "body":{
            "name":"Tom",
            "age":18
        }
    }
    data2 = {
        "method":"POST",
        "path":"/1/classes/{0}".format(table_name),
        "body":{
            "name":"John",
            "age":21
        }
    }

    request_data['requests'].append(data1)
    request_data['requests'].append(data2)

    utils.batch_insert(request_data)


if __name__ == '__main__':
    main()

```

# 补充

* 查询成功响应：200 OK

* 创建成功响应：201 Created

* 更新成功响应：200 OK

* 删除成功响应：200 OK]]></description></item><item><title>微信小程序开发实践点滴——Bmob常用API的使用</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119109.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:35:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119109.html</guid><description><![CDATA[> Bmob后端云官网：http://www.bmob.cn/
> Bmob后端云微信小程序开发文档：http://docs.bmob.cn/data/wechatApp/b_developdoc/doc/index.html

Bmob是一个很好用的后端云平台，自己在开发小程序的过程中有用到，比较好用，免去了搭建服务器、配置数据库的烦恼，这也符合小程序即用即走的轻量型设计理念。特写一篇文章总结一下常用功能的用法，详细用法可以参看上面的开发文档。

在小程序中使用Bmob后端云的前提是要先接入Bmob，接入方法请参见我的另一篇博文。

# 添加一行数据到diary表中

下面的代码可以在远程创建一个名为'diary'的数据库表并插入一条数据，该表有两个字段：'title'和'content'：

```javascript
// 创建一个表对象
var Diary = Bmob.Object.extend('diary');
// 创建一个表记录对象
var diary = new Diary();

// 插入字段数据
diary.set('title','hello');
diary.set('content','hello world!');

// 保存数据到远程数据库
diary.save(null,{
    success:function(result){
        console.log('create success! data id is:' + result,id);
    },
    error:function(object,error){
        console.log('create failed! error code is:' + error.code + ', error message is:' + error.message);
    }
});
```

# 根据ID查询单条数据

```javascript
var Diary = Bmob.Object.extend('diary');
// 创建一个查询对象
var query = new Bmob.Query(Diary);
// 要查询的记录的ID
var id = '4ecdf7a';

// 查询
query.get(id,{
    success:function(result){
        console.log('标题为：' + result.get('title'));
    },
    error:function(object,error){
        console.log('query failed! error code is:' + error.code + ', error message is:' + error.message);
    }
});
```

# 修改一条数据

```javascript
var Diary = Bmob.Object.extend('diary');
var query = new Bmob.Query(Diary);
// 要修改的记录的ID
var id = '4ecdf7a';

query.get(id,{
    success:function(result){
        result.set('title','a new title');
        result.set('content','hi,guy!');
        
        // 保存提交修改
        result.save();
    },
    error:function(object,error){
        console.log('update failed! error code is:' + error.code + ', error message is:' + error.message);
    }
});
```

# 删除一条数据

```javascript
var Diary = Bmob.Object.extend('diary');
var query = new Bmob.Query(Diary);
// 要删除的记录的ID
var id = '4ecdf7a';

query.get(id,{
    success:function(object){
        object.destroy({
            success:function(deleteObject){
                console.log('删除成功！');
            },
            error:function(object,error){
                console.log('delete failed! error code is:' + error.code + ', error message is:' + error.message);
            }
        });
    },
    error:function(object,error){
        console.log('query failed! error code is:' + error.code + ', error message is:' + error.message);
    }
});
```

# 批量删除

```javascript
Bmob.Object.destroyAll(objects);

```

# 按条件删除

```javascript
query.destroyAll({
    success:function(object){
        ...
    },
    error:function(error){
        ...
    }
});

```

# 条件查询

```javascript
var Diary = Bmob.Object.extend('diary');
var query = new Bmob.Query(Diary);

query.equalTo('title','hello');
query.find({
    success:funciton(results){
        console.log('共查询到' + results.length + '条数据');
        for(var i = 0;i < results.length;i++){
            var obj = results[i];
            console.log(obj.id + ':' + obj.get('title'));
        }
    },
    error:function(error){
        console.log('find failed! error code is:' + error.code + ', error message is:' + error.message);
    }
})
```

# 分页查询

```javascript
// 设置起始位置
query.skip(10);
// 设置查询个数
query.limit(10);
```

# 对查询结果排序

```javascript
// 对结果按照'title'字段升序排列
query.ascending('title');

// 对结果按照'title'字段降序排列
query.descending('title');
```

# 查询某个字段是特定几种取值

```javascript
query.containedIn('title',['hello','hi','hey']);
```

# 查询指定列

```javascript
query.select('title');
query.find().then(function(results){
    ...
});
```

# 查询字符串字段以某个子串开头

```javascript
query.startsWith('title','he');
```

# 或查询

```javascript
var q1 = new Bmob.Query(Diary);
q1.greaterThan('age',10);
var q2 = new Bomb.Query(Diary);
q2.lessThan('age',20);

var mainQuery = Bmob.Query.or(q1,q2);
mainQuery.find({
    success:function(results){
        ...
    },
    error:function(error){
        ...
    }
});
```

# 查询满足条件的记录的数量

```javascript
query.count({
    success:function(count){
        console.log('共查询到了' + count + '条数据');
    },
    error:function(error){
        ...
    }
});
```

# Bmob对象的默认属性

obj.id

obj.createdAt

obj.updatedAt

# 支持的常见数据类型

```javascript
var num = 42;
var string = 'hello';
var date = new Date();
var array = [string,num];
var object = {number:num,string:string};

var bigObj = new BigObject();
bigObj.set('myNumber',num);
bigObj.set('myString',string);
bigObj.set('myDate',date);
bigObj.set('myArray',array);
bigObj.set('myObject',object);
bigObj.set('myNull',null);

bigObj.save();
```]]></description></item><item><title>微信小程序开发实践点滴——接入Bmob后端云</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119095.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:30:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119095.html</guid><description><![CDATA[> Bmob后端云官网：http://www.bmob.cn/
> 微信公众平台官网：https://mp.weixin.qq.com/
> 微信小程序官方开发文档：https://mp.weixin.qq.com/debug/wxadoc/dev/

本文对如何在微信小程序中接入Bmob后端云做一个简单的总结。所谓后端云，一句话概括就是跑在云端的数据库后台+服务器后台，引入到微信小程序开发中能带来的好处就是：让我们可以专注于小程序本身的业务逻辑开发，而不用去管复杂的后台服务器、后台数据库的搭建和维护。

# 准备一个小程序公众号和Bmob账号

首先需要到微信公众平台官网上去注册一个小程序类型的公众号，假设将要开发的小程序命名为：MyApp.

打开Bmob官网注册一个账号。

# 获取并记录好MyApp小程序的AppID和AppSecret

这两项信息在小程序后台的"设置－开发设置"页面可以获取到，获取到后需要在一个文本文件中记好，后面要用到。

# 登录Bmob控制台

创建一个应用，假设名字叫MyBmobApp，然后进入应用。到"设置"页面输入刚刚获取到的小程序的AppID和AppSecret并保存。

获取并记好MyBmobApp对应的Application ID和REST API key.

# 登录小程序MyApp后台

到"设置－开发设置－服务器域名"页面添加Bmob安全域名并保存（可一次性添加多个）。

注：四种安全域名(两种类型：https和wss)全部填api.bmob.cn和xxx.bmobcloud.com，其中"xxx"为MyBmobApp的Application ID.

# 下载SDK

到Bmob官网下载微信小程序对应的SDK并解压，将其中的所有js文件都放到小程序工程的utils目录下。

# 初始化和引入Bmob

在小程序工程的app.js中加入如下代码进行全局初始化：

```javascript
var Bmob = require('utils/bmob.js');
Bmob.initialize('XXX','XXXXXX');
// 注：其中'XXX'为MyBmobApp的Application ID,'XXXXXX'为其REST API key
```

在需要用到Bmob的page页的js中引入Bmob：

```javascript
var Bmob = require('../../utils/bmob.js');
```

现在就可以在小程序中对Bmob后端云数据库进行各种操作了，像操作本地数据库那么简单。]]></description></item><item><title>好玩的分词——绘制《三体》全集词云</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119080.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:27:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119080.html</guid><description><![CDATA[> 另参见：[好玩的分词——分析一下《三体》全集](http://www.cnblogs.com/jiayongji/p/7119072.html)

在[好玩的分词——分析一下《三体》全集](http://www.cnblogs.com/jiayongji/p/7119072.html)一文中，通过分词获取到了三体全集文本中topn的词及词频，那么本文中进一步用词云的形式来展现出来。

废话不多说，直接上代码：


```python
#!/usr/bin/python
# coding:utf-8
# 绘制一个《三体》全集词云
import sys
from collections import Counter
import jieba.posseg as psg
import matplotlib.pyplot as plt
from scipy.misc import imread
from wordcloud import WordCloud,ImageColorGenerator

# 对文本分词并标注词性，并缓存到文件
def cut_and_cache(text):
    # 将文本分词，并附带上词性，因为数据量比较大，防止每次运行脚本都花大量时间，所以第一次分词后就将结果存入文件cut_result.txt中
    # 相当于做一个缓存，格式为每个词占一行，每一行的内容为：
    # 词,词性
    words_with_attr = [(x.word,x.flag) for x in psg.cut(text) if len(x.word) >= 2]
    print len(words_with_attr)
    with open('cut_result.txt','w+') as f:
        for x in words_with_attr:
            f.write('{0}\t{1}\n'.format(x[0],x[1]))  
    return words_with_attr 

# 从cut_result.txt中读取带词性的分词结果列表
def read_cut_result():
    words_with_attr = []
    with open('cut_result.txt','r') as f:
        for x in f.readlines():
            # 这里解码成utf-8格式，是为了防止后面生成词云的时候出现乱码
            x = x.decode('utf-8')
            pair = x.split()
            if len(pair) < 2:
                continue
            words_with_attr.append((pair[0],pair[1]))
    return words_with_attr

#　统计在分词表中出现次数排名前topn的词的列表，并将结果输出到文件topn_words.txt中，每行一个词，格式为：
# 词,出现次数
def get_topn_words(words,topn):
    c = Counter(words).most_common(topn)
    top_words_with_freq = {}
    with open('top{0}_words.txt'.format(topn),'w+') as f:
        for x in c:
            f.write('{0},{1}\n'.format(x[0],x[1]))
            top_words_with_freq[x[0]] = x[1]
    return top_words_with_freq

# 传入文本文件的路径file_path和topn，获取文本文件中topn关键词列表及词频
def get_top_words(file_path,topn):
    # 读取文本文件，然后分词并缓存，只需运行一次，后续运行脚本可注释掉下面两行
    text = open(file_path).read()
    words_with_attr = cut_and_cache(text)
    
    # 从cut_result.txt中读取带词性的分词结果列表
    words_with_attr = read_cut_result()
    
    # 要过滤掉的词性列表
    stop_attr = ['a','ad','b','c','d','f','df','m','mq','p','r','rr','s','t','u','v','z']
    
    # 过滤掉不需要的词性的词
    words = [x[0] for x in words_with_attr if x[1] not in stop_attr]
    
    # 获取topn的词并存入文件topn_words.txt，top_words_with_freq为一个字典，在生成词云的时候会用到，格式为：
    # {'aa':1002,'bb':879,'cc':456}
    top_words_with_freq = get_topn_words(words = words,topn = topn)
    
    return top_words_with_freq

# 根据传入的背景图片路径和词频字典、字体文件，生成指定名称的词云图片
def generate_word_cloud(img_bg_path,top_words_with_freq,font_path,to_save_img_path,background_color = 'white'):
    # 读取背景图形
    img_bg = imread(img_bg_path)
    
    # 创建词云对象
    wc = WordCloud(font_path = font_path,  # 设置字体
    background_color = background_color,  # 词云图片的背景颜色，默认为白色
    max_words = 500,  # 最大显示词数为1000
    mask = img_bg,  # 背景图片蒙版
    max_font_size = 50,  # 字体最大字号
    random_state = 30,  # 字体的最多模式
    width = 1000,  # 词云图片宽度
    margin = 5,  # 词与词之间的间距
    height = 700)  # 词云图片高度
    
    # 用top_words_with_freq生成词云内容
    wc.generate_from_frequencies(top_words_with_freq)
    
    # 用matplotlib绘出词云图片显示出来
    plt.imshow(wc)
    plt.axis('off')
    plt.show()
    
    # 如果背景图片颜色比较鲜明，可以用如下两行代码获取背景图片颜色函数，然后生成和背景图片颜色色调相似的词云
    #img_bg_colors = ImageColorGenerator(img_bg)
    #plt.imshow(wc.recolor(color_func = img_bg_colors))
    
    # 将词云图片保存成图片
    wc.to_file(to_save_img_path)

def main():
    # 设置环境为utf-8编码格式，防止处理中文出错
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    # 获取topn词汇的'词:词频'字典，santi.txt是当前目录下三体全集的文本
    top_words_with_freq = get_top_words('./santi.txt',300)
    
    # 生成词云图片，bg.jpg是当前目录下的一副背景图片，yahei.ttf是当前目录下微软雅黑字体文件，santi_cloud.png是要生成的词云图片名
    generate_word_cloud('./bg.jpg',top_words_with_freq,'./yahei.ttf','./santi_cloud.png')
    
    print 'finish'
    
if __name__ == '__main__':
    main()
    
```

上述代码中，bg.jpg图片如下，是一只豹子的剪影，像一个在黑暗森林中潜伏的猎人：
![这里写图片描述](http://img.blog.csdn.net/20170604184620245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

注：作为词云背景的图片一定要轮廓分明，且图片主体颜色要和图片自身的背景颜色对比度较大，这样生成的词云图片才能更清晰。一般剪影图片更容易满足这种要求。

此外，三体全集santi.txt文本从网上很好搜到。

运行上述代码，生成的词云图片如下：
![这里写图片描述](http://img.blog.csdn.net/20170604184716943?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

最后，可以将这里的背景图片和文本文件修改成其他的图片和文本路径，那么运行上面代码就可以马上得到自己想要的词云了！]]></description></item><item><title>好玩的分词——分析一下《三体》全集</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119072.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:24:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119072.html</guid><description><![CDATA[> 另参加：jieba的基本用法参加我的另一篇博文：[好玩的分词——python jieba分词模块的基本用法](http://www.cnblogs.com/jiayongji/p/7119065.html)

《三体》是一部很好看的硬科幻作品，当初是一口气把三部全都看完的，包括《三体1》、《三体2：黑暗森林》和《三体3：死神永生》，洋洋洒洒几十万字，那看的叫一个酣畅淋漓。本文就使用jieba分词，对《三体》三部曲全集文本做一些有趣的分析，涉及到分词和词频分析等。

# 文本准备

到网上随便一搜"三体全集"，就很容易下载到三体三部曲的全集文本（txt文档大概有2~3Mb），这里重命名为santi.txt，并存放到当前目录下。

# 读取三体全集文本


```python
# coding:utf-8
import sys

# 设置环境为utf-8编码格式，防止处理中文出错
reload(sys)
sys.setdefaultencoding('utf-8')

# 读取三体全集文本
santi_text = open('./santi.txt').read()
```


```python
print len(santi_text)

# 输出：
'''
2681968
'''
```

可以看出文本的长度有2681968字节，数据量还是很庞大的，语料库足够丰富。

# 对文本分词并缓存到文件中

下面用jieba.posseg模块对文本进行分词并标注词性，这里标注词性的目的是为了后面接下来根据词性过滤掉那些没有实际意义的词（如'好的'、'一般'、'他的'等等这种词），而将分词结果缓存到文件中是为了提高每次运行脚本的效率，毕竟这么大的数据量，分词一次还是耗时很长的（大概为几分钟），缓存到文件中，只需第一次做一次分词，后面再运行脚本就只需从文件中读取分词结果即可，毕竟读文件的速度比分词要快很多。下面上代码：


```python
import jieba.posseg as psg

# 将三体全集文本分词，并附带上词性，因为数据量比较大，防止每次运行脚本都花大量时间，所以第一次分词后就将结果存入文件out.txt中
# 相当于做一个缓存，格式为每个词占一行，每一行的内容为：
# 词    词性
santi_words_with_attr = [(x.word,x.flag) for x in psg.cut(santi_text) if len(x.word) >= 2]  # 这里的x.word为词本身，x.flag为词性
print len(santi_words_with_attr)　　#　输出：
with open('out.txt','w+') as f:
    for x in santi_words_with_attr:
        f.write('{0}\t{1}\n'.format(x[0],x[1]))
```

运行上面一段代码，几分钟之后在当前目录生成了一个out.txt文件，有273033行，数据量还是非常大的，其前几行的内容如下：


```python
'''
手机	n
TXT	eng
小说	n
下载	v
www	eng
sjtxt	eng
com	eng
欢迎您	l
sjtxt	eng
推荐	v
好书	n
	x
	x
	x
'''
```

你肯定会大呼一声：这什么鬼!?!!!

不急，这是因为文本中存在大量的我们不需要的词，甚至还有很多空白符词，这肯定是没法玩的，所以接下来我们对垃圾词进行过滤，对数据做一下清洗。

# 分词结果清洗

现在我们缓存的分词结果文件out.txt就可以派上用场了，为了清洗分词结果，我们需要再次获取分词结果，而现在就不需要再运行一次超级耗时的分词代码了，而只需从out.txt中读取即可，上代码：


```python
# 从out.txt中读取带词性的分词结果列表
santi_words_with_attr = []
with open('out.txt','r') as f:
    for x in f.readlines():
        pair = x.split()
        if len(pair) < 2:
            continue
        santi_words_with_attr.append((pair[0],pair[1]))

# 将分词列表的词性构建成一个字典，以便后面使用，格式为：
# {词:词性}
attr_dict = {}
for x in santi_words_with_attr:
    attr_dict[x[0]] = x[1]

# 要过滤掉的词性列表，这些词性的词都是没有实际意义的词，如连词、代词等虚词，这个列表初始化为空列表，后面根据分析结果手工往里面一个个添加
stop_attr = []

# 获取过滤掉stop_attr里的词性的词后的分词列表
words = [x[0] for x in santi_words_with_attr if x[1] not in stop_attr]

#　统计在分词表中出现次数排名前500的词的列表，并将结果输出到文件most.txt中，每行一个词，格式为：
# 词,出现次数,词性
from collections import Counter
c = Counter(words).most_common(500)
with open('most.txt','w+') as f:
    for x in c:
        f.write('{0},{1},{2}\n'.format(x[0],x[1],attr_dict[x[0]]))
```

第一次运行上述代码，生成的most.txt文件有500行，前10行内容如下：


```python
'''
一个,3057,m
没有,2128,v
他们,1690,r
我们,1550,r
程心,1451,n
这个,1357,r
自己,1347,r
现在,1273,t
已经,1259,d
罗辑,1256,n
'''
```

可以看到词频排名前四的都是些没意义的词，而第5个'程心'才是三体中有实际意义的词(程圣母果然厉害)。等等，这是因为我们没有将前四名这些词的词性添加到stop_attr列表中，导致它们并没有被过滤掉，那我们现在就把这前4个词的词性添加到stop_attr列表中，stop_attr列表变成：['m','v','r']，再次运行脚本，most.txt的内容(前10个词)变为了：


```python
'''
程心,1451,n
现在,1273,t
已经,1259,d
罗辑,1256,n
世界,1243,n
地球,951,n
人类,935,n
太空,930,n
三体,879,n
宇宙,875,n
'''
```

可以看到，我们成功清洗掉了刚刚前四名的无意义的词，'程心'成功变为词频最高的词。但是第2、3名的'现在'、'已经'等词显然也是我们不需要的，那么就重复上面的过程，把这些不需要的词性添加到stop_attr列表中，再看结果。然后继续重复以上过程，重复N次之后，我得到的stop_attr变成了：['a','ad','b','c','d','f','df','m','mq','p','r','rr','s','t','u','v','z']，长长的一串。而most.txt的内容变为了(前20行)：


```python
'''
程心,1451,n
罗辑,1256,n
世界,1243,n
地球,951,n
人类,935,n
太空,930,n
三体,879,n
宇宙,875,n
太阳,775,ns
舰队,649,n
飞船,644,n
汪淼,633,nrfg
时间,611,n
文明,561,nr
东西,515,ns
信息,480,n
感觉,468,n
智子,452,n
计划,451,n
叶文洁,446,nr
太阳系,428,n
'''
```

可以看出分词结果已经被清洗的很干净了，也可以发现我们需要的有实际意义的词绝大多数都为名词（n或n开头的）。

# TopN词汇输出

接下来我们把文本中的TopN词汇及词频输出到result.txt中，每一行一个词，格式为：词,词频


```python
from collections import Counter
c = Counter(words).most_common(500)
with open('result.txt','w+') as f:
    for x in c:
        f.write('{0},{1}\n'.format(x[0],x[1]))
```

得到的result.txt的前10行内容如下：


```python
'''
程心,1451
罗辑,1256
世界,1243
地球,951
人类,935
太空,930
三体,879
宇宙,875
太阳,775
舰队,649
'''
```

# 完整代码封装

将上述每一步的代码封装成一个完整的脚本，如下：


```python
# coding:utf-8
import jieba.posseg as psg
from collections import Counter
import sys

# 对文本分词并标注词性，并缓存到文件
def cut_and_cache(text):
    # 将三体全集文本分词，并附带上词性，因为数据量比较大，防止每次运行脚本都花大量时间，所以第一次分词后就将结果存入文件cut_result.txt中
    # 相当于做一个缓存，格式为每个词占一行，每一行的内容为：
    # 词,词性
    santi_words_with_attr = [(x.word,x.flag) for x in psg.cut(santi_text) if len(x.word) >= 2]
    print len(santi_words_with_attr)
    with open('cut_result.txt','w+') as f:
        for x in santi_words_with_attr:
            f.write('{0}\t{1}\n'.format(x[0],x[1]))    

# 从cut_result.txt中读取带词性的分词结果列表
def read_cut_result():
    santi_words_with_attr = []
    with open('cut_result.txt','r') as f:
        for x in f.readlines():
            pair = x.split()
            if len(pair) < 2:
                continue
            santi_words_with_attr.append((pair[0],pair[1]))
    return santi_words_with_attr

# 将分词列表的词性构建成一个字典，以便后面使用，格式为：
# {词:词性}
def build_attr_dict(santi_words_with_attr):
    attr_dict = {}
    for x in santi_words_with_attr:
        attr_dict[x[0]] = x[1]
    return attr_dict

#　统计在分词表中出现次数排名前500的词的列表，并将结果输出到文件result.txt中，每行一个词，格式为：
# 词,出现次数
def get_topn_words(words,topn):
    c = Counter(words).most_common(topn)
    with open('result.txt','w+') as f:
        for x in c:
            f.write('{0},{1}\n'.format(x[0],x[1]))
        
        
def main():
    # 设置环境为utf-8编码格式，防止处理中文出错
    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    # 读取三体全集文本
    santi_text = open('./santi.txt').read()
    
    # 分词并缓存，只需运行一次，后续可注释掉
    cut_and_cache(santi_text)
    
    # 从cut_result.txt中读取带词性的分词结果列表
    santi_words_with_attr = read_cut_result()
    
    # 构建词性字典，这个字典在探索stop_attr的时候会有帮助
    # attr_dict = build_attr_dict(santi_words_with_attr)
    
    # 要过滤掉的词性列表
    stop_attr = ['a','ad','b','c','d','f','df','m','mq','p','r','rr','s','t','u','v','z']
    
    # 过滤掉不需要的词性的词
    words = [x[0] for x in santi_words_with_attr if x[1] not in stop_attr]
    
    # 获取topn的词并存入文件result.txt
    get_topn_words(words = words,topn = 500)
    
if __name__ == '__main__':
    main()
```]]></description></item><item><title>好玩的分词——python jieba分词模块的基本用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119065.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:22:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119065.html</guid><description><![CDATA[jieba（结巴）是一个强大的分词库，完美支持中文分词，本文对其基本用法做一个简要总结。

# 安装jieba

`pip install jieba`

# 简单用法

结巴分词分为三种模式：精确模式（默认）、全模式和搜索引擎模式，下面对这三种模式分别举例介绍：

### 精确模式


```python
import jieba
s = u'我想和女朋友一起去北京故宫博物院参观和闲逛。'
```


```python
cut = jieba.cut(s)

print '【Output】'
print cut
print ','.join(cut)
```

    【Output】
    <generator object cut at 0x7f8dbc0efc30>
    我,想,和,女朋友,一起,去,北京故宫博物院,参观,和,闲逛,。


可见分词结果返回的是一个生成器（这对大数据量数据的分词尤为重要）。

### 全模式


```python
print '【Output】'
print ','.join(jieba.cut(s,cut_all = True))
```

    【Output】
    我,想,和,女朋友,朋友,一起,去,北京,北京故宫,北京故宫博物院,故宫,故宫博物院,博物,博物院,参观,和,闲逛,,


可见全模式就是把文本分成尽可能多的词。

### 搜索引擎模式


```python
print '【Output】'
print ','.join(jieba.cut_for_search(s))
```

    【Output】
    我,想,和,朋友,女朋友,一起,去,北京,故宫,博物,博物院,北京故宫博物院,参观,和,闲逛,。


# 获取词性

每个词都有其词性，比如名词、动词、代词等，结巴分词的结果也可以带上每个词的词性，要用到jieba.posseg，举例如下：


```python
import jieba.posseg as psg
print '【Output】'
print [(x.word,x.flag) for x in psg.cut(s)]

# 输出：
'''
[(u'我', u'r'), (u'想', u'v'), (u'和', u'c'), (u'女朋友', u'n'), (u'一起', u'm'), 
(u'去', u'v'), (u'北京故宫博物院', u'ns'), (u'参观', u'n'), (u'和', u'c'), (u'闲逛', u'v'), (u'。', u'x')]
'''
```

可以看到成功获取到每个词的词性，这对于我们对分词结果做进一步处理很有帮助，比如只想获取分词结果列表中的名词，那么就可以这样过滤：


```python
print [(x.word,x.flag) for x in psg.cut(s) if x.flag.startswith('n')]

# 输出：
'''
[(u'女朋友', u'n'), (u'北京故宫博物院', u'ns'), (u'参观', u'n')]
'''
```

至于词性的每个字母分别表示什么词性，jieba分词的结果可能有哪些词性，就要去查阅词性对照表了，本文结尾附了一份从网上搜到的词性对照表，想了解更详细的词性分类信息，可以到网上搜索"结巴分词词性对照"。

# 并行分词

在文本数据量非常大的时候，为了提高分词效率，开启并行分词就很有必要了。jieba支持并行分词，基于python自带的multiprocessing模块，但要注意的是在Windows环境下不支持。

用法：


```python
# 开启并行分词模式，参数为并发执行的进程数
jieba.enable_parallel(5)

# 关闭并行分词模式
jieba.disable_parallel()
```

举例：开启并行分词模式对三体全集文本进行分词


```python
santi_text = open('./santi.txt').read()
print len(santi_text)
```

    2681968


可以看到三体全集的数据量还是非常大的，有260多万字节的长度。


```python
jieba.enable_parallel(100)
santi_words = [x for x in jieba.cut(santi_text) if len(x) >= 2]
jieba.disable_parallel()

```

# 获取出现频率Top n的词

还是以上面的三体全集文本为例，假如想要获取分词结果中出现频率前20的词列表，可以这样获取：


```python
from collections import Counter
c = Counter(santi_words).most_common(20)
print c

# 输出：
'''
[(u'\r\n', 21805), (u'一个', 3057), (u'没有', 2128), (u'他们', 1690), (u'我们', 1550), 
(u'这个', 1357), (u'自己', 1347), (u'程心', 1320), (u'现在', 1273), (u'已经', 1259), 
(u'世界', 1243), (u'罗辑', 1189), (u'可能', 1177), (u'什么', 1176), (u'看到', 1114), 
(u'知道', 1094), (u'地球', 951), (u'人类', 935), (u'太空', 930), (u'三体', 883)]
'''
```

可以看到结果中'\r\n'居然是出现频率最高的词，还有'一个'、'没有'、'这个'等这种我们并不想要的无实际意义的词，那么就可以根据前面说的词性来进行过滤，这个以后细讲。

# 使用用户字典提高分词准确性

不使用用户字典的分词结果：


```python
txt = u'欧阳建国是创新办主任也是欢聚时代公司云计算方面的专家'
print ','.join(jieba.cut(txt))
```

    欧阳,建国,是,创新,办,主任,也,是,欢聚,时代,公司,云,计算,方面,的,专家


使用用户字典的分词结果：


```python
jieba.load_userdict('user_dict.txt')
print ','.join(jieba.cut(txt))
```

    欧阳建国,是,创新办,主任,也,是,欢聚时代,公司,云计算,方面,的,专家


可以看出使用用户字典后分词准确性大大提高。

注：其中user_dict.txt的内容如下：

欧阳建国 5

创新办 5 i

欢聚时代 5

云计算 5

用户字典每行一个词，格式为：

词语 词频 词性

其中词频是一个数字，词性为自定义的词性，要注意的是词频数字和空格都要是半角的。

# 附：结巴分词词性对照表（按词性英文首字母排序）

### 形容词(1个一类，4个二类)

a 形容词

ad 副形词

an 名形词

ag 形容词性语素

al 形容词性惯用语

### 区别词(1个一类，2个二类)

b 区别词

bl 区别词性惯用语

### 连词(1个一类，1个二类)

c 连词

cc 并列连词

### 副词(1个一类)

d 副词

### 叹词(1个一类)

e 叹词

### 方位词(1个一类)

f 方位词

### 前缀(1个一类)

h 前缀

### 后缀(1个一类)

k 后缀

### 数词(1个一类，1个二类)

m 数词

mq 数量词

### 名词 (1个一类，7个二类，5个三类)

名词分为以下子类：

n 名词

nr 人名

nr1 汉语姓氏

nr2 汉语名字

nrj 日语人名

nrf 音译人名

ns 地名

nsf 音译地名

nt 机构团体名

nz 其它专名

nl 名词性惯用语

ng 名词性语素

### 拟声词(1个一类)

o 拟声词

### 介词(1个一类，2个二类)

p 介词

pba 介词“把”

pbei 介词“被”

### 量词(1个一类，2个二类)

q 量词

qv 动量词

qt 时量词

### 代词(1个一类，4个二类，6个三类)

r 代词

rr 人称代词

rz 指示代词

rzt 时间指示代词

rzs 处所指示代词

rzv 谓词性指示代词

ry 疑问代词

ryt 时间疑问代词

rys 处所疑问代词

ryv 谓词性疑问代词

rg 代词性语素

### 处所词(1个一类)

s 处所词

### 时间词(1个一类，1个二类)

t 时间词

tg 时间词性语素

### 助词(1个一类，15个二类)

u 助词

uzhe 着

ule 了 喽

uguo 过

ude1 的 底

ude2 地

ude3 得

usuo 所

udeng 等 等等 云云

uyy 一样 一般 似的 般

udh 的话

uls 来讲 来说 而言 说来

uzhi 之

ulian 连 （“连小学生都会”）

### 动词(1个一类，9个二类)

v 动词

vd 副动词

vn 名动词

vshi 动词“是”

vyou 动词“有”

vf 趋向动词

vx 形式动词

vi 不及物动词（内动词）

vl 动词性惯用语

vg 动词性语素

### 标点符号(1个一类，16个二类)

w 标点符号

wkz 左括号，全角：（ 〔 ［ ｛ 《 【 〖 〈 半角：( [ { <

wky 右括号，全角：） 〕 ］ ｝ 》 】 〗 〉 半角： ) ] { >

wyz 左引号，全角：“ ‘ 『

wyy 右引号，全角：” ’ 』

wj 句号，全角：。

ww 问号，全角：？ 半角：?

wt 叹号，全角：！ 半角：!

wd 逗号，全角：， 半角：,

wf 分号，全角：； 半角： ;

wn 顿号，全角：、

wm 冒号，全角：： 半角： :

ws 省略号，全角：…… …

wp 破折号，全角：—— －－ ——－ 半角：--- ----

wb 百分号千分号，全角：％ ‰ 半角：%

wh 单位符号，全角：￥ ＄ ￡ ° ℃ 半角：$

### 字符串(1个一类，2个二类)

x 字符串

xx 非语素字

xu 网址URL

### 语气词(1个一类)

y 语气词(delete yg)

### 状态词(1个一类)

z 状态词]]></description></item><item><title>用python处理Excel文档（2）——用xlsxwriter模块写xls/xlsx文档</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119059.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:20:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119059.html</guid><description><![CDATA[> Refer：《python自动化运维：技术与最佳实践》

> 更多用法参考xlsxwriter官方文档：http://xlsxwriter.readthedocs.io/

本文主要总结一下如何使用xlsxwriter模块来自动化生成和处理Excel文档。

# 简单用法demo


```python
# !/usr/bin/python
# coding:utf-8
# xlsxwriter的基本用法
import xlsxwriter

# 1. 创建一个Excel文件
workbook = xlsxwriter.Workbook('demo1.xlsx')

# 2. 创建一个工作表sheet对象
worksheet = workbook.add_worksheet()

# 3. 设定第一列（A）宽度为20像素
worksheet.set_column('A:A',20)

# 4. 定义一个加粗的格式对象
bold = workbook.add_format({'bold':True})

# 5. 向单元格写入数据
# 5.1 向A1单元格写入'Hello'
worksheet.write('A1','Hello')
# 5.2 向A2单元格写入'World'并使用bold加粗格式
worksheet.write('A2','World',bold)
# 5.3 向B2单元格写入中文并使用加粗格式
worksheet.write('B2',u'中文字符',bold)

# 5.4 用行列表示法（行列索引都从0开始）向第2行、第0列（即A3单元格）和第3行、第0列（即A4单元格）写入数字
worksheet.write(2,0,10)
worksheet.write(3,0,20)

# 5.5 求A3、A4单元格的和并写入A5单元格，由此可见可以直接使用公式
worksheet.write(4,0,'=SUM(A3:A4)')

# 5.6 在B5单元格插入图片
worksheet.insert_image('B5','./demo.png')

# 5.7 关闭并保存文件
workbook.close()
```
运行之后生成的Excel文档效果如下：
![这里写图片描述](http://img.blog.csdn.net/20170521090308444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

# 综合实例demo：绘制网站业务流量数据图表


```python
#!/usr/bin/python
# coding:utf-8
import xlsxwriter

# 创建一个Excel文件
workbook = xlsxwriter.Workbook('chart.xlsx')
# 创建一个工作表sheet对象，使用默认名称："Sheet1"
worksheet = workbook.add_worksheet()
# 创建一个图表对象
chart = workbook.add_chart({'type':'column'})

# 定义数据表头
title = [u'业务名称',u'星期一',u'星期二',u'星期三',u'星期四',u'星期五',u'星期六',u'星期日',u'平均流量']
# 定义业务名称列表
buname = [u'业务官网',u'新闻中心',u'购物频道',u'体育频道',u'亲子频道']
# 定义5个频道一周七天的数据列表
data = [
    [150,152,158,149,155,145,148],
    [89,88,95,93,98,100,99],
    [201,200,198,175,170,198,195],
    [75,77,78,78,74,70,79],
    [88,85,87,90,93,88,84]
]

# 定义数据formatter格式对象，设置边框加粗1像素
formatter = workbook.add_format()
formatter.set_border(1)
# 定义标题栏格式对象：边框加粗1像素，背景色为灰色，单元格内容居中、加粗
title_formatter = workbook.add_format()
title_formatter.set_border(1)
title_formatter.set_bg_color('#cccccc')
title_formatter.set_align('center')
title_formatter.set_bold()
# 定义平均值栏数据格式对象：边框加粗1像素，数字按2位小数显示
ave_formatter = workbook.add_format()
ave_formatter.set_border(1)
ave_formatter.set_num_format('0.00')

# 定义图表数据系列函数
def chart_series(cur_row):
    chart.add_series({
        'categories':'=Sheet1!$B$1:$H$1',
        'values':'=Sheet1!$B${}:$H${}'.format(cur_row,cur_row),
        'line':{'color':'black'},
        'name':'=Sheet1!$A${}'.format(cur_row)
    })
    # 注：其中categories表示x轴，values表示y轴，line表示线条样式，name表示图例项

# 下面分别以行和列的方式将标题栏、业务名称、流量数据写入单元格，并引用不同的格式对象
worksheet.write_row('A1',title,title_formatter)
worksheet.write_column('A2',buname,formatter)
# 写入第2到第6行的数据，并将第2~6行数据加入图表系列
for i in range(2,7):
    worksheet.write_row('B{}'.format(i),data[i-2],formatter)
    # 计算平均流量栏数据并写入
    worksheet.write_formula('I{}'.format(i),'=AVERAGE(B{}:H{})'.format(i,i),ave_formatter)
    # 将每一行数据加入图表序列
    chart_series(str(i))

# 设置图表大小
chart.set_size({'width':577,'height':287})
# 设置图表大标题
chart.set_title({'name':u'业务流量周报表'})
# 设置y轴小标题
chart.set_y_axis({'name':'Mb/s'})

# 在A8单元格插入图表
worksheet.insert_chart('A8',chart)

# 关闭Excel文档
workbook.close()
```
运行之后生成的Excel文档效果如下：
![这里写图片描述](http://img.blog.csdn.net/20170521090327491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)]]></description></item><item><title>git学习总结系列（2）——远程仓库</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119050.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:17:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119050.html</guid><description><![CDATA[本文主要介绍git本地仓库和GitHub远程仓库之间的交互和数据传输。

注：首先需要到github.com上注册一个账号。

# 1. 添加本地SSH Key到GitHub

要向GitHub远程仓库推送代码之前，需要做一个认证，即需要让GitHub知道向它推送代码的电脑是一个可以信赖的电脑。这就需要往GitHub上添加一个可以标示出本地电脑的SSH Key，然后才能往GitHub上推送代码。

## 1. 在本地生成一个SSH Key公钥和私钥

在任意目录下执行下面这条命令，执行完之后一路按回车即可：

`ssh-keygen -t rsa -C "yourgit@test.com"`

注："yourgit@test.com"即为注册的GitHub账号邮箱地址。如果要在Windows下执行这个命令，必须在Git Bash窗口中执行，在Windows自带的cmd窗口中是没有这个命令的。

## 2. 切换到本地用户主目录：`cd ~`

此时在～目录用`ls -al`命令可以看到 一个.ssh隐藏目录

在.ssh目录中有两个密钥文件：id_rsa（私钥）、id_rsa.pub（公钥）,用vim或gedit打开公钥文件，复制其中的文本内容。
注意：原模原样复制，不要加任何多余的空格或空行。

## 3. 在GitHub创建SSH Key

用第1步中的GitHub账号从浏览器登录GitHub，点击右上角——>settings——>SSH and GPG Keys页面，点击创建一个SSH Key，标题可以随意写，将刚刚复制的公钥内容复制到"key"文本框中，并点击"Add SSH Key“按钮，这样就添加好了SSH Key。同一台电脑往一个GitHub账号只需添加一个SSH Key即可。

注：

* （1）允许添加多个SSH Key到同一个GitHub账号，这样就允许比如说我在家写了代码想推送到自己的GitHub账号上，同时也允许我在公司写完代码也可以推送到我的GitHub账号上去（如果公司允许的话）。

* （2）在GitHub上托管的公开代码仓库任何人都可以看到内容，但不可做修改（只有添加了SSH Key才可以做修改）。

* （3）要想不让别人看到自己的GitHub仓库的内容，有2种方法：第一种是向GitHub付费申请私有仓库，第二种是自己搭建一个git服务器。对于第一种，我的理解是GitHub本来就是一个倡导开源的组织，要想免费使用它的平台就要贡献出来一些东西（即开源自己的代码），如果不想开源那就要收费了（因为你没有贡献出来什么东西给大家）。

# 2. 提交本地代码到远程库

假如本地已经有了一个git仓库：learngit，现在想要把这个仓库的代码推送到GitHub上去，步骤如下：

## 1. 在GitHub上创建一个远程库

点击页面右上角的一个"+"按钮，创建一个空的远程仓库：learngit。

## 2. 建立本地库与远程仓库的联系

在本地learngit仓库目录下执行命令：

`git remote add origin git@github.com:xxx/learngit.git`

注：这是用SSH的方式进行推送，其中origin为默认的远程仓库名，xxx为你的邮箱账号名（@之前的字符串），learngit为刚刚第1步创建的远程仓库名。除了SSH的推送方式外，还有HTTPS的方式，但SSH的方式速度更快。最后的'.git'是一定要带上的。

补充：

查看本地仓库和远程仓库的联系信息：`git remote -v`

删除本地库与远程库的联系：`git remote remove origin`

## 3.拉远程仓库代码到本地

如果远程仓库创建了README.md等文件，那么先要把远程的文件拉到本地，否则下一步push的时候不会成功：

`git pull origin master:master`

注：此命令表明把远程的master分支拉到本地的master分支，前一个master指的是远程的master分支。

## 4. 推送代码

建立和远程仓库的联系后，就可以将本地仓库当前分支的代码推送到远程仓库了。将本地仓库的master分支的内容（默认分支为master）推送到远程库对应的分支上（master分支）：

`git push -u origin master`

注：首次推送要加`-u`参数，后面再推送就可以不加了，因为这第一次已经建立了和远程仓库的追踪链接，所以可以直接用：`git push origin master`

# 3. 从远程仓库克隆到本地

## 1. 创建远程仓库

在github上创建一个远程仓库：gitskills，并在创建时候顺便初始化一个readme.md文件
注：在创建远程仓库的时候，同时也可以创建.gitignore文件（有现成的各种语言的.gitignore文件可以选），也可以创建license文件。

## 2. 克隆远程库到本地

在本地任一目录下执行：

`git clone git@github.com:xxx/gitskills.git`

## 3. 成功克隆远程代码到本地

此时发现当前目录下多了一个gitskills目录，进去之后就可以看到第1步中创建的readme.md文件了

## 4. 其他下载方式

git远程库的其他下载方式：https，zip压缩包，但还是属ssh方式速度最快]]></description></item><item><title>用python玩点有趣的数据分析——一元线性回归分析实例</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119028.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:10:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119028.html</guid><description><![CDATA[> Refer:http://python.jobbole.com/81215/

> 本文参考了博乐在线的这篇文章，在其基础上加了一些自己的理解。其原文是一篇英文的博客，讲的通俗易懂。

本文通过一个简单的例子：预测房价，来探讨怎么用python做一元线性回归分析。

# 1. 预测一下房价

房价是一个很火的话题，现在我们拿到一组数据，是房子的大小（平方英尺）和房价（美元）之间的对应关系，见下表（csv数据文件）：
![](http://images2015.cnblogs.com/blog/760572/201707/760572-20170704231242253-391194504.png)

  
从中可以大致看出，房价和房子大小之间是有相关关系的，且可以大致看出来是线性相关关系。为了简单起见，这里理想化地假设房价只和房子大小有关，那我们在这组数据的基础上，怎样预测任意大小的房子的房价呢？答案是用一元回归分析。

# 2. 一元回归分析是啥

讲到一元回归分析很多人应该不陌生，在初中还是高中的数学课程中肯定有学过，即对于一组自变量x和对应的一组因变量y的值，x和y呈线性相关关系，现在让你求出这个线性关系的直线方程，就是这样一个问题。

记得当时用的方法叫：最小二乘法，这里不再细讲最小二乘法的详细内容，其主要思想就是找到这样一条直线，使得所有已知点到这条直线的距离的和最短，那么这样一条直线理论上就应该是和实际数据拟合度最高的直线了。

下面我们将开篇提出的问题中的房价和房子的大小之间的关系用一个线性方程来表示：

$$h_\theta(x) = \theta_0 + \theta_1x$$

表示大小为x（单位：平方英尺）的房子的价格为$h_\theta(x)$，其中$\theta_0$是直线的截距，$\theta_1$为回归系数，即直线的斜率。

我们要计算的东西其实就是$\theta_0$和$\theta_1$这两个系数，因为只要这两个系数确定了，那直线的方程也就确定了，然后就可以把要预测的x值代入方程来求得对应的$h_\theta$值了。

# 3. 上代码

注：用到的3个库都可以用pip命令进行安装。


```python
#!/usr/bin/python
# coding:utf-8
# python一元回归分析实例：预测房子价格
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.linear_model import LinearRegression

# 从csv文件中读取数据，分别为：X列表和对应的Y列表
def get_data(file_name):
    # 1. 用pandas读取csv
    data = pd.read_csv(file_name)
    
    # 2. 构造X列表和Y列表
    X_parameter = []
    Y_parameter = []
    for single_square_feet,single_price_value in zip(data['square_feet'],data['price']):
        X_parameter.append([float(single_square_feet)])
        Y_parameter.append(float(single_price_value))
        
    return X_parameter,Y_parameter
    
# 线性回归分析，其中predict_square_feet为要预测的平方英尺数，函数返回对应的房价
def linear_model_main(X_parameter,Y_parameter,predict_square_feet):
    # 1. 构造回归对象
    regr = LinearRegression()
    regr.fit(X_parameter,Y_parameter)
    
    # 2. 获取预测值
    predict_outcome = regr.predict(predict_square_feet)
    
    # 3. 构造返回字典
    predictions = {}
    # 3.1 截距值
    predictions['intercept'] = regr.intercept_
    # 3.2 回归系数（斜率值）
    predictions['coefficient'] = regr.coef_
    # 3.3 预测值
    predictions['predict_value'] = predict_outcome
    
    return predictions

# 绘出图像
def show_linear_line(X_parameter,Y_parameter):
    # 1. 构造回归对象
    regr = LinearRegression()
    regr.fit(X_parameter,Y_parameter)
    
    # 2. 绘出已知数据散点图
    plt.scatter(X_parameter,Y_parameter,color = 'blue')
    
    # 3. 绘出预测直线
    plt.plot(X_parameter,regr.predict(X_parameter),color = 'red',linewidth = 4)
    
    plt.title('Predict the house price')
    plt.xlabel('square feet')
    plt.ylabel('price')
    plt.show()

def main():
    # 1. 读取数据
    X,Y = get_data('./price_info.csv')
    
    # 2. 获取预测值，在这里我们预测700平方英尺大小的房子的房价
    predict_square_feet = 700
    result = linear_model_main(X,Y,predict_square_feet)
    for key,value in result.items():
        print '{0}:{1}'.format(key,value)
        
    # 3. 绘图
    show_linear_line(X,Y)
    
if __name__ == '__main__':
    main()

```

【输出结果】

coefficient:[ 28.77659574]

predict_value:[ 21915.42553191]

intercept:1771.80851064

![这里写图片描述](http://img.blog.csdn.net/20170514005018979?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

# 4. 总结与不足

上述分析过程，有两点不足：

（1）数据量太少，预测的误差可能较大；

（2）影响房价不止房子大小这一个因素，肯定还有很多其他因素，这里没有把其他因素考虑进去，导致预测的结果也是不准确的。既然有一元回归分析，那肯定也有多元回归分析，留到以后再讲。

但是我们也看到可以用python的一些科学计算和数据分析的库自动的帮我们完成以前需要繁琐计算的过程，更加灵活高效，特别是面对上万上百万规模的数据的时候。]]></description></item><item><title>用python处理Excel文档（1）——用xlrd模块读取xls/xlsx文档</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119014.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:07:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7119014.html</guid><description><![CDATA[本文主要介绍xlrd模块读取Excel文档的基本用法，并以一个GDP数据的文档为例来进行操作。
# 1. 准备工作：
## 1. 安装xlrd：`pip install xlrd`
## 2. 准备数据集：从网上找到的1952~2012年中国国内GDP的数据，数据结构如下：
![这里写图片描述](http://img.blog.csdn.net/20170512230307316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

# 2. 目标：将这份数据转换成json格式的数据

# 3. 上代码


```python
#!/usr/bin/python
# coding:utf-8
# 用xlrd读取Excel文件基本用法
import sys
import xlrd
import json

# 设置编码格式
reload(sys)
sys.setdefaultencoding('utf-8')

# 1. 从Excel文件中读取出Book对象
data = xlrd.open_workbook('./gdp_data.xls')
# print type(data)
# 输出：<class 'xlrd.book.Book'>

# 2. 获取sheet页对象
# 2.1 通过sheet索引获取
sheet1 = data.sheet_by_index(0)
# print sheet1
# 输出：<xlrd.sheet.Sheet object at 0x7efc10319ed0>

# 2.2 通过sheet名称获取
sheet2 = data.sheet_by_name(u'Sheet1')
# print sheet2
# 输出：<xlrd.sheet.Sheet object at 0x7efbfb72db10>

# 3. 获取sheet页的行数和列数
nrows = sheet1.nrows
ncols = sheet1.ncols
# print nrows,ncols
# 输出：62 5
# 说明表格有62行、5列

# 4. 获取第0行的值（是一个列表）
row_data = sheet1.row_values(0)
# print row_data
# 输出：[u'year', u'GDP', u'first industry', u'second industry', u'third industry']

# 5. 获取第0列的值（是一个列表）
col_data = sheet1.col_values(0)
# print col_data
# 输出：[u'year', 1952.0, 1953.0, 1954.0, 1955.0,...]

# 6. 使用行列索引（从0开始）获取单元格的数据
cell_A1 = sheet1.cell(0,0)
# print cell_A1
# print type(cell_A1)
# print cell_A1.value
# 输出：
'''
text:u'year'
<class 'xlrd.sheet.Cell'>
year
'''

# 7. 应用：将Excel文件中的数据转换成json数组
# 索引（即表头）
idx = sheet1.row_values(0)
# 最终的数据列表
data = []
# 从第1行开始遍历循环所有行，获取每行的数据
for i in range(1,nrows):
    row_data = sheet1.row_values(i)
    # 组建每一行数据的字典
    row_data_dict = {}
    # 遍历行数据的每一项，赋值进行数据字典
    for j in range(len(row_data)):
        item = row_data[j]
        row_data_dict[idx[j]] = item
        # 将年份字段转成整形
        row_data_dict['year'] = int(row_data_dict['year'])
    # 将行数据字典加入到data列表中
    data.append(row_data_dict)
    
print json.dumps(data,indent = 4)
# 输出：
'''
[
    {
        "GDP": 679.0, 
        "second industry": 141.8, 
        "first industry": 342.9, 
        "third industry": 194.3, 
        "year": 1952
    }, 
    {
        "GDP": 824.0, 
        "second industry": 192.5, 
        "first industry": 378.0, 
        "third industry": 253.5, 
        "year": 1953
    }, 
    {
        "GDP": 859.0, 
        "second industry": 211.7, 
        "first industry": 392.0, 
        "third industry": 255.3, 
        "year": 1954
    }, 
    ...
]
'''
```]]></description></item><item><title>简单算术表达式求值</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118987.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 15:01:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118987.html</guid><description><![CDATA[> Refer：http://interactivepython.org/runestone/static/pythonds/BasicDS/InfixPrefixandPostfixExpressions.html

本文主要探讨简单的数学算术表达式求值算法的原理和实现。

# 1. 约束

本文只是探讨简单的算术表达式的求值算法，为了将主要精力放在算法思想的探讨和实现上，避免陷入对其他不是直接相关的细节的过多思考，所以提前做如下约束：

* 本文所讨论的算术表达式字符串中每个运算数、运算符之间都有空白符分隔开（方便后面用python字符串的split函数分割处理成列表）。

* 算术表达式中参与运算的运算数都为1位整数。

* 表达式中的运算符都为二元运算符（即一个运算符需要两个运算数），不会出现其他元的运算符（如一元运算符负号：'-'）。

* 运算的中间结果和最终结果也都为整数，且都不会产生异常（如除数为0等）。

* 暂且只支持如下几种运算符：+ - \* / ( )

# 2. 中缀表达式与后缀表达式

算术表达式，根据运算符和运算数的相对位置不同，可以分为三种：前缀表达式（prefix）、中缀表达式（infix）和后缀表达式（postfix），其中后缀表达式又称为逆波兰式，在本文中只讨论中缀和后缀表达式。

* 中缀表达式：就是我们平时常见的算术表达式，如'1 + 2 \* 3'，'( 1 + 2 ) \* 3'这样的运算符在运算数中间的表达式，中缀表达式的特点是符合人的理解习惯，并且可以加小括号改变运算的先后顺序。但缺点是如果用编程来求值的话比较困难。

* 后缀表达式：是将中缀表达式进行变换后得到的表达式，如'1 2 3 \* +'，'1 2 + 3 \*'这样的运算符在运算数后面的表达式，后缀表达式的特点是虽然不符合人的理解习惯，但编程来求值却很方便，且没有括号的烦恼。

后缀表达式因为不需要括号，所以编程求值起来比较方便，下面将先从如何对后缀表达式求值讲起。

# 3. 后缀表达式求值

## 1. 核心算法：

### （1） 创建一个空栈，名为numstack，用于存放运算数。

### （2） 用python字符串的split函数将输入的后缀表达式（postfix）分割为列表，将该列表记为input。

### （3） 从左到右遍历input的每一个元素token：

* 3.1：若token为运算数，将其转换为整数并push进numstack；

* 3.2：若token为运算符，则将numstack pop两次，将第一次pop得到的数作为运算符的右操作数，将第二次pop得到的数作为运算符的左操作数，然后求出运算结果，并将结果push进numstack；

### （4）遍历完input后，numstack仅剩下一个元素，这就是表达式的最终求值结果，pop出这个元素，算法结束。

## 2. 举例

比如求'4 5 6 \* +'这样一个后缀表达式的值（注：其前缀表达式为：'4 + 5 \* 6'，值为34），按照上述算法，过程如下：

No.|operator|numstack
:---|:---|:---
1||4
2||4 5
3||4 5 6
4|\*|4 5 6
5||4 30
6|+|4 30
7||34

所以最终的表达式求值结果为：34

## 3. 代码实现


```python
# 准备工作：创建一个栈类
class Stack():
    def __init__(self):
        self.data = []
    
    def __str__(self):
        return str(self.data)
    
    __repr__ = __str__
    
    def pop(self):
        if len(self.data) != 0:
            return self.data.pop()
        return None
    
    def push(self,e):
        self.data.append(e)
        
    def clear(self):
        del self.data[:]
    
    # 获取栈顶元素，但不弹出此元素
    def peek(self):
        if len(self.data) != 0:
            return self.data[-1]
        return None
    
    # 判断栈是否为空
    def empty(self):
        return len(self.data) == 0
    
# 求值函数
def get_value(num1,op,num2):
    if op == '+':
        return num1 + num2
    elif op == '-':
        return num1 - num2
    elif op == '*':
        return num1 * num2
    elif op == '/':
        return num1 / num2
    else:
        raise ValueError('invalid operator!')
    
# 后缀表达式求值函数
def get_postfix_value(postfix):
    # 1. 创建一个运算数栈
    numstack = Stack()
    
    # 2. 分割postfix
    inPut = postfix.strip().split()  # 注：因为'input'是内置函数名，所以用'inPut';strip函数的作用是去掉字符串的开始和结尾的空白字符
    
    # 3. 遍历inPut
    for token in inPut:
        # 3.1 如果token为运算数
        if token.isdigit():
            numstack.push(int(token))
        # 3.2 如果token是运算符
        else:
            num2 = numstack.pop()
            num1 = numstack.pop()
            numstack.push(get_value(num1,token,num2))
    
    # 4. 输出numstack的最后一个元素
    return numstack.pop()
            
# 后缀表达式
# 注：对应的中缀表达式为：(1+2)*(3+4)，运算结果为：21
postfix = '1 2 + 3 4 + *'

print '【Output】'
print get_postfix_value(postfix)
```

    【Output】
    21


# 4. 中缀表达式转后缀表达式

## 1. 核心算法

### （1）创建一个空栈opstack，用于存放运算符，创建一个空列表output用于保存输出结果。

### （2）使用python字符串的split函数将输入的中缀表达式（infix）字符串分割成列表并存入input列表中。

### （3）从左到右遍历input列表的每个元素token：

* 3.1：若token是运算数，直接append到output中；

* 3.2：若token是运算符，先判断它与opstack栈顶元素的运算优先级（注：小括号的优先级约定为最低），若：token的优先级小于等于栈顶元素优先级，则先从opstack中pop出栈顶元素并append到output，再将token push进opstack；否则直接将token push进opstack；

* 3.3：若token是左括号，直接将其push进opstack；

* 3.4：若token是右括号，依次pop出opstack中的元素并依次append到output，直到遇到左括号，将左括号继续pop出（但不append到output）。

### （4）当遍历完成input，将opstack中所有的剩余元素pop出并依次append到output。

### （5）将output转换为字符串，即为最终求得的后缀表达式。

## 2. 举例

比如将'(A+B)\*C'这样一个中缀表达式转换为后缀表达式（其中A,B,C表示整数），按照上述算法，转换过程如下：

No.|opstack|output
:---|:---|:---
1|(|
2|(|A
3|(+|A
4|(+|A B 
5||A B +
6|\*|A B +
7|\*|A B + C
8||A B + C *

所以最终求得的后缀表达式为：'A B + C *'

## 3. 代码实现


```python
# 准备工作：创建一个栈类
class Stack():
    def __init__(self):
        self.data = []
    
    def __str__(self):
        return str(self.data)
    
    __repr__ = __str__
    
    def pop(self):
        if len(self.data) != 0:
            return self.data.pop()
        return None
    
    def push(self,e):
        self.data.append(e)
        
    def clear(self):
        del self.data[:]
    
    # 获取栈顶元素，但不弹出此元素
    def peek(self):
        if len(self.data) != 0:
            return self.data[-1]
        return None
    
    # 判断栈是否为空
    def empty(self):
        return len(self.data) == 0
    
# 求值函数
def get_value(num1,op,num2):
    if op == '+':
        return num1 + num2
    elif op == '-':
        return num1 - num2
    elif op == '*':
        return num1 * num2
    elif op == '/':
        return num1 / num2
    else:
        raise ValueError('invalid operator!')
        
# 将中缀表达式转换为后缀表达式的函数
def infix2postfix(infix):
    # 1. 创建运算符栈和输出结果列表
    opstack = Stack()
    output = []
    
    # 准备一个运算符优先级字典，其中左小括号的优先级最低
    priority = {'(' : 0,'+' : 3,'-' : 3,'*' : 4,'/' : 4}
    
    # 2. 分割infix
    inPut = infix.strip().split()
    
    # 3. 遍历inPut
    for token in inPut:
        # 3.1 若token是运算数
        if token.isdigit():
            output.append(token)
        # 3.2 若token是运算符
        elif token in ['+','-','*','/']:
            if not opstack.empty() and priority[token] <= priority[opstack.peek()]:
                output.append(opstack.pop())
            opstack.push(token)
        # 3.3 若token是左括号
        elif token == '(':
            opstack.push(token)
        # 3.4 若token是右括号
        elif token == ')':
            while opstack.peek() != '(':
                output.append(opstack.pop())
            # 弹出左括号
            opstack.pop()
        else:
            raise ValueError('invalid token:{0}'.format(token))
    # 4. 将opstack中剩余元素append到output
    while not opstack.empty():
        output.append(opstack.pop())
        
    # 5. 将output转换为字符串（每个元素用空格隔开）并输出
    return ' '.join(output)

infix = '( 1 + 2 ) * ( 3 + 4 )'

print '【Output】'
print infix2postfix(infix)
```

    【Output】
    1 2 + 3 4 + *


# 5. 整理：中缀表达式求值

## 1. 核心算法

经过前面的讨论，那么现在求中缀表达式的值就很简单了，分为两步：第1步，将中缀表达式转换为对应的后缀表达式；第2步，对后缀表达式求值。

## 2. 完整代码实现


```python
# 准备工作：创建一个栈类
class Stack():
    def __init__(self):
        self.data = []
    
    def __str__(self):
        return str(self.data)
    
    __repr__ = __str__
    
    def pop(self):
        if len(self.data) != 0:
            return self.data.pop()
        return None
    
    def push(self,e):
        self.data.append(e)
        
    def clear(self):
        del self.data[:]
    
    # 获取栈顶元素，但不弹出此元素
    def peek(self):
        if len(self.data) != 0:
            return self.data[-1]
        return None
    
    # 判断栈是否为空
    def empty(self):
        return len(self.data) == 0
    
# 求值函数
def get_value(num1,op,num2):
    if op == '+':
        return num1 + num2
    elif op == '-':
        return num1 - num2
    elif op == '*':
        return num1 * num2
    elif op == '/':
        return num1 / num2
    else:
        raise ValueError('invalid operator!')

# 将中缀表达式转换为后缀表达式的函数
def infix2postfix(infix):
    # 1. 创建运算符栈和输出结果列表
    opstack = Stack()
    output = []
    
    # 准备一个运算符优先级字典，其中左小括号的优先级最低
    priority = {'(' : 0,'+' : 3,'-' : 3,'*' : 4,'/' : 4}
    
    # 2. 分割infix
    inPut = infix.strip().split()
    
    # 3. 遍历inPut
    for token in inPut:
        # 3.1 若token是运算数
        if token.isdigit():
            output.append(token)
        # 3.2 若token是运算符
        elif token in ['+','-','*','/']:
            if not opstack.empty() and priority[token] <= priority[opstack.peek()]:
                output.append(opstack.pop())
            opstack.push(token)
        # 3.3 若token是左括号
        elif token == '(':
            opstack.push(token)
        # 3.4 若token是右括号
        elif token == ')':
            while opstack.peek() != '(':
                output.append(opstack.pop())
            # 弹出左括号
            opstack.pop()
        else:
            raise ValueError('invalid token:{0}'.format(token))
    # 4. 将opstack中剩余元素append到output
    while not opstack.empty():
        output.append(opstack.pop())
        
    # 5. 将output转换为字符串（每个元素用空格隔开）并输出
    return ' '.join(output)
    
# 后缀表达式求值函数
def get_postfix_value(postfix):
    # 1. 创建一个运算数栈
    numstack = Stack()
    
    # 2. 分割postfix
    inPut = postfix.strip().split()  # 注：因为'input'是内置函数名，所以用'inPut';strip函数的作用是去掉字符串的开始和结尾的空白字符
    
    # 3. 遍历inPut
    for token in inPut:
        # 3.1 如果token为运算数
        if token.isdigit():
            numstack.push(int(token))
        # 3.2 如果token是运算符
        else:
            num2 = numstack.pop()
            num1 = numstack.pop()
            numstack.push(get_value(num1,token,num2))
    
    # 4. 输出numstack的最后一个元素
    return numstack.pop()

# 中缀表达式求值函数
def get_infix_value(infix):
    postfix = infix2postfix(infix)
    return get_postfix_value(postfix)

infix = '( 1 + 2 ) * ( 3 + 4 )'

print '【Output】'
print get_infix_value(infix)
```

    【Output】
    21]]></description></item><item><title>git学习总结系列（1）——基本用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118976.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:58:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118976.html</guid><description><![CDATA[> 廖雪峰的官方网站：http://www.liaoxuefeng.com/

本文是学习廖雪峰的官方网站上git教程git基本用法的总结，详细内容可以进入廖雪峰的官方网站查看。

注：本文中的主要内容都是基于Linux环境进行操作的，使用的git版本为最新的2.10.2版本。文中命令示例中方括号里面的内容都表示是可选参数。

# 1. git与版本控制系统

* git：分布式版本控制系统。

* svn：集中式版本控制系统。

无论是分布式还是集中式版本控制系统，都只能对纯文本文件进行版本控制，而对二进制文件（如MS Word、MS Excel文档等）却都是无能为力的。

注意一点：文本文件必须统一使用utf-8格式编码，千万不要使用gbk编码！

# 2. 安装git

## 1. Linux环境（以Ubuntu为例）

### (1) 查看当前有没有安装git

`git`

### (2) 安装git

`sudo apt-get install git`

### (3) 查看git版本

`git --version`

### (4) 查看git帮助文档

有两种方法：

`git`

`git --help`

## 2. Windows环境

到 https://git-for-windows.github.io 上下载EXE安装包安装，安装完成后会有一个git bash命令行，然后在git bash命令行中其他操作和Linux下一致。

# 3. 配置git

## 1. 全局配置：

`git config --global user.name "your_name"`

`git config --global user.email "your_email@example.com"`

## 2. 在当前目录下初始化一个git版本库

`git init`

创建成功后，在当前目录下使用`ls -al`命令，可以看到创建了一个新的隐藏目录：.git，这就是git的版本库，注意不要手动修改其中的任何内容！

# 4. git工作区和暂存区、分支的关系

初始化成功一个git版本库后，会自动创建一个默认版本分支：master，以及一个暂存区（stage）。那么工作区（即用`git init`命令初始化后的硬盘文件夹）、暂存区、分支三者之间的关系是什么呢？搞清楚这一点对后面学习git的很多用法都非常重要，一图胜千言，见下图：
![这里写图片描述](http://img.blog.csdn.net/20170426225751797?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

# 5. git 常用操作

准备：假如当前目录位于learngit文件夹，是一个空文件夹，首先在learngit目录初始化一个git版本库：

`git init`

这时发现在learngit文件夹下新建了一个隐藏目录：.git，然后在learngit目录下新建一个文本文件：readme.txt，并向其中任意添加一些内容。

## 1. 将readme.txt文件添加到版本库暂存区

`git add readme.txt`

附：`git add`的其他用法：

* 添加工作区的所有修改（包括新建、修改和删除文件这三种修改）：`git add -A`

* 添加工作区中新建和修改文件的改动到暂存区，但不包括删除文件的改动：`git add * `或 `git add . `

* 添加工作区修改和删除文件的改动到暂存区，但不包括新建文件的改动：`git add -u`

* 撤销单个或多个文件的add操作：`git reset 文件名1 文件名2...`

* 撤销当前所有add到暂存区的操作：`git reset`

## 2. 删除文件

`git rm 文件名1 文件名2...`

## 3. 从暂存区提交修改（包括`git add`和`git rm`操作）到主分支

`git commit -m "create a new file readme.txt"`

注：`git commit`操作只会提交已经add到暂存区的修改，而工作区还未被add进暂存区的修改是不会被提交的。

## 4. 查看工作区状态

`git status`

## 5. 查看工作区和当前版本库最新版本之间的差别

`git diff HEAD [-- 文件名1 文件名2...]`

## 6. 撤销暂存区的修改（包括git add和git rm操作）

`git reset HEAD [文件名1 文件名2...]`

## 7. 查看commit操作的历史记录

`git log [--pretty=oneline]`

注：`--pretty=oneline`参数是为了在一行显示一条历史记录。

## 8. HEAD的理解

HEAD其实相当于一个指针，它指向的版本号就是当前版本库的最新版本。

* HEAD：当前版本

* HEAD^ ：上一个版本

* HEAD^^ ：上上个版本

* ......

* HEAD~100：往前100个版本

HEAD的指针作用可以用如下示意图表示：
![这里写图片描述](http://img.blog.csdn.net/20170426230834333?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

从上图也可以看出，HEAD指针可以指向不同的版本，而这也正是下面要讲的版本回退和切换的原理。

## 9. 回退到某一个版本

* 回退到上一个版本：`git reset --hard HEAD^`

* 回退到某个版本：`git reset --hard 版本号`

注：版本号可通过`git log`命令查看，只需要写前几位即可，git会自动识别匹配。

## 10. 回到未来

假如回退到之前的某个版本后，又后悔了不想回退了，想要撤销回退（即想要回到回退前的版本），可以使用如下命令：

* 先查看commit和reset命令的所有操作历史记录：`git reflog`

* 找到想要回到的未来的某个版本号，回到未来：`git reset --hard 版本号`]]></description></item><item><title>python正则表达式系列（5）——零宽断言</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118970.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:56:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118970.html</guid><description><![CDATA[本文主要总结了python正则零宽断言（zero-length-assertion）的一些常用用法。

# 1. 什么是零宽断言

有时候在使用正则表达式做匹配的时候，我们希望匹配一个字符串，这个字符串的前面或后面需要是特定的内容，但我们又不想要前面或后面的这个特定的内容，这时候就需要零宽断言的帮助了。所谓零宽断言，简单来说就是匹配一个位置，这个位置满足某个正则，但是不纳入匹配结果的，所以叫“零宽”，而且这个位置的前面或后面需要满足某种正则。

比如对于一个字符串："finished going done doing"，我们希望匹配出其中的以ing结尾的单词，就可以使用零宽断言：


```python
import re
s = 'finished going done doing'
p = re.compile(r'\b\w+(?=ing\b)')

print '【Output】'
print [x + 'ing' for x in re.findall(p,s)]
```

    【Output】
    ['going', 'doing']


可以看出从中匹配出了'going'和'doing‘两个单词，达到目的。

这里正则中使用的`(?=ing\b)`就是一种零宽断言，它匹配这样一个位置：这个位置有一个'ing'字符串，后面跟着一个'\b'符号，并且这个位置前面的字符串满足正则：`\b\w+`，于是匹配结果就是：`['go','do']`

# 2. 不同的零宽断言

零宽断言分为四种：正预测先行断言、正回顾后发断言、负预测先行断言、负回顾后发断言，不同的断言匹配的位置不同。

总结一下，这几个仿佛说的不是"人话"的令人费解的名词可以这样理解：其中的“正”指的是肯定预测，即某个位置满足某个正则，而与之对应的“负”则指的是否定预测，即某个位置不要满足某个正则；其中的“预测先行”则指的是“往后看”，“先往后走”的意思，即这个位置是出现在某一个字符串后面的，而与之相反的“回顾后发”则指的是相反的意思：“往前看”，即匹配的这个位置是出现在某个字符串的前面的。

不理解没关系，我们用实例说话，下面对每种零宽断言进行详细介绍。

## 1. 正预测先行断言：`(?=exp)`

匹配一个位置（但结果不包含此位置）之前的文本内容，这个位置满足正则exp，举例：匹配出字符串s中以ing结尾的单词的前半部分：


```python
s = "I'm singing while you're dancing."
p = re.compile(r'\b\w+(?=ing\b)')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['sing', 'danc']


## 2. 正回顾后发断言：`(?<=exp)`

匹配一个位置（但结果不包含此位置）之后的文本，这个位置满足正则exp，举例：匹配出字符串s中以do开头的单词的后半部分：


```python
s = "doing done do todo"
p = re.compile(r'(?<=\bdo)\w+\b')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['ing', 'ne']


## 3. 负预测先行断言：`(?!exp)`

匹配一个位置（但结果不包含此位置）之前的文本，此位置不能满足正则exp，举例：匹配出字符串s中不以ing结尾的单词的前半部分：


```python
s = 'done run going'
p = re.compile(r'\b\w+(?!ing\b)')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['done', 'run', 'going']


可见，出问题了，这不是我们预期的结果（预期的结果是：done和run），这是因为负向断言不支持匹配不定长的表达式，将p改一下再匹配：


```python
s = 'done run going'
p = re.compile(r'\b\w{2}(?!ing\b)')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['do', 'ru']


可见一次只能匹配出固定长度的不以ing结尾的单词，没有完全达到预期。这个问题还有待解决。

## 4. 负回顾后发断言：`(?<!exp)`

匹配一个位置（但结果不包含此位置）之后的文本，这个位置不能满足正则exp，举例：匹配字符串s中不以do开头的单词：


```python
s = 'done run going'
p = re.compile(r'(?<!\bdo)\w+\b')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['done', 'run', 'going']


可见也存在与负预测先行断言相同的问题，改一下：


```python
s = 'done run going'
p = re.compile(r'(?<!\bdo)\w{2}\b')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['un', 'ng']


## 5. 正向零宽断言的结合使用

举例：字符串ip是一个ip地址，现在要匹配出其中的四个整数：


```python
ip = '160.158.0.77'
p = re.compile(r'(?<=\.)?\d+(?=\.)?')

print '【Output】'
print re.findall(p,ip)
```

    【Output】
    ['160', '158', '0', '77']


## 6. 负向零宽断言的结合使用

举例：匹配字符串s中的一些单词，这些单词不以'x'开头且不以'y'结尾：


```python
s = 'xaay xbbc accd'
p = re.compile(r'(?<!\bx)\w+(?!y\b)')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['xaay', 'xbbc', 'accd']


可见这里因为负向断言不支持不定长表达式，所以也存在和前面相同的问题。

# 3. 零宽断言的应用

## 1. 匹配html标签之间的内容


```python
s = '<span>Hello world!</span>'
p = re.compile(r'(?<=<(?:\w+)>(.*)(?=</\1>))')

print '【Output】'
print re.findall(p,s)
# 报错：error: look-behind requires fixed-width pattern
```

上面的报错是因为零宽断言的正则中不能含有不定长的表达式，改一下：


```python
s = '<span>Hello world!</span>'
p = re.compile(r'(?<=<(\w{4})>)(.*)(?=</\1>)')

print '【Output】'
print re.findall(p,s)
```

    【Output】
    [('span', 'Hello world!')]


## 2. 匹配存在多种规则约束（含否定规则）的字符串

匹配一个长度为4个字符的字符串，该字符串只能由数字、字母或下划线3种字符组成，且必须包含其中的至少两种字符，且不能以下划线或数字开头：


```python
# 测试数据
strs = ['_aaa','1aaa','aaaa','a_12','a1','a_123','1234','____']
p = re.compile(r'^(?!_)(?!\d)(?!\d+$)(?![a-zA-Z]+$)\w{4}$')

print '【Output】'
for s in strs:
    print re.findall(p,s)
```

    【Output】
    []
    []
    []
    ['a_12']
    []
    []
    []
    []

## 3. 注意点

零宽断言虽然也是用小括号括起来的，但不占用分组的默认命名空间。举例如下：

```python
s = 'goingxxx'
# 在紧跟'ing'后面的字符串前加上'AAA'
print re.sub(r'(?<=ing)(\w+)\b',r'AAA\1',s)
# 输出： goingAAAxxx
```]]></description></item><item><title>python正则表达式系列（4）——分组和后向引用</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118967.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:55:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118967.html</guid><description><![CDATA[分组，即分组匹配，也称为捕获组，是正则中的一种比较重要的匹配方式。此外后向引用和分组相结合，可以写出很多复杂匹配场景的正则。

# 1. 分组

分组的方法：将子表达式用小括号括起来，如：(exp)，表示匹配表达式exp，并捕获文本到自动命名的组里。举例：


```python
import re
s = 'c1c b2b c3c'
p = re.compile(r'c(\d)c')
print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['1', '3']


```python
s = 'a1b2 c3d4 ea7f'
p1 = re.compile(r'[a-z]\d[a-z]\d')

print '【Output 1】'
print re.findall(p1,s)

p2 = re.compile(r'[a-z]\d[a-z](\d)')

print '\n【Output 2】'
print re.findall(p2,s)

p3 = re.compile(r'[a-z](\d)[a-z](\d)')

print '\n【Output 3】'
print re.findall(p3,s)
```

    【Output 1】
    ['a1b2', 'c3d4']
    
    【Output 2】
    ['2', '4']
    
    【Output 3】
    [('1', '2'), ('3', '4')]
    

```python
s = 'age:13,name:Tom;age:18,name:John'
p = re.compile(r'age:(\d+),name:(\w+)')
it = re.finditer(p,s)
print '【Output】'
for m in it:
    print '------'
    print m.group()
    print m.group(0)
    print m.group(1)
    print m.group(2)
```

    【Output】
    ------
    age:13,name:Tom
    age:13,name:Tom
    13
    Tom
    ------
    age:18,name:John
    age:18,name:John
    18
    John


# 2. 忽略某个分组

有时候给正则的某个子表达式加括号并不是为了分组，而仅仅是为了看起来更清晰，因此在匹配结果中并不想匹配该子表达式，那么该怎么办呢？答案是忽略该分组，方法：(?:exp)。举例：只想匹配name，不想匹配age：


```python
s = 'age:13,name:Tom'
p1 = re.compile(r'age:(\d+),name:(\w+)')
print '【Output】'
# 不忽略分组
print re.findall(p1,s)

# 忽略分组
p2 = re.compile(r'age:(?:\d+),name:(\w+)')
print re.findall(p2,s)
```

    【Output】
    [('13', 'Tom')]
    ['Tom']


# 3. 后向引用

所谓后向引用，就是对前面出现过的分组再一次引用，使用默认的分组名称进行后向引用：\1,\2,\3...（注：从1开始）

举例：


```python
# 匹配字符串中连续出现的两个相同的单词
s = 'hello blue go go hello'
p = re.compile(r'\b(\w+)\b\s+\1\b')  # 这里的'\1'就对应前面的(\w+)
print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['go']


# 4. 自定义名称分组的后向引用

python正则可以对分组自定义名称，然后可以使用自定义名称进行后向引用，使用自定义分组名称比使用默认分组名称更加清晰、更容易让人理解。对分组自定义名称的方法：


```python
(?P<myname>exp)
```

后向引用的方式：


```python
(?P=myname)
```

这里要注意的是，其他语言的正则与python正则的分组自定义名称的语法不太一样，其他语言是这样写的：


```python
# 自定义名称
(?<name>exp)
# 后向引用
\K<name>
```

举个例子：


```python
s = 'hello blue go go hello'
p = re.compile(r'\b(?P<my_group1>\w+)\b\s+(?P=my_group1)\b')
print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['go']

# 5.嵌套分组

```python
s  = '2017-07-10 20:00'
p = re.compile(r'(((\d{4})-\d{2})-\d{2}) (\d{2}):(\d{2})')
re.findall(p,s)
# 输出：
# [('2017-07-10','2017-07','2017','20','00')]

se = re.search(p,s)
print se.group()
print se.group(0)
print se.group(1)
print se.group(2)
print se.group(3)
print se.group(4)
print se.group(5)

# 输出：
'''
'2017-07-10 20:00'
'2017-07-10 20:00'
'2017-07-10'
'2017-07'
'2017'
'20'
'00'
'''
```
可以看出，分组的序号是以左小括号'('从左到右的顺序为准的。

# 6. 后向引用的应用

## 1. 匹配"ABAB"型字符串


```python
s = 'abab cdcd efek'
p = re.compile(r'(\w\w)\1')
print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['ab', 'cd']


## 2. 匹配"AABB"型字符串


```python
s = 'abab cdcd xxyy'
p = re.compile(r'(\w)\1(\w)\2')
print '【Output】'
print re.findall(p,s)
```

    【Output】
    [('x', 'y')]


## 3. 匹配"AABA"型字符串


```python
s = 'abab cdcd xxyx'
p = re.compile(r'(\w)\1(?:\w)\1')
print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['x']


## 4. 匹配"ABBA"型字符串


```python
s = 'abab toot'
p = re.compile(r'(\w)(\w)\2\1')
print '【Output】'
print re.findall(p,s)
```

    【Output】
    [('t', 'o')]


## 5. 向字符串中的某些位置插入字符

有一个需求：在一个字符串中的所有通配符（% _ [ ]）前都加上"\\"符进行转义，如果通配符前面本来就有"\\"，则不再插入。举例：


```python
s = 'abc\\_de%fgh[c][]c'
special = r'[%_\[\]]'
print '【Output】'
print 's = {0}'.format(s)
print re.sub(r'([^\\])(?=%s)' % special,r'\1\\',s)
# 注：这里的"(?=%s)"是零宽断言，匹配一个位置，零宽断言在后面会讲
```

    【Output】
    s = abc\_de%fgh[c][]c
    abc\_de\%fgh\[c\]\[\]c


## 6. 在字符串中从后往前每隔3个字符插入一个","符号


```python
s = '1234567890'
s = s[::-1]
print '【Output】'
print s
s = re.sub(r'(...)',r'\1,',s)
print s[::-1]
```

    【Output】
    0987654321
    1,234,567,890]]></description></item><item><title>python正则表达式系列（3）——正则内置属性</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118950.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:51:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118950.html</guid><description><![CDATA[本文主要总结一下python正则的一些内置属性的用法。

# 1. 编译标志：flags

首先来看一下re.findall函数的函数原型：


```python
import re 
print('【Output】')
print help(re.findall)
```

    【Output】
    Help on function findall in module re:
    
    findall(pattern, string, flags=0)
        Return a list of all non-overlapping matches in the string.
        
        If one or more groups are present in the pattern, return a
        list of groups; this will be a list of tuples if the pattern
        has more than one group.
        
        Empty matches are included in the result.
    
    None


可以看出，re.findall函数的最后一个参数是flags，默认值是0，这个falgs就是编译标志，即正则的内置属性，使用不同的编译标志可以让正则产生不同的匹配效果。那么falgs可以取哪些值呢？用help(re)来看一下re的DATA有哪些：


```python
print help(re)

# 【Output】
'''
...
DATA
    DOTALL = 16
    I = 2
    IGNORECASE = 2
    L = 4
    LOCALE = 4
    M = 8
    MULTILINE = 8
    S = 16
    U = 32
    UNICODE = 32
    VERBOSE = 64
    X = 64
...
'''
```

下面试验一下上面的每一种编译标志的作用。

# 2. DOTALL, S

使"."匹配包括"\n"在内的所有字符（"."默认是不能匹配"\n“的），举例：


```python
p = r'me.com'
print '【Output】'
print re.findall(p,'me.com')
print re.findall(p,'me\ncom')
print re.findall(p,'me\ncom',re.DOTALL)
print re.findall(p,'me\ncom',re.S)
```

    【Output】
    ['me.com']
    []
    ['me\ncom']
    ['me\ncom']

注：使用re.S模式时，正则表达式不能是编译后的正则（re.compile()函数），否则会出错。
使用re.S模式时，"^"字符变为文档开始符而不再是行开始符，"$"字符变为文档结束符而不再是行结束符。

# 3. IGNORECASE, I

使匹配对大小写不敏感，举例：


```python
p = r'a'
print '【Output】'
print re.findall(p,'A')
print re.findall(p,'A',re.IGNORECASE)
print re.findall(p,'A',re.I)
```

    【Output】
    []
    ['A']
    ['A']


# 4. LOCALE, L

本地化匹配，使用了该编译标志后，\w,\W,\b,\B,\s,\S等字符的含义就和本地化有关了。

# 5. MULTILINE, M

开启多行匹配，影响"^"和"$"。举例：


```python
s = """
aa bb cc
bb aa
aa ccd
"""
p1 = r'^aa'
p2 = r'cc$'
print '【Output】'
print re.findall(p1,s)
print re.findall(p1,s,re.M)

print re.findall(p2,s)
print re.findall(p2,s,re.M)
```

    【Output】
    []
    ['aa', 'aa']
    []
    ['cc']


# 6. VERBOSE, X

开启正则的多行写法，使之更清晰。举例：


```python
p = r"""
\d{3,4}
-?
\d{7,8}
"""
tel = '010-12345678'
print '【Output】'
print re.findall(p,tel)
print re.findall(p,tel,re.X)
```

    【Output】
    []
    ['010-12345678']


# 7. UNICODE, U

以unicode编码进行匹配，比如用'\s'匹配中文全角的空格符：\u3000，不加该编译标志和加该编译标志的效果对比如下：


```python
s = u'\u3000'
p = r'\s'
print '【Output】'
print re.findall(p,s)
print re.findall(p,s,re.U)
```

    【Output】
    []
    [u'\u3000']


# 8. 如何同时使用多个编译标志？

有时候可能同时要用到多种编译标志，比如我既想在匹配的时候忽略大小写，又想让"."匹配换行符号"\n"，前面的方式貌似不行了，那怎么办呢？

**方法：在正则的任意位置加上这句即可：(?iLmsux)**

其中i对应re.I，L对应re.L，m对应re.M，s对应re.S，u对应re.U，x对应re.X。举例：


```python
s = 'Abc\ncom'
p = r'abc.com(?is)'  # 注：编译标志(?is)可以加在正则的任意位置，这里加在了末尾
print '【Output】'
print re.findall(p,s)
```

    【Output】
    ['Abc\ncom']]]></description></item><item><title>python正则表达式系列（1）——正则元字符</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118946.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:50:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118946.html</guid><description><![CDATA[本文主要介绍python中正则表达式的基本用法，做一个初步的认识。

# 1. 初识

python通过re内置模块来处理正则表达式（regex)，底层使用C引擎。一个简单的正则匹配的例子：


```python
import re
# 正则
p = re.compile(r'[a-zA-Z0-9]')
s = 'hello 123, world!'
print re.findall(p,s)

# 输出：
# ['h', 'e', 'l', 'l', 'o', '1', '2', '3', 'w', 'o', 'r', 'l', 'd']
```

元字符：所谓元字符，指的是那些不仅仅可以表示字符本身含义、并且还可以表示其他特殊含义的字符。正则中的元字符主要有如下这些：

. ^ $ * + ? { } [ ] \ | ( )

要在正则中匹配元字符本身，需要使用转义符号，比如如果要匹配"+"符号，则在正则中要写成："\\+".

# 2. 正则元字符含义解释

## 1. [ ]

(1) 常用来指定一个字符集，如[abc]匹配：a或b或c

(2) 元字符在"[]"中不起所用，比如：[a+]匹配：a或+

但注意：在方括号中要匹配转义符“\”本身，要用："\\\\"；要匹配方括号开头的"^"符本身，要用："\^"；要匹配"-"字符，需要用："\\-"

(3) 补集匹配：[^a]，匹配非a的一个字符

(4) 匹配连续字符：[a-zA-Z0-9]，匹配大小写英文字母和数字

## 2. ^

匹配行首，在MULTILINE模式中，直接匹配字符串中的每一个换行。

## 3. $

匹配行尾，行尾是指：字符串尾，或一个换行字符后的任何位置。

## 4. \

转义字符，如果要匹配"\"本身，需要使用再次转义："\\\\"。

一些特殊字符：

\d：匹配：[0-9]

\D：匹配：[^0-9]

\s：匹配：任何空白符，即：[\t\n\r\f\v]

\S：匹配：任何非空白符，即：[^\t\n\r\f\v]

\w：匹配：[a-zA-Z0-9_ ]

\W：匹配：[^a-zA-Z0-9_ ]

## 5. *

匹配前一个字符或子表达式出现0次或多次。

## 6. + 

匹配前一个字符或子表达式出现1次或多次。

## 7. ?

(1) 匹配前一个字符或子表达式出现1次或0次。

(2) 表示非贪婪匹配：


```python
import re
# 贪婪模式，会尽量多地去匹配
r1 = re.compile(r'ab+')
s1 = 'abbb'
print re.findall(r1,s1)

# 非贪婪模式，会尽量少地去匹配
r2 = re.compile(r'ab+?')
s2 = 'abbb'
print re.findall(r2,s2)

# 输出：
'''
['abbb']
['ab']
'''
```

## 8. {}

匹配前一个字符或子表达式出现指定次数：

* {0,}：0次或多次，相当于"*"

* {1,}：1次或多次，相当于"+"

* {0,1}：0次或1次，相当于"?"

* {m,n}：m次到n次(m <= n)]]></description></item><item><title>python正则表达式系列（2）——re模块常用函数</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118948.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:50:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118948.html</guid><description><![CDATA[本文主要介绍正则re模块的常用函数。

# 1. 编译正则


```python
import re
p = re.compile(r'ab*')
print '【Output】'
print type(p)
print p
print p.findall('abbc')
```

    【Output】
    <type '_sre.SRE_Pattern'>
    <_sre.SRE_Pattern object at 0x7fe4783c7b58>
    ['abb']


正则编译的好处：速度更快。

# 2. re模块常用函数和方法

## 1. 不区分大小写匹配


```python
p = re.compile(r'ab*',re.I)
print '【Output】'
print p.findall('AbBbc')
```

    【Output】
    ['AbBb']


## 2. 字符串前加"r"，反斜杠"\"就不会被作任何特殊处理

即：如果字符串前带"r"，表示这是一个正则字符串，字符串里面用到的需要表示转义用途的"\"不用使用双重转义。


```python
s = 'a+++'
p1 = re.compile('\++')
p2 = re.compile('\\++')
p3 = re.compile(r'\++')
# p4 = re.compile(r'\\++')
print '【Output】'
print p1.findall(s)
print p2.findall(s)
print p3.findall(s)
# print p4.findall(s)
# 用p4来匹配会报错：error: multiple repeat
```

    【Output】
    ['+++']
    ['+++']
    ['+++']


## 3. 两个匹配函数

* match():判断正则是否在字符串开始位置出现。

* search()：判断正则是否在字符串任何位置出现。


```python
p = re.compile(r'aa')
print '【Output】'
print p.match('aabcd')
print p.match('bcaad')
print p.search('bcaad')
```

    【Output】
    <_sre.SRE_Match object at 0x7fe47020a098>
    None
    <_sre.SRE_Match object at 0x7fe47020a098>


## 4. 匹配查找函数

* findall()：找到正则匹配的所有子串，并作为列表返回。

* finditer()：找到正则匹配的所有子串，并作为迭代器返回。


```python
p = re.compile(r'\d')
s = 'a1b2c3d'
print '【Output】'
print p.findall(s)
print p.finditer(s)
for ss in p.finditer(s):
    print ss
    print ss.group()
```

    【Output】
    ['1', '2', '3']
    <callable-iterator object at 0x7fe4701ecb90>
    <_sre.SRE_Match object at 0x7fe47020a780>
    1
    <_sre.SRE_Match object at 0x7fe47020a6b0>
    2
    <_sre.SRE_Match object at 0x7fe47020a780>
    3


## 5. MatchObject实例方法


```python
p = re.compile(r'aa')
m = p.search('1aa2bb3aad')
print '【Output】'
print m.group()
print m.group(0)
#print m.group(1)  # IndexError: no such group，因为当前只有一个分组
print m.start()
print m.end()
print m.span()
```

    【Output】
    aa
    aa
    1
    3
    (1, 3)



```python
p = re.compile(r'age:(\d+),score:(\d+)')
info = 'age:15,score:98;age:20,score:100'
it = p.finditer(info)

print '【Output】'
for x in it:
    print 'info=({0}),age={1},score={2}'.format(x.group(0),x.group(1),x.group(2))
```

    【Output】
    info=(age:15,score:98),age=15,score=98
    info=(age:20,score:100),age=20,score=100


## 6. 其他re顶级函数

### (1) 匹配开头
re.match(pattern,str,flags = 0)

注：这里的pattern既可以直接使用正则字符串（r'...'），又可以使用编译后的正则(p = re.compile(r'...'))

### (2) 匹配所有位置
re.search(pattern,str,flags = 0)

re.search()函数和re.match()函数的不同用法举例：

![](http://images2017.cnblogs.com/blog/760572/201709/760572-20170923075632087-674478730.png)


### (3) 替换子串
re.sub(pattern,repl,str,count = 0,flags = 0)


```python
print '【Output】'
print re.sub(r'a.b','xxx','acb,ayb,acd,aub,dd',2)
# re.sub()是产生一个新的字符串，使用re.sub()函数替换后，并不会对原字符串产生影响
```

    【Output】
    xxx,xxx,acd,aub,dd

替换子串与后项引用的结合使用举例：

![](http://images2017.cnblogs.com/blog/760572/201709/760572-20170923075942103-58197310.png)

可以看出re.sub()函数的第二个参数支持对前面的正则分组的后向引用，值得注意的是，第二个参数如果需要进行后向引用，那么必须写成raw字符串（'r'开头的字符串），且字符串中的正则元字符（如'.'、'+'等）会被当成普通字符出现在结果中。

注：正则后向引用相关用法参见博文：[python正则表达式系列（4）——分组和后向引用](http://www.cnblogs.com/jiayongji/p/7118967.html)

### (4) 替换子串
re.subn(pattern,repl,str,count = 0,flags = 0)，作用同re.sub()函数，只不过subn()函数返回一个二元组，包含了替换后的字符串和替换次数。


```python
print '【Output】'
print re.subn(r'a.b','xxx','acb,ayb,acd,aub,dd')
```

    【Output】
    ('xxx,xxx,acd,xxx,dd', 3)


### (5) 字符串分割函数
re.split(pattern, string, maxsplit=0, flags=0)


```python
p = re.compile(r'[+\-*/]')
print '【Output】'
print re.split(p,'1+2-3*4/5')
```

    【Output】
    ['1', '2', '3', '4', '5']


### (6) 子串查找函数
re.findall(pattern, string, flags=0)


```python
print '【Output】'
print re.findall(r'a+','abbaaccaaa')
```

    【Output】
    ['a', 'aa', 'aaa']



```python
# 分组查找：
print '【Output】'
print re.findall(r'age=(\d+)','age=1,age=21')
```

    【Output】
    ['1', '21']]]></description></item><item><title>python爬虫系列（2）—— requests和BeautifulSoup库的基本用法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118939.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:48:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118939.html</guid><description><![CDATA[本文主要介绍python爬虫的两大利器：requests和BeautifulSoup库的基本用法。

# 1. 安装requests和BeautifulSoup库

可以通过3种方式安装：

* `easy_install`
* `pip`
* 下载源码手动安装

这里只介绍pip安装方式：

`pip install requests`
`pip install BeautifulSoup4`

# 2. requests基本用法示例


```python
# coding:utf-8
import requests

# 下载新浪新闻首页的内容
url = 'http://news.sina.com.cn/china/'
# 用get函数发送GET请求，获取响应
res = requests.get(url)
# 设置响应的编码格式utf-8（默认格式为ISO-8859-1），防止中文出现乱码
res.encoding = 'utf-8'

print type(res)
print res
print res.text

# 输出：
'''
<class 'requests.models.Response'>
<Response [200]>
<!DOCTYPE html>
<!-- [ published at 2017-04-19 23:30:28 ] -->
<html>
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title>国内新闻_新闻中心_新浪网</title>
<meta name="keywords" content="国内时政,内地新闻">
...
'''
```

下面将上面获取到的网页html内容写入到文件中，这里有一点需要注意的是：python是调用ASCII编码解码程序去处理字符流的，当字符不属于ASCII范围时会抛异常（ordinal not in range(128)），所以要提前设置程序的默认编码：


```python
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
```

然后再将响应的html内容存入文件中：


```python
with open('content.txt','w+') as f:
    f.write(res.text)
```

# 3. BeautifulSoup基本用法

## 1. 自定义测试html


```python
html = '''
<html>
    <body>
        <h1 id="title">Hello World</h1>
        <a href="#link1" class="link">This is link1</a>
        <a href="#link2" class="link">This is link2</a>
    </body>
</html>
'''
```

## 2. 从html文本中获取soup


```python
from bs4 import BeautifulSoup
# 这里指定解析器为html.parser（python默认的解析器），指定html文档编码为utf-8
soup = BeautifulSoup(html,'html.parser',from_encoding='utf-8')
print type(soup)

# 输出：<class 'bs4.BeautifulSoup'>
```

## 3. soup.select()函数用法

### (1) 获取指定标签的内容


```python
header = soup.select('h1')
print type(header)
print header
print header[0]
print type(header[0])
print header[0].text

# 输出：
'''
<type 'list'>
[<h1 id="title">Hello World</h1>]
<h1 id="title">Hello World</h1>
<class 'bs4.element.Tag'>
Hello World
'''
```


```python
alinks = soup.select('a')
print [x.text for x in alinks]

# 输出：[u'This is link1', u'This is link2']
```

### (2) 获取指定id的标签的内容（用'#'）


```python
title = soup.select('#title')
print type(title)
print title[0].text

# 输出：
'''
<type 'list'>
Hello World
'''
```

### (3) 获取指定class的标签的内容（用'.'）


```python
alinks = soup.select('.link')
print [x.text for x in alinks]

# 输出：[u'This is link1', u'This is link2']
```

### (4) 获取a标签的链接（href属性值）


```python
print alinks[0]['href']

# 输出：#link1
```

### (5) 获取一个标签下的所有子标签的text


```python
body = soup.select('body')[0]
print body.text

# 输出：
'''

Hello World
This is link1
This is link2
'''
```

### (6) 获取不存在的标签


```python
aa = soup.select('aa')
print aa

# 输出：[]
```

### (7) 获取自定义属性值


```python
html2 = '<a href="www.test.com" qoo="123" abc="456">This is a link.</a>'
soup2 = BeautifulSoup(html2,'html.parser')
alink = soup2.select('a')[0]
print alink['qoo']
print alink['abc']

# 输出：
'''
123
456
'''
```

## 4. soup.find()和soup.find_all()函数用法

### (1) find()和find_all()函数原型：

find和find_all函数都可根据多个条件从html文本中查找标签对象，只不过find的返回对象类型为bs4.element.Tag，为查找到的第一个满足条件的Tag；而find_all的返回对象为bs4.element.ResultSet（实际上就是Tag列表）,这里主要介绍find函数，find_all函数类似。

`find(name=None, attrs={}, recursive=True, text=None, **kwargs)`
注：其中name、attrs、text的值都支持正则匹配。

`find_all(name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)`
注：其中name、attrs、text的值都支持正则匹配。

### (2) find函数的用法示例


```python
html = '<p><a href="www.test.com" class="mylink1 mylink2">this is my link</a></p>'
soup = BeautifulSoup(html,'html.parser')
a1 = soup.find('a')
print type(a1)
# 输出：<class 'bs4.element.Tag'>

print a1.name
print a1['href']
print a1['class']
print a1.text
# 输出：
'''
a
www.test.com
[u'mylink1', u'mylink2']
this is my link
'''
```


```python
# 多个条件的正则匹配：
import re
a2 = soup.find(name = re.compile(r'\w+'),class_ = re.compile(r'mylink\d+'),text = re.compile(r'^this.+link$'))
# 注：这里的class属性之所以写成'class_'，是为了防止和python关键字class混淆，其他属性名写正常的名就行，不用这样特殊处理
print a2

# 输出：
'''
<a class="mylink1 mylink2" href="www.test.com">this is my link</a>
'''
```

```python
# find函数的链式调用
a3 = soup.find('p').find('a')
print a3

# 输出：
'''
<a class="mylink1 mylink2" href="www.test.com">this is my link</a>
'''
```

```python
# attrs参数的用法
# 注：支持正则匹配属性值（包括自定义属性）
import re
html = '<div class="myclass" my-attr="123abc"></div><div class="myclass" my-attr="abc">'
soup = BeautifulSoup(html,'html.parser')
div = soup.find('div',attrs = {'class':'myclass','my-attr':re.compile(r'\d+\w+')})
print div

# 输出：
'''
<div class="myclass" my-attr="123abc"></div>
'''
```

# 4. 网络爬虫基本架构
![这里写图片描述](http://img.blog.csdn.net/20170420081212006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

# 5. 补充

## 1. 代理访问

有时候为了避免封IP，或者在某些公司内网访问外网时候，需要用到代理服务器发送请求，代理的用法示例：


```python
import requests
proxies = {'http':'http://proxy.test.com:8080','https':'http://proxy.test.com:8080'}  # 其中proxy.test.com即为代理服务器的地址
url = 'https://www.baidu.com'  # 这个url为要访问的url
resp = requests.get(url,proxies = proxies)
```

如果代理服务器需要账号、密码，则可以这样写proxies：


```python
proxies = {'http':'http://{username}:{password}@proxy.test.com:8080','https':'http://{username}:{password}@proxy.test.com:8080'} 
```

## 2. 向https的url发送请求

有时候向https的url发送请求会报错：ImportError:no module named certifi.

解决方法：在发送请求时关闭校验：`verify = False`，如：


```python
resp = requests.get('https://test.com',verify = False)
```

注：也可通过在headers中传相关鉴权参数来解决此问题。

## 3. httpbin.org

httpbin.org是requests库的作者开发的一个网站，可以专门用来测试requests库的各种功能，其页面如下：
![这里写图片描述](http://img.blog.csdn.net/20170420081303163?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

但httpbin.org的服务器在国外，访问速度比较慢。所以需要在本地搭建一个该网站的镜像，方法如下：

1. 前提：安装好requests库，才能基于该网站测试requests库的功能。
2. `pip install gunicorn httpbin`
3. `gunicorn httpbin:app`
4. 浏览器输入：127.0.0.1:8000,即可访问。

注：以上步骤在windows下会报错：缺少模块pwd.fcanl，在linux下没问题。

## 4. requests库官方文档

http://docs.python-requests.org/en/master/]]></description></item><item><title>python爬虫系列（1）——一个简单的爬虫实例</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118934.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:47:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118934.html</guid><description><![CDATA[本文主要实现一个简单的爬虫，目的是从一个百度贴吧页面下载图片。

# 1. 概述

本文主要实现一个简单的爬虫，目的是从一个百度贴吧页面下载图片。下载图片的步骤如下：

1. 获取网页html文本内容；
2. 分析html中图片的html标签特征，用正则解析出所有的图片url链接列表；
3. 根据图片的url链接列表将图片下载到本地文件夹中。

# 2. urllib+re实现


```python
#!/usr/bin/python
# coding:utf-8
# 实现一个简单的爬虫，爬取百度贴吧图片
import urllib
import re

# 根据url获取网页html内容
def getHtmlContent(url):
    page = urllib.urlopen(url)
    return page.read()

# 从html中解析出所有jpg图片的url
# 百度贴吧html中jpg图片的url格式为：<img ... src="XXX.jpg" width=...>
def getJPGs(html):
    # 解析jpg图片url的正则
    jpgReg = re.compile(r'<img.+?src="(.+?\.jpg)" width')  # 注：这里最后加一个'width'是为了提高匹配精确度
    # 解析出jpg的url列表
    jpgs = re.findall(jpgReg,html)
    
    return jpgs

# 用图片url下载图片并保存成制定文件名
def downloadJPG(imgUrl,fileName):
    urllib.urlretrieve(imgUrl,fileName)
    
# 批量下载图片，默认保存到当前目录下
def batchDownloadJPGs(imgUrls,path = './'):
    # 用于给图片命名
    count = 1
    for url in imgUrls:
        downloadJPG(url,''.join([path,'{0}.jpg'.format(count)]))
        count = count + 1

# 封装：从百度贴吧网页下载图片
def download(url):
    html = getHtmlContent(url)
    jpgs = getJPGs(html)
    batchDownloadJPGs(jpgs)
    
def main():
    url = 'http://tieba.baidu.com/p/2256306796'
    download(url)
    
if __name__ == '__main__':
    main()
```

运行上面脚本，过几秒种之后完成下载，可以在当前目录下看到图片已经下载好了：
![这里写图片描述](http://img.blog.csdn.net/20170419080516782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

# 3. requests + re实现

下面用requests库实现下载，把getHtmlContent和downloadJPG函数都用requests重新实现。


```python
#!/usr/bin/python
# coding:utf-8
# 实现一个简单的爬虫，爬取百度贴吧图片
import requests
import re

# 根据url获取网页html内容
def getHtmlContent(url):
    page = requests.get(url)
    return page.text

# 从html中解析出所有jpg图片的url
# 百度贴吧html中jpg图片的url格式为：<img ... src="XXX.jpg" width=...>
def getJPGs(html):
    # 解析jpg图片url的正则
    jpgReg = re.compile(r'<img.+?src="(.+?\.jpg)" width')  # 注：这里最后加一个'width'是为了提高匹配精确度
    # 解析出jpg的url列表
    jpgs = re.findall(jpgReg,html)
    
    return jpgs

# 用图片url下载图片并保存成制定文件名
def downloadJPG(imgUrl,fileName):
    # 可自动关闭请求和响应的模块
    from contextlib import closing
    with closing(requests.get(imgUrl,stream = True)) as resp:
        with open(fileName,'wb') as f:
            for chunk in resp.iter_content(128):
                f.write(chunk)
    
# 批量下载图片，默认保存到当前目录下
def batchDownloadJPGs(imgUrls,path = './'):
    # 用于给图片命名
    count = 1
    for url in imgUrls:
        downloadJPG(url,''.join([path,'{0}.jpg'.format(count)]))
        print '下载完成第{0}张图片'.format(count)
        count = count + 1

# 封装：从百度贴吧网页下载图片
def download(url):
    html = getHtmlContent(url)
    jpgs = getJPGs(html)
    batchDownloadJPGs(jpgs)
    
def main():
    url = 'http://tieba.baidu.com/p/2256306796'
    download(url)
    
if __name__ == '__main__':
    main()
```
输出：和前面一样。]]></description></item><item><title>用python实现快速排序算法</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118927.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:45:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118927.html</guid><description><![CDATA[本文主要介绍用python实现基本的快速排序算法，体会一下python的快排代码可以写得多么简洁。

# 1. 三言两语概括算法核心思想

先从待排序的数组中找出一个数作为基准数（取第一个数即可），然后将原来的数组划分成两部分：小于基准数的左子数组和大于等于基准数的右子数组。然后对这两个子数组再递归重复上述过程，直到两个子数组的所有数都分别有序。最后返回“左子数组” + “基准数” + “右子数组”，即是最终排序好的数组。

# 2. Talk is cheap, show the code


```python
# 实现快排
def quicksort(nums):
    if len(nums) <= 1:
        return nums
    
    # 左子数组
    less = []
    # 右子数组
    greater = []
    # 基准数
    base = nums.pop()
    
    # 对原数组进行划分
    for x in nums:
        if x < base:
            less.append(x)
        else:
            greater.append(x)
    
    # 递归调用
    return quicksort(less) + [base] + quicksort(greater)

def main():
	nums = [6,1,2,7,9,3,4,5,10,8]
	print quicksort(nums)

main()

```
输出：
 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]></description></item><item><title>《利用Python进行数据分析》学习笔记系列——IPython</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118916.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:42:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118916.html</guid><description><![CDATA[本文主要介绍IPython这样一个交互工具的基本用法。
#1. 简介
　　IPython是《利用Python进行数据分析》一书中主要用到的Python开发环境，简单来说是对原生python交互环境的增强。作者进行Python开发最经典的开发环境搭配是：IPython外加一个文本编辑器，其实我自己平时写python代码也差不多是这样的开发环境：Windows系统下是IPython加notepad++，Linux系统下是IPython加vim，写起代码来体验很流畅，很容易获取到那种“流体验”。
　　书中讲到，IPython的设计目的是在交互式计算和软件开发这两个方面最大化地提高生产力，它鼓励一种“执行-探索”的工作模式，支持matplotlib等库的绘图操作。同时IPython还提供一个基于WEB的交互式浏览器开发环境，用起来也很不错。


#2. 基础用法
## 1. Tab键自动补全
　　和其他命令行环境的Tab自动补全功能类似，不过会隐藏那些以下划线开头的方法和属性（为了防止内容太多）。厉害的是哪怕是在python字符串中也可以自动补全类似文件路径的字符串。比如：
![这里写图片描述](http://img.blog.csdn.net/20170409232132758?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##2. 内省
在方法或变量的前面或后面加一个问号（?）就可以将有关该方法或变量的一些通用信息都显示出来，这叫做内省；使用”??”还可以显示函数的源代码。见下：
![这里写图片描述](http://img.blog.csdn.net/20170409232300117?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

![这里写图片描述](http://img.blog.csdn.net/20170409232312821?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

![这里写图片描述](http://img.blog.csdn.net/20170409232343571?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##3. ”?”和通配符结合使用搜索命名空间
![这里写图片描述](http://img.blog.csdn.net/20170409232416650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##4. %run命令
`%run xxx.py`：可以执行一个python脚本xxx.py，脚本是在一个空的命名空间中运行的。成功运行脚本后，在IPython中可以使用脚本中定义的变量和函数。
如果希望在脚本中能访问IPython之前定义的变量和函数，那么需要用-i参数执行：
`%run -i xxx.py`

##5. 执行剪贴板中的代码
`%paste`：直接执行。
`%cpaste`：可以修改后再执行。

##6. IPython键盘快捷键
（1）Ctrl + P或上箭头：后向搜索命令历史记录中以当前输入的文本开头的命令。
（2）Ctrl + N或下箭头：前向搜索命令历史记录中以当前输入的文本开头的命令。
（3）Ctrl + R：按行读取的反向历史搜索（部分匹配）。
（4）Ctrl + Shift + V：从剪贴板中粘贴文本。
（5）Ctrl + C：终止当前正在执行的代码。
（6）Ctrl + A：将光标移动到行首。
（7）Ctrl + E：将光标移动到行尾。
（8）Ctrl + K：删除从光标开始到行尾的文本。
（9）Ctrl + U：删除从行首到光标处的文本。
（10）Ctrl + F：将光标向前移动一个字符。
（11）Ctrl + B：将光标向后移动一个字符。
（12）Ctrl + L：清屏。

##7. 魔术命令
以”%”开头的一些命令，比如%run就是一个魔术命令，可以使用%run?来查看其详细用法。
（1）`%quickref`：显示IPython的快速参考。
（2）`%magic`：显示所有魔术命令的详细文档。
（3）`%debug`：从最新的异常跟踪的底部进入交互式调试器。
（4）`%hist`：打印命令的输入（可选输出）历史。
（5）`%pdb`：在异常发生后自动进入调试器。
（6）`%paste`：执行剪贴板中的python代码。
（7）`%cpaste`：打开一个特殊特提示符以便手工粘贴待执行的python代码。
（8）`%reset`：删除interactive命名空间中的全部变量/名称。
（9）`%page OBJECT`：通过分页器打印输出OBJECT。
（10）`%run xxx.py`：执行xxx.py脚本文件。
（11）`%prun statement`：通过cProfile执行statement，并打印分析器的输出结果。
（12）`%time statement`：计算statement的执行时间。
（13）`%timeit statement`：多次执行（次数可以通过参数配置）statement以计算平均执行时间。对那些执行时间非常短的代码很有用。
（14）`%who`：显示interactive命名空间中定义的变量，如下：
![这里写图片描述](http://img.blog.csdn.net/20170409232516996?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

（15）`%who_ls`：显示interactive命名空间中定义的变量（列表形式），如下：
![这里写图片描述](http://img.blog.csdn.net/20170409232548119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

（16）`%whos`：显示interactive命名空间中定义的变量（详情形式），如下：
![这里写图片描述](http://img.blog.csdn.net/20170409232613950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

（17）`%xdel variable`：删除变量variable，并尝试清除其在IPython中的对象上的一切引用。

##8. 打开pylab模式：
启动IPython时使用：`ipython --pylab`，这样就可以在IPython命令行中进行绘图等操作了，如下：
![这里写图片描述](http://img.blog.csdn.net/20170409232653167?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##9. 输入和输出变量
最近的两个输出结果分别保存在下划线和双下划线两个变量中，如下：
![这里写图片描述](http://img.blog.csdn.net/20170409232723843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##10. 记录输入输出过的变量
某一行的输入变量：_iX（X为行号）
某一行的输出变量：_X（X为行号）
见下：
![这里写图片描述](http://img.blog.csdn.net/20170409232748589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##11. 清理命名空间
当处理大数据集时，IPython的输入输出历史会影响到大量的变量的内存释放，所以及时用%xdel和%reset清理还是很有必要的。

##12. 记录日志
记录输入和输出日志：`%logstart -o`，将记录整个会话的日志（包括之前的命令），使用详情可以用?命令查看。

##13. 与操作系统交互
（1）`!cmd`：执行操作系统的shell命令。
（2）`output = !cmd`：执行shell命令，并将结果存到output中。
（3）`%alias new_name cmd`：为系统shell命令定义别名。
（4）`%bookmark`：使用IPython的目录书签系统。
（5）`%cd directory`：将工作目录切换到directory路径。
（6）`%pwd`：打印当前的工作目录。
（7）`%pushd directory`：将当前目录入栈，并转向目标目录。
（8）`%popd`：弹出栈顶目录，并转向该目录。
（9）`%dirs`：返回一个含有当前目录栈的列表。
（10）`%dhist`：打印目录访问历史。
（11）`%env`：以dict形式返回系统环境变量。

##14. 在执行shell命令时使用IPython环境中的变量
如下：
![这里写图片描述](http://img.blog.csdn.net/20170409233002841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)	

##15. 使用书签
如下：
![这里写图片描述](http://img.blog.csdn.net/20170409233036722?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

#3. 进阶用法
##1. 代码执行时间分析
命令：`%time`、`%timeit`，如下：
![这里写图片描述](http://img.blog.csdn.net/20170409233148669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

![这里写图片描述](http://img.blog.csdn.net/20170409233200982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

![这里写图片描述](http://img.blog.csdn.net/20170409233210982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

##2. IPython HTML Notebook
HTML Notebook是在浏览器中使用的交互式环境，现在最新版本又叫做Jupyter Notebook，功能很强大，完全是一个B/S模式的IDE，体验非常棒。可以用以下命令打开：
（1）安装notebook：`pip install notebook`
（2）在命令行中打开notebook：`ipython notebook`（或者：`jupyter notebook`）
（3）出现一个带token的url，把url复制到浏览器中，即出现如下页面：
![这里写图片描述](http://img.blog.csdn.net/20170409233242631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

（4）点击右上角的”New”—>python 2，即可打开交互式环境：
![这里写图片描述](http://img.blog.csdn.net/20170409233310897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

（5）在输入行中输入`%pylab inline`命令并执行（Shift + Enter快捷键），即可无缝集成matplotlib的绘图功能到页面中，如图：
![这里写图片描述](http://img.blog.csdn.net/20170411000124235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG54Ymp5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

> 注：Jupyter Notebook的更详细用法见另一篇博文：《利用Python进行数据分析》学习笔记系列——Jupyter Notebook

##3. IPython个性化配置
配置文件在如下目录：
Unix：~/.config/ipython/
Windows：%HOME%/.ipython/
根据配置文件中的注释，即可修改相应的配置。]]></description></item><item><title>动态规划系列（2）——找零钱问题</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118895.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:37:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118895.html</guid><description><![CDATA[> refer:http://interactivepython.org/courselib/static/pythonds/index.html

# 1. 问题描述

Tom在自动售货机上买了一瓶饮料，售价37美分，他投入了1美元（1美元 = 100美分），现在自动售货机需要找钱给他。售货机中现在只有四种面额的硬币：1美分、5美分、10美分、25美分，每种硬币的数量充足。现在要求使用最少数量的硬币，给Tom找钱，求出这个最少数量是多少。

# 2. 问题分析

自动售卖机需要给Tom找零钱63美分，而售卖机中只有四种面额的硬币可以使用，现在的核心问题就是如何用四种面额的硬币来凑够63美分，并且使用的硬币数量最少。

现在我们换个角度来思考这个问题：
是不是可以将问题规模先缩小？比如我不知道凑够63美分最少需要多少个硬币，那凑够1美分、2美分的方案则显而易见是可以马上知道的。
为了后面叙述方便，用f(i) = n这个等式来表示这样一种含义：凑够i美分（0 <= i <= 63）所需要的最少硬币数量为n个，那么我们从凑够0美分开始写：

* 凑0美分：因为0美分根本不需要硬币，因此结果是0：f(0) = 0；

* 凑1美分：因为有1美分面值的硬币可以使用，所以可以先用一个1美分硬币，然后再凑够0美分即可，而f(0)的值是我们已经算出来了的，所以：f(1) = 1 + f(0) = 1 + 0 = 1，这里f(1) = 1 + f(0) 中的1表示用一枚1美分的硬币；

* 凑2美分：此时四种面额的硬币中只有1美分比2美分小，所以只能先用一个1美分硬币，然后再凑够1美分即可，而f(1)的值我们也已经算出来了，所以：f(2) = 1 + f(1) = 1 + 1 = 2，这里f(2) = 1 + f(1) 中的1表示用一枚1美分的硬币；

* 凑3美分：和上一步同样的道理，f(3) = 1 + f(2) = 1 + 2 = 3；

* 凑4美分：和上一步同样的道理，f(4) = 1 + f(3) = 1 + 3 = 4；

* 凑5美分：这时就出现了不止一种选择了，因为有5美分面值的硬币。方案一：使用一个5美分的硬币，再凑够0美分即可，这时：f(5) = 1 + f(0) = 1 + 0 = 1，这里f(5) = 1 + f(0) 中的1表示用一枚5美分的硬币；方案二：使用1个1美分的硬币，然后再凑够4美分，此时：f(5) = 1 + f(4) = 1 + 4 = 5。综合方案一和方案二，可得：f(5) = min{1 + f(0),1 + f(4)} = 1；

* 凑6美分：此时也有两种方案可选，方案一：先用一个1美分，然后再凑够5美分即可，即：f(6) = 1 + f(5) = 1 + 1 = 2；方案二：先用一个5美分，然后再凑够1美分即可，即：f(6) = 1 + f(1) = 1 + 1 = 2。综合两种方案，有：f(6) = min{1 + f(5), 1 + f(1)} = 2；

* ...（省略）

从上面的分析过程可以看出，要凑够i美分，就要考虑如下各种方案的最小值：

1 + f(i - value[j])，其中value[j]表示第j种（j从0开始，0 <= j < 4）面值且value[j] <= i

那么现在就可以写出状态转移方程了：

f(i) = 0, i = 0

f(i) = 1, i = 1

f(i) = min{1 + f(i - value[j])}, i > 1，value[j] <= i

# 3. Talk is cheap, show the code

## 1. 基本版


```python
# coding:utf-8
# 找零钱问题算法实现：基本版

# 4种硬币面值
values = [1,5,10,25]

# 凑够amount这么多钱数需要的最少硬币个数
def minCoins(amount):
    # 需要的最少硬币个数
    ret_min = amount
    
    if amount < 1:
        ret_min = 0
    # 如果要找的钱数恰好是某种硬币的面值，那么最少只需一个硬币
    elif amount in values:
        ret_min = 1
    else:
        # 遍历面值数组中面值小于等于amount的那些元素
        for v in [x for x in values if x <= amount]:
            # 用面值为v的硬币+其他硬币找零所需的最少硬币数
            min_num = 1 + minCoins(amount - v)
            # 判断min_num和ret_min的大小，更新ret_min
            if min_num < ret_min:
                ret_min = min_num
                
    return ret_min

def main():
    print minCoins(63)
    
main()  
```

将上面脚本保存成coins.py文件，在ipython中执行：%time %run coins.py，得到的结果如下：

6

CPU times: user 1min 45s, sys: 0 ns, total: 1min 45s

Wall time: 1min 45s


分析：可以看出，在我的电脑上，仅仅是为了计算用4种面额找63美分零钱，就耗时1分钟45秒（105秒），这是无法忍受的。那么究竟为什么耗时这么巨大？下面对代码稍加改造进行一下性能分析。

## 2. 性能分析


```python
# coding:utf-8
# 找零钱问题算法实现：基本版性能分析

# 统计递归次数
recursion_num = 0

# 4种硬币面值
values = [1,5,10,25]

# 凑够amount这么多钱数需要的最少硬币个数
def minCoins(amount):
    global recursion_num
    
    # 需要的最少硬币个数
    ret_min = amount
    
    if amount < 1:
        ret_min = 0
    # 如果要找的钱数恰好是某种硬币的面值，那么最少只需一个硬币
    elif amount in values:
        ret_min = 1
    else:
        # 遍历面值数组中面值小于等于amount的那些元素
        for v in [x for x in values if x <= amount]:
            # 用面值为v的硬币+其他硬币找零所需的最少硬币数
            min_num = 1 + minCoins(amount - v)
            # 判断min_num和ret_min的大小，更新ret_min
            if min_num < ret_min:
                ret_min = min_num
    
    recursion_num += 1
    return ret_min

def main():
    print minCoins(63)
    print recursion_num
    
main()  
```

将上面脚本保存成coins.py文件，在ipython中执行：%time %run coins.py，得到的结果如下：

6

67716925

CPU times: user 2min, sys: 36 ms, total: 2min

Wall time: 2min


分析：可见，minCoins函数一共被递归调用了67716925次，真是难以想象，为了计算最多64个函数值（amount取0~63），居然递归调用了函数minCoins 67716925次，平均求每个值调用了1058076次。那么问题出在哪里了呢？出在了重复计算上，有很多值被重复计算了上百万次。那么如何尽量减少重复计算呢？下面用一个缓存数组来缓存每次求出的函数值，供后面使用，从而减少重复计算。

## 3. 性能优化版


```python
# coding:utf-8
# 找零钱问题算法实现：基本版性能分析

# 统计递归次数
recursion_num = 0

# 4种硬币面值
values = [1,5,10,25]

# 缓存数组，为一个一维数组，用于缓存每次递归函数求得的值
# cache[i]表示凑够i美分所需的最少硬币个数，cache的元素都被初始化为-1，表示个数未知
cache = []

# 初始化缓存数组
def init(amount):
    global cache
    cache = [-1] * (amount + 1)

# 凑够amount这么多钱数需要的最少硬币个数
def minCoins(amount):
    global recursion_num
    global cache
    
    # 需要的最少硬币个数
    ret_min = amount
    
    # 如果缓存数组中有对应的值，那么直接从中取，不再重复计算了
    if cache[amount] != -1:
        ret_min = cache[amount]
    elif amount < 1:
        ret_min = 0
    # 如果要找的钱数恰好是某种硬币的面值，那么最少只需一个硬币
    elif amount in values:
        ret_min = 1
    else:
        # 遍历面值数组中面值小于等于amount的那些元素
        for v in [x for x in values if x <= amount]:
            # 用面值为v的硬币+其他硬币找零所需的最少硬币数
            min_num = 1 + minCoins(amount - v)
            # 判断min_num和ret_min的大小，更新ret_min
            if min_num < ret_min:
                ret_min = min_num
    
    # 更新缓存数组
    cache[amount] = ret_min
    
    recursion_num += 1
    return ret_min

def main():
    init(63)
    print minCoins(63)
    print cache
    print recursion_num
    
main()  
```

将上面脚本保存成coins.py文件，在ipython中执行：%time %run coins.py，得到的结果如下：

6

[-1, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6]

206

CPU times: user 4 ms, sys: 0 ns, total: 4 ms

Wall time: 2.2 ms


分析：可见，cache数组除了cache[0]没被用到以外，其他元素都被利用到了，利用率还是很高的。使用缓存数组后，minCoins函数的递归调用次数从67716925次降低到了206次，降低了328722倍；程序耗时从105秒降低到了2.2ms，降低了47727倍，优化效果是巨大的。

上一篇动态规划之金矿模型中也使用到了缓存数组，优化效果也是巨大的，在本文中又一次看到了动态规划中缓存数组的重要性。]]></description></item><item><title>动态规划系列（1）——金矿模型的理解</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118870.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Tue, 04 Jul 2017 14:32:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7118870.html</guid><description><![CDATA[> refer：http://www.cnblogs.com/sdjl/articles/1274312.html

本文主要总结了引文中提出的金矿模型的思考方法，并用python代码来实现算法，从而加深了对动态规划思想的理解。

# 1. 故事描述

注：内容节选自开篇引文。

有一个国家，所有的国民都非常老实憨厚，某天他们在自己的国家发现了十座金矿，并且这十座金矿在地图上排成一条直线，国王知道这个消息后非常高兴，他希望能够把这些金子都挖出来造福国民，首先他把这些金矿按照在地图上的位置从西至东进行编号，依次为0、1、2、3、4、5、6、7、8、9，然后他命令他的手下去对每一座金矿进行勘测，以便知道挖取每一座金矿需要多少人力以及每座金矿能够挖出多少金子，然后动员国民都来挖金子。

* 题目补充1：挖每一座金矿需要的人数是固定的，多一个人少一个人都不行。国王知道每个金矿各需要多少人手，金矿i需要的人数为peopleNeeded[i]。
* 题目补充2：每一座金矿所挖出来的金子数是固定的，当第i座金矿有peopleNeeded[i]人去挖的话，就一定能恰好挖出gold[i]个金子。否则一个金子都挖不出来。
* 题目补充3：开采一座金矿的人完成开采工作后，他们不会再次去开采其它金矿，因此一个人最多只能使用一次。
* 题目补充4：国王在全国范围内仅招募到了10000名愿意为了国家去挖金子的人，因此这些人可能不够把所有的金子都挖出来，但是国王希望挖到的金子越多越好。
* 题目补充5：这个国家的每一个人都很老实（包括国王），不会私吞任何金子，也不会弄虚作假，不会说谎话。
* 题目补充6：有很多人拿到这个题后的第一反应就是对每一个金矿求出平均每个人能挖出多少金子，然后从高到低进行选择，这里要强调这种方法是错的，如果你也是这样想的，请考虑背包模型，当有一个背包的容量为10，共有3个物品，体积分别是3、3、5，价值分别是6、6、9，那么你的方法取到的是前两个物品，总价值是12，但明显最大值是后两个物品组成的15。
* 题目补充7：我们只需要知道最多可以挖出多少金子即可，而不用关心哪些金矿挖哪些金矿不挖。

那么，国王究竟如何知道在只有10000个人的情况下最多能挖出多少金子呢？

# 2. 问题抽象

注：内容节选自开篇引文。

输入文件名为“gold.in”。

输入文件第一行有两个数M和N，M是国王可用用来开采金矿的总人数，N是总共发现的金矿数。

输入文件的第2至N+1行每行有两个数，第i行的两个数分别表示第i-1个金矿需要的人数和可以得到的金子数。

输出文件仅一个整数，表示能够得到的最大金子数。

输入样例：

100 5

77 92

22 22

29 87

50 46

99 90

输出样例：

133

# 3. 分析
按照原博客中的思路进行分析，定义如下几个数组和函数：

* needed_people_num[i]：表示开采金矿i（注意：i从0开始，0 <= i < N，下同）所需的人数。
* gold_num[i]：表示开采金矿i能获取到的金子数。
* f(people_num,mine_num)：表示当用people_num个人挖第0~mine_num座金矿可以获取到的最大金子数。

状态转移方程如下：
注：其中将people\_num简记为：pn，mine\_num简记为：mn，needed\_people\_num[]简记为：npn[]，gold\_num简记为：gn

$$\begin{eqnarray}f(pn,mn)=\begin{cases}0,&mn = 0 且 pn < npn[mn]\cr gn[mn],&mn = 0 且 pn >= npn[mn]\cr
max\{f(pn,mn - 1),gn[mn] + f(pn - npn[mn], mn - 1)\},&other\end{cases}\end{eqnarray}$$

分析：

* mine_num = 0是边界条件，也是递归的结束条件。
* 因为有很多次递归会重复计算，所以考虑采用一个二维缓存数组（备忘录）来存储每次计算的结果值。

# 4. Talk is cheap, show you the code


```python
# coding:utf-8

# 可支配的总人数
total_people_num = 0
# 金矿总数
total_mine_num = 0
# 开采每个金矿所需的人数列表
needed_people_num = []
# 开采每个金矿可以获取到的金子数列表
gold_num = []
# 缓存数组，是一个二维数组，有total_people_num+1行，total_mine_num+1列
# 使用缓存数组是为了减少重复计算，cache[i][j]表示用i个人开采第0~j座金矿一共能开采到的金子总数最大值
# cache的所有元素都在一开始被初始化为-1，表示未知
# cache的使用可以极大地提高效率，减少很多重复计算
cache = []

# 初始化数据
def init():
    global total_people_num
    global total_mine_num
    global needed_people_num
    global gold_num
    global cache
    
    # 从gold.in文件中读取数据
    '''
    文件内容：
    100 5
    77 92
    22 22
    29 87
    50 46
    99 90
    '''
    datas = []
    with open('gold.in','r') as f_in:
        datas = f_in.readlines()
        
    # 解析出总人数和金矿数
    line1 = datas[0]
    total_people_num = int(line1.split()[0])
    total_mine_num = int(line1.split()[1])
    
    # 解析出needed_people_num和gold_num列表
    for line in datas[1:]:
        needed_people_num.append(int(line.split()[0]))
        gold_num.append(int(line.split()[1]))
        
    # 初始化cache数组，下面这种方式是有问题的：
    # cache_row = [-1] * (total_mine_num + 1)
    # cache = [cache_row] * (total_people_num + 1)
    # 要用这种方式（为了防止数组越界，都加了1）：
    cache = [([-1] * (total_mine_num + 1)) for i in range(total_people_num + 1)]
    
# 求最大金子数的函数
# get_max_gold_num(i,j)表示用i个人开采第0~j座金矿可以开采到的最大金子总数
def get_max_gold_num(people_n,mine_n):
    max_num = 0
    
    # 1. 如果缓存数组中有对应值，直接从中取
    if cache[people_n][mine_n] != -1:
        max_num = cache[people_n][mine_n]
    # 2. 如果只开采第0座金矿
    elif mine_n == 0:
        # 2.1 如果人数小于开采第0座金矿所需人数，那么结果就是0
        if people_n < needed_people_num[mine_n]:
            max_num = 0
        # 2.2 否则最终结果就是开采第0座金矿所能获取到的金子数     
        else:
            max_num = gold_num[mine_n]
    # 3. 如果不是第0座金矿且人数足够开采第mine_n座金矿，那么取下面两种开采策略所能获取到的最大金子数的较大值
    elif people_n >= needed_people_num[mine_n]:
        # 用people_n个人去开采第0~mine_n - 1座金矿所能获取到的最大金子数
        m = get_max_gold_num(people_n,mine_n - 1)
        # 用people_n个人去开采第0~mine_n座金矿所能获取到的金子数的最大值
        n = gold_num[mine_n] + get_max_gold_num(people_n - needed_people_num[mine_n],mine_n - 1)
        max_num = max(m,n)
    # 4. 如果不是第0座金矿且人数不够开采第mine_n座金矿，那只能采取第一种策略了：使用people_n个人开采其他的mine_n - 1座金矿
    else:
        max_num = get_max_gold_num(people_n,mine_n - 1)
        
    # 5. 给缓存数组对应元素赋值
    cache[people_n][mine_n] = max_num
    return max_num
            
def main():
    init()
    print get_max_gold_num(total_people_num,total_mine_num - 1)
    
main()
```
输出结果：
133]]></description></item><item><title>markdown测试</title><link>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7117572.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Tue, 04 Jul 2017 09:13:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/07/04/7117572.html</guid><description><![CDATA[# 测试博客园的markdown功能
## 还是喜欢博客园
* 博客园的markdown
测试一段代码：

```python
import os

with open('test.txt','r') as f:
    for x in list:
        pass

def func():
    print 'hello'
    return 111
```]]></description></item><item><title>Java HttpClient库的使用</title><link>http://www.cnblogs.com/jiayongji/archive/2017/02/20/6417930.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 19 Feb 2017 16:14:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/02/20/6417930.html</guid><description><![CDATA[<p><strong>（一）简介</strong></p>
<p>HttpClient是Apache的一个开源库，相比于JDK自带的URLConnection等，使用起来更灵活方便。</p>
<p>使用方法可以大致分为如下八步曲：</p>
<p>1、创建一个HttpClient对象;</p>
<p>2、创建一个Http请求对象并设置请求的URL，比如GET请求就创建一个HttpGet对象，POST请求就创建一个HttpPost对象;</p>
<p>3、如果需要可以设置请求对象的请求头参数，也可以往请求对象中添加请求参数;</p>
<p>4、调用HttpClient对象的execute方法执行请求;</p>
<p>5、获取请求响应对象和响应Entity;</p>
<p>6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</p>
<p>7、关闭响应对象;</p>
<p>8、关闭HttpClient.</p>
<p>&nbsp;</p>
<p><strong>（二）在本地创建一个Servlet程序</strong></p>
<p>在本地创建一个Servlet程序并跑在Tomcat服务器中，主要用于下一步测试HttpClient发送请求。</p>
<p>注：Servlet的创建方法详见：<a id="homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_2" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/6392078.html">微信公众号开发【技术基础】（一）：Eclipse+Tomcat搭建本地服务器并跑通HelloWorld程序</a></p>
<p>1、Servlet类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.PrintWriter;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.http.HttpServlet;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.http.HttpServletRequest;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.http.HttpServletResponse;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> HelloWorld <span style="color: #0000ff;">extends</span><span style="color: #000000;"> HttpServlet {
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">long</span> serialVersionUID = 4601029764222607869L<span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> doGet(HttpServletRequest req, HttpServletResponse resp) {
</span><span style="color: #008080;">12</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1. 设置编码格式</span>
<span style="color: #008080;">13</span>         resp.setContentType("text/html"<span style="color: #000000;">);
</span><span style="color: #008080;">14</span>         resp.setCharacterEncoding("UTF-8"<span style="color: #000000;">);
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2. 往返回体中写返回数据</span>
<span style="color: #008080;">17</span>         PrintWriter writer = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">18</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">19</span>             writer =<span style="color: #000000;"> resp.getWriter();
</span><span style="color: #008080;">20</span>             writer.print("Hello world! 你好，世界！！"<span style="color: #000000;">);
</span><span style="color: #008080;">21</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">22</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">23</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">24</span> <span style="color: #000000;">            writer.close();
</span><span style="color: #008080;">25</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">29</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> doPost(HttpServletRequest req, HttpServletResponse resp) {
</span><span style="color: #008080;">30</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1. 获取请求的参数</span>
<span style="color: #008080;">31</span>         String userName = req.getParameter("username"<span style="color: #000000;">);
</span><span style="color: #008080;">32</span>         String password = req.getParameter("password"<span style="color: #000000;">);
</span><span style="color: #008080;">33</span> 
<span style="color: #008080;">34</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2. 往返回体写返回数据</span>
<span style="color: #008080;">35</span>         PrintWriter writer = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">36</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">37</span>             writer =<span style="color: #000000;"> resp.getWriter();
</span><span style="color: #008080;">38</span>             writer.print("your username is:" + userName + "\nyour password is:" +<span style="color: #000000;"> password);
</span><span style="color: #008080;">39</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">40</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">41</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">42</span> <span style="color: #000000;">            writer.close();
</span><span style="color: #008080;">43</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">44</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span> }</pre>
</div>
<p>&nbsp;</p>
<p>2、web.xml（新加内容）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>helloWorld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-class</span><span style="color: #0000ff;">&gt;</span>com.servlet.HelloWorld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-class</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-mapping</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">7</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>helloWorld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">8</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">url-pattern</span><span style="color: #0000ff;">&gt;</span>/hello<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">url-pattern</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">9</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-mapping</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<p><strong>（三）测试HttpClient发送GET和POST请求</strong></p>
<p>1、HttpClient测试类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.test.method;
</span><span style="color: #008080;">  2</span> 
<span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;
</span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.UnsupportedEncodingException;
</span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;
</span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;
</span><span style="color: #008080;">  7</span> 
<span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.HttpEntity;
</span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.NameValuePair;
</span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.ParseException;
</span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.ClientProtocolException;
</span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.entity.UrlEncodedFormEntity;
</span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.methods.CloseableHttpResponse;
</span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.methods.HttpGet;
</span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.methods.HttpPost;
</span><span style="color: #008080;"> 16</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.impl.client.CloseableHttpClient;
</span><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.impl.client.HttpClients;
</span><span style="color: #008080;"> 18</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.message.BasicNameValuePair;
</span><span style="color: #008080;"> 19</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.util.EntityUtils;
</span><span style="color: #008080;"> 20</span> 
<span style="color: #008080;"> 21</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 22</span> <span style="color: #008000;"> * 测试HttpClient发送各种请求的方法
</span><span style="color: #008080;"> 23</span> <span style="color: #008000;"> * 
</span><span style="color: #008080;"> 24</span> <span style="color: #008000;"> * </span><span style="color: #808080;">@author</span><span style="color: #008000;"> Administrator
</span><span style="color: #008080;"> 25</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 26</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 27</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> HttpClientTest {
</span><span style="color: #008080;"> 28</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 发送请求的url</span>
<span style="color: #008080;"> 29</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String REQUEST_URL = "http://localhost:8080/TomcatTest/hello"<span style="color: #000000;">;
</span><span style="color: #008080;"> 30</span> 
<span style="color: #008080;"> 31</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 32</span> <span style="color: #008000;">     * 测试发送GET请求
</span><span style="color: #008080;"> 33</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 34</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> get() {
</span><span style="color: #008080;"> 35</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1. 创建一个默认的client实例</span>
<span style="color: #008080;"> 36</span>         CloseableHttpClient client =<span style="color: #000000;"> HttpClients.createDefault();
</span><span style="color: #008080;"> 37</span> 
<span style="color: #008080;"> 38</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 39</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2. 创建一个httpget对象</span>
<span style="color: #008080;"> 40</span>             HttpGet httpGet = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpGet(REQUEST_URL);
</span><span style="color: #008080;"> 41</span>             System.out.println("executing GET request " +<span style="color: #000000;"> httpGet.getURI());
</span><span style="color: #008080;"> 42</span> 
<span style="color: #008080;"> 43</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3. 执行GET请求并获取响应对象</span>
<span style="color: #008080;"> 44</span>             CloseableHttpResponse resp =<span style="color: #000000;"> client.execute(httpGet);
</span><span style="color: #008080;"> 45</span> 
<span style="color: #008080;"> 46</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 47</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 4. 获取响应体</span>
<span style="color: #008080;"> 48</span>                 HttpEntity entity =<span style="color: #000000;"> resp.getEntity();
</span><span style="color: #008080;"> 49</span>                 System.out.println("------"<span style="color: #000000;">);
</span><span style="color: #008080;"> 50</span> 
<span style="color: #008080;"> 51</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 5. 打印响应状态</span>
<span style="color: #008080;"> 52</span> <span style="color: #000000;">                System.out.println(resp.getStatusLine());
</span><span style="color: #008080;"> 53</span> 
<span style="color: #008080;"> 54</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 6. 打印响应长度和响应内容</span>
<span style="color: #008080;"> 55</span>                 <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> entity) {
</span><span style="color: #008080;"> 56</span>                     System.out.println("Response content length = " +<span style="color: #000000;"> entity.getContentLength());
</span><span style="color: #008080;"> 57</span>                     System.out.println("Response content is:\n" +<span style="color: #000000;"> EntityUtils.toString(entity));
</span><span style="color: #008080;"> 58</span> <span style="color: #000000;">                }
</span><span style="color: #008080;"> 59</span> 
<span style="color: #008080;"> 60</span>                 System.out.println("------"<span style="color: #000000;">);
</span><span style="color: #008080;"> 61</span>             } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 62</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 7. 无论请求成功与否都要关闭resp</span>
<span style="color: #008080;"> 63</span> <span style="color: #000000;">                resp.close();
</span><span style="color: #008080;"> 64</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 65</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ClientProtocolException e) {
</span><span style="color: #008080;"> 66</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;"> 67</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ParseException e) {
</span><span style="color: #008080;"> 68</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;"> 69</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
</span><span style="color: #008080;"> 70</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;"> 71</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 72</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 8. 最终要关闭连接，释放资源</span>
<span style="color: #008080;"> 73</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 74</span> <span style="color: #000000;">                client.close();
</span><span style="color: #008080;"> 75</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;"> 76</span> <span style="color: #000000;">                e.printStackTrace();
</span><span style="color: #008080;"> 77</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 78</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 79</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 80</span> 
<span style="color: #008080;"> 81</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 82</span> <span style="color: #008000;">     * 测试发送POST请求
</span><span style="color: #008080;"> 83</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 84</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> post() {
</span><span style="color: #008080;"> 85</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1. 获取默认的client实例</span>
<span style="color: #008080;"> 86</span>         CloseableHttpClient client =<span style="color: #000000;"> HttpClients.createDefault();
</span><span style="color: #008080;"> 87</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2. 创建httppost实例</span>
<span style="color: #008080;"> 88</span>         HttpPost httpPost = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpPost(REQUEST_URL);
</span><span style="color: #008080;"> 89</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3. 创建参数队列（键值对列表）</span>
<span style="color: #008080;"> 90</span>         List&lt;NameValuePair&gt; paramPairs = <span style="color: #0000ff;">new</span> ArrayList&lt;NameValuePair&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 91</span>         paramPairs.add(<span style="color: #0000ff;">new</span> BasicNameValuePair("username", "admin"<span style="color: #000000;">));
</span><span style="color: #008080;"> 92</span>         paramPairs.add(<span style="color: #0000ff;">new</span> BasicNameValuePair("password", "123456"<span style="color: #000000;">));
</span><span style="color: #008080;"> 93</span> 
<span style="color: #008080;"> 94</span> <span style="color: #000000;">        UrlEncodedFormEntity entity;
</span><span style="color: #008080;"> 95</span> 
<span style="color: #008080;"> 96</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 97</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 4. 将参数设置到entity对象中</span>
<span style="color: #008080;"> 98</span>             entity = <span style="color: #0000ff;">new</span> UrlEncodedFormEntity(paramPairs, "UTF-8"<span style="color: #000000;">);
</span><span style="color: #008080;"> 99</span> 
<span style="color: #008080;">100</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 5. 将entity对象设置到httppost对象中</span>
<span style="color: #008080;">101</span> <span style="color: #000000;">            httpPost.setEntity(entity);
</span><span style="color: #008080;">102</span> 
<span style="color: #008080;">103</span>             System.out.println("executing POST request " +<span style="color: #000000;"> httpPost.getURI());
</span><span style="color: #008080;">104</span> 
<span style="color: #008080;">105</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 6. 发送请求并回去响应</span>
<span style="color: #008080;">106</span>             CloseableHttpResponse resp =<span style="color: #000000;"> client.execute(httpPost);
</span><span style="color: #008080;">107</span> 
<span style="color: #008080;">108</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">109</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 7. 获取响应entity</span>
<span style="color: #008080;">110</span>                 HttpEntity respEntity =<span style="color: #000000;"> resp.getEntity();
</span><span style="color: #008080;">111</span> 
<span style="color: #008080;">112</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 8. 打印出响应内容</span>
<span style="color: #008080;">113</span>                 <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> respEntity) {
</span><span style="color: #008080;">114</span>                     System.out.println("------"<span style="color: #000000;">);
</span><span style="color: #008080;">115</span> <span style="color: #000000;">                    System.out.println(resp.getStatusLine());
</span><span style="color: #008080;">116</span>                     System.out.println("Response content is : \n" + EntityUtils.toString(respEntity, "UTF-8"<span style="color: #000000;">));
</span><span style="color: #008080;">117</span> 
<span style="color: #008080;">118</span>                     System.out.println("------"<span style="color: #000000;">);
</span><span style="color: #008080;">119</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">120</span>             } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">121</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 9. 关闭响应对象</span>
<span style="color: #008080;">122</span> <span style="color: #000000;">                resp.close();
</span><span style="color: #008080;">123</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">124</span> 
<span style="color: #008080;">125</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ClientProtocolException e) {
</span><span style="color: #008080;">126</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">127</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (UnsupportedEncodingException e) {
</span><span style="color: #008080;">128</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">129</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
</span><span style="color: #008080;">130</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">131</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">132</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 10. 关闭连接，释放资源</span>
<span style="color: #008080;">133</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">134</span> <span style="color: #000000;">                client.close();
</span><span style="color: #008080;">135</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">136</span> <span style="color: #000000;">                e.printStackTrace();
</span><span style="color: #008080;">137</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">138</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">139</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">140</span> 
<span style="color: #008080;">141</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;">142</span>         HttpClientTest test = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpClientTest();
</span><span style="color: #008080;">143</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 测试GET请求</span>
<span style="color: #008080;">144</span> <span style="color: #000000;">        test.get();
</span><span style="color: #008080;">145</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 测试POST请求</span>
<span style="color: #008080;">146</span> <span style="color: #000000;">        test.post();
</span><span style="color: #008080;">147</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">148</span> }</pre>
</div>
<p>&nbsp;</p>
<p>2、输出结果：</p>
<p>executing GET request <a href="http://localhost:8080/TomcatTest/hello">http://localhost:8080/TomcatTest/hello</a><br />------<br />HTTP/1.1 200 OK<br />Response content length = 34<br />Response content is:<br />Hello world! 你好，世界！！<br />------<br />executing POST request <a href="http://localhost:8080/TomcatTest/hello">http://localhost:8080/TomcatTest/hello</a><br />------<br />HTTP/1.1 200 OK<br />Response content is : <br />your username is:admin<br />your password is:123456<br />------</p>
<p>&nbsp;</p>
<p><strong>&nbsp;（四）jar包下载</strong></p>
<p>所需jar包打包下载地址：<a href="https://pan.baidu.com/s/1mhJ9iT6">https://pan.baidu.com/s/1mhJ9iT6</a></p>]]></description></item><item><title>Java-json系列（二）：用JSONObject解析和处理json数据</title><link>http://www.cnblogs.com/jiayongji/archive/2017/02/19/6417862.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 19 Feb 2017 15:44:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/02/19/6417862.html</guid><description><![CDATA[<p>本文中主要介绍JSONObject处理json数据时候的一些常用场景和方法。</p>
<p><strong>（一）jar包下载</strong></p>
<p>所需jar包打包下载百度网盘地址：<a href="https://pan.baidu.com/s/1c27Uyre">https://pan.baidu.com/s/1c27Uyre</a></p>
<p>&nbsp;</p>
<p><strong>（二）常见场景及处理方法</strong></p>
<p>1、解析简单的json字符串：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 简单的json测试字符串</span>
<span style="color: #008080;">2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String JSON_SIMPLE = "{'name':'tom','age':16}"<span style="color: #000000;">;
</span><span style="color: #008080;">3</span>         
<span style="color: #008080;">4</span>         JSONObject obj =<span style="color: #000000;"> JSONObject.fromObject(JSON_SIMPLE);
</span><span style="color: #008080;">5</span>         System.out.println("name is : " + obj.get("name"<span style="color: #000000;">));
</span><span style="color: #008080;">6</span>         System.out.println("age is : " + obj.get("age"));</pre>
</div>
<p>输出：</p>
<p>name is : tom<br />age is : 16</p>
<p>&nbsp;</p>
<p>2、解析嵌套的json字符串：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 嵌套的json字符串</span>
<span style="color: #008080;">2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String JSON_MULTI = "{'name':'tom','score':{'Math':98,'English':90}}"<span style="color: #000000;">;
</span><span style="color: #008080;">3</span>         JSONObject obj =<span style="color: #000000;"> JSONObject.fromObject(JSON_MULTI);
</span><span style="color: #008080;">4</span>         System.out.println("name is : " + obj.get("name"<span style="color: #000000;">));
</span><span style="color: #008080;">5</span>         System.out.println("score is : " + obj.get("score"<span style="color: #000000;">));
</span><span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span>         JSONObject scoreObj = (JSONObject) obj.get("score"<span style="color: #000000;">);
</span><span style="color: #008080;">8</span>         System.out.println("Math score is : " + scoreObj.get("Math"<span style="color: #000000;">));
</span><span style="color: #008080;">9</span>         System.out.println("English score is : " + scoreObj.get("English"));</pre>
</div>
<p>输出：</p>
<p>name is : tom<br />score is : {"English":90,"Math":98}<br />Math score is : 98<br />English score is : 90</p>
<p>&nbsp;</p>
<p>3、把bean对象转化成JSONObject对象：</p>
<p>Person、Info、Score类分别如下：（注：要定义成独立的三个public类，不能定义成内部类或非public类，否则会转换异常）</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Person {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Info info;
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
</span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Info getInfo() {
</span><span style="color: #008080;">15</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> info;
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setInfo(Info info) {
</span><span style="color: #008080;">19</span>         <span style="color: #0000ff;">this</span>.info =<span style="color: #000000;"> info;
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">23</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">24</span>         <span style="color: #0000ff;">return</span> "Person [name=" + name + ", info=" + info + "]"<span style="color: #000000;">;
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> }</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Info {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> age;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Score score;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getAge() {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> age;
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setAge(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Score getScore() {
</span><span style="color: #008080;">14</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> score;
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setScore(Score score) {
</span><span style="color: #008080;">18</span>         <span style="color: #0000ff;">this</span>.score =<span style="color: #000000;"> score;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">23</span>         <span style="color: #0000ff;">return</span> "Info [age=" + age + ", score=" + score + "]"<span style="color: #000000;">;
</span><span style="color: #008080;">24</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span> }</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Score {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String math;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String english;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getMath() {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> math;
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setMath(String math) {
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">this</span>.math =<span style="color: #000000;"> math;
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getEnglish() {
</span><span style="color: #008080;">14</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> english;
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setEnglish(String english) {
</span><span style="color: #008080;">18</span>         <span style="color: #0000ff;">this</span>.english =<span style="color: #000000;"> english;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">23</span>         <span style="color: #0000ff;">return</span> "Score [math=" + math + ", english=" + english + "]"<span style="color: #000000;">;
</span><span style="color: #008080;">24</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span> }</pre>
</div>
<p>转换方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>         Score score = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Score();
</span><span style="color: #008080;"> 2</span>         score.setEnglish("A"<span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>         score.setMath("B"<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>         Info info = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Info();
</span><span style="color: #008080;"> 6</span>         info.setAge(20<span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">        info.setScore(score);
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>         Person person = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Person();
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        person.setInfo(info);
</span><span style="color: #008080;">11</span>         person.setName("Tim"<span style="color: #000000;">);
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         JSONObject obj =<span style="color: #000000;"> JSONObject.fromObject(person);
</span><span style="color: #008080;">14</span>         System.out.println(obj.toString());</pre>
</div>
<p>输出：</p>
<p>&nbsp;{<br />&nbsp;&nbsp;&nbsp; "name": "Tim",<br />&nbsp;&nbsp;&nbsp; "info": {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "score": {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "english": "A",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "math": "B"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "age": 20<br />&nbsp;&nbsp;&nbsp; }<br />}</p>
<p>&nbsp;</p>
<p>4、把json数组转换成JsonObject数组：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 数组形式的json</span>
<span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String JSON_ARRAY = "[{'name':'tom'},{'name':'john','age':20},{}]"<span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>         JSONArray arr =<span style="color: #000000;"> JSONArray.fromObject(JSON_ARRAY);
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        System.out.println(arr);
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; arr.size(); i++<span style="color: #000000;">) {
</span><span style="color: #008080;"> 8</span>             JSONObject obj =<span style="color: #000000;"> arr.getJSONObject(i);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">            System.out.println(obj.toString());
</span><span style="color: #008080;">10</span>         }</pre>
</div>
<p>输出：</p>
<p>[{"name":"tom"},{"name":"john","age":20},{}]<br />{"name":"tom"}<br />{"name":"john","age":20}<br />{}</p>
<p>&nbsp;</p>
<p>5、构造一个json字符串：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>         JSONObject obj = <span style="color: #0000ff;">new</span><span style="color: #000000;"> JSONObject();
</span><span style="color: #008080;"> 2</span>         obj.put("name", "tom"<span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>         obj.put("age", 19<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 子对象</span>
<span style="color: #008080;"> 6</span>         JSONObject objContact = <span style="color: #0000ff;">new</span><span style="color: #000000;"> JSONObject();
</span><span style="color: #008080;"> 7</span>         objContact.put("tel", "123456"<span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span>         objContact.put("email", "tom@test.com"<span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span>         obj.put("contact"<span style="color: #000000;">, objContact);
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 子数组对象</span>
<span style="color: #008080;">12</span>         JSONArray scoreArr = <span style="color: #0000ff;">new</span><span style="color: #000000;"> JSONArray();
</span><span style="color: #008080;">13</span>         JSONObject objEnglish = <span style="color: #0000ff;">new</span><span style="color: #000000;"> JSONObject();
</span><span style="color: #008080;">14</span>         objEnglish.put("course", "english"<span style="color: #000000;">);
</span><span style="color: #008080;">15</span>         objEnglish.put("result", 100<span style="color: #000000;">);
</span><span style="color: #008080;">16</span>         objEnglish.put("level", "A"<span style="color: #000000;">);
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>         JSONObject objMath = <span style="color: #0000ff;">new</span><span style="color: #000000;"> JSONObject();
</span><span style="color: #008080;">19</span>         objMath.put("course", "math"<span style="color: #000000;">);
</span><span style="color: #008080;">20</span>         objMath.put("result", 50<span style="color: #000000;">);
</span><span style="color: #008080;">21</span>         objMath.put("level", "D"<span style="color: #000000;">);
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #000000;">        scoreArr.add(objEnglish);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        scoreArr.add(objMath);
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span>         obj.put("score"<span style="color: #000000;">, scoreArr);
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>         System.out.println(obj.toString());</pre>
</div>
<p>输出：</p>
<p>{<br />&nbsp;&nbsp;&nbsp; "score": [<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "result": 100,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "level": "A",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "course": "english"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "result": 50,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "level": "D",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "course": "math"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; ],<br />&nbsp;&nbsp;&nbsp; "contact": {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "tel": "123456",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "email": "<a href="mailto:tom@test.com">tom@test.com</a>"<br />&nbsp;&nbsp;&nbsp; },<br />&nbsp;&nbsp;&nbsp; "name": "tom",<br />&nbsp;&nbsp;&nbsp; "age": 19<br />}</p>
<p>思考：输出的json中的字段的顺序有没有办法设置？</p>
<p>&nbsp;</p>]]></description></item><item><title>百度应用引擎BAE的使用与应用部署</title><link>http://www.cnblogs.com/jiayongji/archive/2017/02/19/6414623.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sat, 18 Feb 2017 16:36:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/02/19/6414623.html</guid><description><![CDATA[<p>百度应用引擎（BAE）是百度推出的网络应用开发平台，开发者使用BAE不需要进行服务器的配置、维护等繁琐的工作，也不需要进行域名的申请、备案等工作，而只需要上传自己的WEB应用即可在公网上访问。使用及部署应用的步骤如下：</p>
<p>1、注册百度账号，并在百度云官网注册、审核成为开发者，还需要进行身份证实名认证才能申请BAE，实名认证审核大概需要2、3个工作日（以上步骤略，见官网介绍）。</p>
<p>百度云首页：<a href="https://cloud.baidu.com/">https://cloud.baidu.com/</a></p>
<p>&nbsp;</p>
<p>2、注册、审核通过之后，登录<a href="https://cloud.baidu.com/">https://cloud.baidu.com/</a>，点击页面上的&ldquo;管理控制台&rdquo;按钮进入控制台，然后点击右侧&ldquo;应用引擎BAE&rdquo;菜单，如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219002206144-2071234460.png" alt="" /></p>
<p>&nbsp;</p>
<p>3、点击下图中的&ldquo;添加部署&rdquo;，进入申请页面：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219002313832-1308403999.png" alt="" /></p>
<p>&nbsp;</p>
<p>4、添加部署页面主要填一些基础配置，重点是这几项，其他使用默认值即可：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219002447207-1342745101.png" alt="" /></p>
<p>其中域名和应用名称是自己填，类型我们选择java8-tomcat，代码版本工具选择SVN。</p>
<p>&nbsp;</p>
<p>5、最后是支付，BAE基础版每天的费用是0.4元，还是很划算的，可以在百度云账户中多充值几块钱，防止应用因欠费被停掉。</p>
<p>&nbsp;</p>
<p>6、支付完成后，过几分钟，应用就创建成功了，如图：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219002801050-1810864356.png" alt="" /></p>
<p>其中域名就是刚刚我们设置的域名，点击代码管理方式下的&ldquo;点击复制&rdquo;按钮，就可以复制远程代码库的地址，然后就可以把代码库使用SVN软件拉到本地代码仓库中了。</p>
<p>具体SVN的用法详见：<a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/6414592.html">微信公众号开发技术基础（四）：SVN代码版本管理工具的使用</a></p>
<p>&nbsp;</p>
<p>7、在本地Eclipse里创建一个Tomcat程序，具体的创建方法详见：<a id="homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_2" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/6392078.html">微信公众号开发技术基础（一）：Eclipse+Tomcat搭建本地服务器并跑通HelloWorld程序</a></p>
<p>然后在工程上点击右键-&gt;Export-&gt;WAR File，把导出路径设置为第6步中创建的本地SVN仓库的路径。</p>
<p>&nbsp;</p>
<p>8、Commit代码，然后到百度云控制台部署列表中点击应用的&ldquo;快捷发布&rdquo;按钮即可发布应用。</p>
<p>&nbsp;</p>
<p>9、在浏览器中输入应用的域名即可访问应用。</p>
<p>&nbsp;</p>]]></description></item><item><title>SVN代码版本管理工具的使用</title><link>http://www.cnblogs.com/jiayongji/archive/2017/02/19/6414592.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sat, 18 Feb 2017 16:09:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/02/19/6414592.html</guid><description><![CDATA[<p>SVN是一种代码版本管理工具，具有可视化的操作界面，使用简便，和git的功能类似。下面总结一下SVN的基本用法：</p>
<p>1、安装SVN软件，和安装一般的软件的步骤差不多，这里使用的版本是TortoiseSVN_1.9.5.27581_x64</p>
<p>百度网盘下载地址：<a href="https://pan.baidu.com/s/1boFNHk7">https://pan.baidu.com/s/1boFNHk7</a></p>
<p>&nbsp;</p>
<p>2、安装完成之后，电脑右键菜单中就会出现SVN的菜单选项：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170218234234066-1110607082.png" alt="" /></p>
<p>注：如果没有出现SVN的右键菜单，那么再重新执行一下安装包，并选择&ldquo;修复模式&rdquo;安装即可。</p>
<p>&nbsp;</p>
<p>3、拉远程代码库中的代码到本地并在本地创建SVN仓库：</p>
<p>在任何一个文件夹点击鼠标右键，然后点击右键菜单的&ldquo;SVN Checkout&rdquo;，弹出一个窗口如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170218235214660-1261121226.png" alt="" /></p>
<p>其中URL of repository是远程代码仓库的地址，Checkout directory即为本地当前文件夹的路径。</p>
<p>&nbsp;</p>
<p>4、点击第3步中的窗口的&ldquo;OK&rdquo;按钮，然后需要输入远程代码仓库的账号和密码（比如我这里是从百度应用引擎代码仓库上面拉代码，就需要输入百度账号密码），然后就可以把远程代码拉到本地并在本地创建好一个SVN仓库了。</p>
<p>&nbsp;</p>
<p>5、在本地仓库路径下可以在空白处点击右键&ldquo;SVN Update&rdquo;菜单更新代码，也可以用&ldquo;SVN Commit&rdquo;菜单提交代码。需要注意的时，当新增文件后，需要先将文件Add进SVN仓库再Commit，如下图：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170218235721425-2056370559.png" alt="" /></p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170218235736613-230307764.png" alt="" /></p>
<p>&nbsp;</p>
<p>6、提交代码：在空白处点击右键-&gt;&ldquo;SVN Commit&rdquo;</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170218235802160-63316315.png" alt="" /></p>
<p>注：其中的Message内容必须填写，不能为空，否则可能会提交不成功。</p>
<p>&nbsp;</p>
<p>7、经过以上几步之后就可以轻松地对远程代码进行代码的版本管理了。</p>
<p>&nbsp;</p>
<p>8、此外，如果远程代码库的账号密码更换了，或者换其他远程代码库了，那么可以先清空SVN配置中保存的账号信息再SVN Checkout，如下图：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219000151097-44472160.png" alt="" /></p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219000200285-2009399825.png" alt="" /></p>
<p>&nbsp;</p>
<p>9、还可以安装BCompare软件，这是一个代码比较工具，可以方便地比较不同版本的代码。安装完BCompare之后，可以将其安装路径添加到SVN的比较器中，如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219000433144-1360559161.png" alt="" /></p>
<p>&nbsp;</p>
<p>10、右键菜单还可以查看SVN的日志：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219000609535-854365510.png" alt="" /></p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170219000620910-1850258807.png" alt="" /></p>
<p>&nbsp;</p>
<p>11、如果不想用当前本地的代码仓库了，直接删除代码仓库所在的文件夹即可。</p>]]></description></item><item><title>外网映射工具ngrok的简介和使用</title><link>http://www.cnblogs.com/jiayongji/archive/2017/02/12/6392215.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 12 Feb 2017 15:33:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/02/12/6392215.html</guid><description><![CDATA[<p><strong>本文结构：</strong><br />（一）用法<br />（二）示例<br />（三）qydev ngrok的下载链接及相关网站</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 微信公众号开发的时候，微信服务器是需要访问我们的一个公网服务器地址的，但我们又是在本地调试自己的程序的，那怎样让微信服务器能访问到我们本地的服务器呢？那就需要用外网映射工具，将本地IP映射成公网IP，这样就能在公网上访问本地服务了，这里使用ngrok。ngrok原版程序的服务器是在国外的，访问速度极慢或者干脆访问不了，所以这里提供一个服务器搭建在国内的基于ngrok的一个软件：qydev，百度网盘下载链接见文章结尾。</p>
<p><strong>（一）用法</strong></p>
<p>1、在文末下载链接中下载windows版本的客户端，将ngrok.exe和ngrok.cfg两个文件解压到你喜欢的目录;<br />2、在cmd命令行下进入到上面两个文件所在的目录下;<br />3、执行命令：ngrok -config=ngrok.cfg -subdomain xxx 8080 //(xxx是你自定义的域名前缀);<br />4、如果开启成功，就可以使用<a href="http://xxx.tunnel.qydev.com/">http://xxx.tunnel.qydev.com</a>来访问你本机的127.0.0.1:8080 的服务了（比如本地Tomcat）;<br />5、如果你自己有顶级域名，想通过自己的域名来访问本机的项目，那么先将自己的顶级域名解析到123.57.165.240(域名需要已备案)，然后执行命令：ngrok -config=ngrok.cfg -hostname xxx.xxx.xxx 8080 //(xxx.xxx.xxx是你自定义的顶级域名)，如果开启成功，你就可以使用你的顶级域名来访问你本机的127.0.0.1:8080的服务啦。</p>
<p>&nbsp;</p>
<p><strong>（二）示例</strong></p>
<p>1、本地启动Tomcat程序，url为：<br /><a href="http://localhost:8080/TomcatTest/hello">http://localhost:8080/TomcatTest/hello</a></p>
<p>在浏览器中访问效果如图：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170216142641347-1312641472.png" alt="" /></p>
<p>注：如何创建及启动Tomcat程序，参见另一篇博客：<a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_1" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/6392078.html">微信公众号开发技术基础（一）：Eclipse+Tomcat搭建本地服务器并跑通HelloWorld程序</a></p>
<p>2、cmd窗口中切换到到ngrok.exe和ngrok.cfg所在目录，启动ngrok：</p>
<p>ngrok -config=ngrok.cfg -subdomain jyj 8080</p>
<p>如图：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170216142541832-1335354938.png" alt="" /></p>
<p>&nbsp;</p>
<p>3、浏览器访问：<a href="http://jyj.tunnel.qydev.com/TomcatTest/hello">http://jyj.tunnel.qydev.com/TomcatTest/hello</a>（这就是本地8080端口的外网访问地址）即可看到和访问localhost:8080/TomcatTest/hello一样的效果：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170216142556144-1649412174.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>（三）qydev ngrok的下载链接及相关网站</strong></p>
<p>1、qydev ngrok百度网盘下载链接：<a href="https://pan.baidu.com/s/1eS20qxs">https://pan.baidu.com/s/1eS20qxs</a></p>
<p>2、帮助网站：<a href="http://qydev.com/">http://qydev.com/</a></p>
<p>3、其他类似ngrok工具：<a href="http://ngrok.2bdata.com/">http://ngrok.2bdata.com/</a>&nbsp;用法都类似。</p>]]></description></item><item><title>Eclipse+Tomcat搭建本地服务器并跑通HelloWorld程序</title><link>http://www.cnblogs.com/jiayongji/archive/2017/02/12/6392078.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 12 Feb 2017 15:18:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2017/02/12/6392078.html</guid><description><![CDATA[<p><strong>本文结构：</strong><br />（一）环境准备<br />（二）在Eclipse里创建Dynamic Web工程<br />（三）写一个简单的Servlet类并配置web.xml<br />（四）运行程序</p>
<p>&nbsp;</p>
<p><strong>（一）环境准备</strong></p>
<p>1、Eclipse：要使用for JavaEE版本的Eclipse，因为要创建Dynamic Web（动态Web）程序，这里使用eclipse-jee-mars-1-win32-x86_64版本。Eclipse是绿色软件，下载后解压缩即可打开使用。</p>
<p>百度网盘下载链接：<a href="https://pan.baidu.com/s/1dFvaKrJ">https://pan.baidu.com/s/1dFvaKrJ</a></p>
<p>2、Tomcat：用于搭建本地服务器跑Servlet程序，这里使用apache-tomcat-7.0.75-windows-x64版本。Tomcat也是绿色软件，使用时只需把压缩包解压到自己喜欢的目录里即可。</p>
<p>百度网盘下载链接：<a href="https://pan.baidu.com/s/1bpiT6HL">https://pan.baidu.com/s/1bpiT6HL</a></p>
<p>&nbsp;</p>
<p><strong>（二）在Eclipse里创建Dynamic Web工程</strong></p>
<p>1、如图，新建一个Dynamic Web工程：&nbsp;</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225037307-2048273820.png" alt="" /></p>
<p>&nbsp;</p>
<p>2、只用填写图中红框中的几项即可，配置好了点"Next"按钮：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225054807-1991015318.png" alt="" /></p>
<p>其中第2步"Target Runtime"需要创建一个v7.0版本的Tomcat，如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225238072-1731523496.png" alt="" /></p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225252822-638000762.png" alt="" /></p>
<p>&nbsp;</p>
<p>3、点"Next"按钮：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225318619-153540558.png" alt="" /></p>
<p>&nbsp;</p>
<p>4、勾选上"Generate web.xml..."，然后点Finish按钮：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225448182-1302159106.png" alt="" /></p>
<p>&nbsp;</p>
<p>5、创建好的工程结构如下图，其中Servers是Tomcat的工程，不用管；TomcatTest是我们自己的工程，Java代码写在Java Resources目录中；WEB-INF目录下的lib目录主要存放第三方jar包，web.xml文件是Servlet的配置文件：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212225605213-1788245530.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>（三）写一个简单的Servlet类并配置web.xml</strong></p>
<p>&nbsp;下面我们就开始写一个最简单的Servlet类来实现输出Hello world的功能：</p>
<p>1、在Java Resources的src目录下创建一个com.servlet包，在其中创建一个HelloWorld类，继承自HttpServlet类，重写父类的doGet方法，代码如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212231522088-1435153158.png" alt="" /></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.servlet;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.PrintWriter;
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.ServletException;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.http.HttpServlet;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.http.HttpServletRequest;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.servlet.http.HttpServletResponse;
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> HelloWorld <span style="color: #0000ff;">extends</span><span style="color: #000000;"> HttpServlet {
</span><span style="color: #008080;">12</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">long</span> serialVersionUID = 4601029764222607869L<span style="color: #000000;">;
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">15</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> doGet(HttpServletRequest req, HttpServletResponse resp) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> ServletException, IOException {
</span><span style="color: #008080;">16</span>         resp.setContentType("text/html"<span style="color: #000000;">);
</span><span style="color: #008080;">17</span>         resp.setCharacterEncoding("UTF-8"<span style="color: #000000;">);
</span><span style="color: #008080;">18</span>         PrintWriter out =<span style="color: #000000;"> resp.getWriter();
</span><span style="color: #008080;">19</span>         out.print("Hello world! 你好，世界！"<span style="color: #000000;">);
</span><span style="color: #008080;">20</span> <span style="color: #000000;">        out.flush();
</span><span style="color: #008080;">21</span> <span style="color: #000000;">        out.close();
</span><span style="color: #008080;">22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> }</pre>
</div>
<p>&nbsp;</p>
<p>2、配置WEB-INF目录下的web.xml文件，在其web-app标签之间增加如下内容，其中url-pattern就是一会运行后访问的url的尾部：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>helloWorld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-class</span><span style="color: #0000ff;">&gt;</span>com.servlet.HelloWorld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-class</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-mapping</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">7</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>helloWorld<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">8</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">url-pattern</span><span style="color: #0000ff;">&gt;</span>/hello<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">url-pattern</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">9</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">servlet-mapping</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<p><strong>（四）运行程序</strong></p>
<p>1、右键点击TomcatTest工程，选择"Run as"-&gt;"Run on server"：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212230549182-1503567596.png" alt="" /></p>
<p>&nbsp;</p>
<p>2、选择创建工程时创建的Tomcat v7.0服务器，点击Finish按钮：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212230619463-951178940.png" alt="" /></p>
<p>&nbsp;</p>
<p>3、此时在控制台的Servers标签中就可以看到TomcatTest工程就已经被添加到了Tomcat服务器中，并且Tomcat已经开始运行了：</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212230641713-2756477.png" alt="" /></p>
<p>4、到浏览器中访问url：<a href="http://localhost:8080/TomcatTest/hello">http://localhost:8080/TomcatTest/hello</a> （Tomcat服务器默认是8080端口），就可以看到如下内容了，我们的HelloWorld程序也成功完成！</p>
<p><img src="http://images2015.cnblogs.com/blog/760572/201702/760572-20170212231020494-174524477.png" alt="" /></p>
<p>5、当修改Servlet类的内容后，要右键重启Tomcat服务器来进行更新，有时还需要清一下浏览器缓存才能看到更新后的内容（清理浏览器缓存快捷键：Ctrl + Shift + Delete）。</p>]]></description></item><item><title>Linux vi/vim编辑器常用命令与用法总结</title><link>http://www.cnblogs.com/jiayongji/archive/2016/08/21/5771444.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 21 Aug 2016 06:14:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/08/21/5771444.html</guid><description><![CDATA[<p><strong>（一）vi/vim是什么？</strong><br />Linux世界几乎所有的配置文件都是以纯文本形式存在的，而在所有的Linux发行版系统上都有vi编辑器，因此利用简单的文字编辑软件就能够轻松地修改系统的各种配置了，非常方便。vi就是一种功能强大的文本编辑器，而vim则是高级版的vi，不但可以用不同颜色显示文字内容，还能进行诸如shell脚本、C语言程序编辑等功能，可以作为程序编辑器。</p>
<p><strong>（二）为什么要学习vi/vim？</strong><br />首先所有的Linux发行版系统上都会默认内置vi编辑器，而不一定带有其他文本编辑器，非常通用；其次，很多软件的编辑接口都会默认调用vi；第三，vi具有程序编辑的能力；最后，vi程序简单，编辑速度相当快速。<br /><br /><strong>（三）vi的三种模式及各个模式之间的转换关系</strong></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201608/760572-20160821130431011-692046124.png" alt="" /></p>
<p><strong>（四）一般模式常用操作</strong><br />【h(或向左方向键)】 光标左移一个字符<br />【j(或向下方向键)】 光标下移一个字符<br />【k(或向上方向键)】 光标上移一个字符<br />【l(或向右方向键)】 光标右移一个字符</p>
<p>【[Ctrl] + f】 屏幕向下移动一页（相当于Page Down键）<br />【[Ctrl] + b】 屏幕向上移动一页（相当于Page Up键）</p>
<p>【[0]或[Home]】 光标移动到当前行的最前面<br />【[$]或[End]】 光标移动到当前行的末尾</p>
<p>【G】 光标移动到文件的最后一行（第一个字符处）<br />【nG】 n为数字（下同），移动到当前文件中第n行<br />【gg】 移动到文件的第一行，相当于"1G"<br />【n[Enter]】 光标向下移动n行</p>
<p>【/word】 在文件中查找内容为word的字符串（向下查找）<br />【?word】 在文件中查找内容为word的字符串（向上查找）<br />【[n]】 表示重复查找动作，即查找下一个<br />【[N]】 反向查找下一个<br />【:n1,n2s/word1/word2/g】 n1、n2为数字，在第n1行到第n2行之间查找word1字符串，并将其替换成word2<br />【:1,$s/word1/word2/g】 从第一行（第n行同理）到最后一行查找word1注册，并将其替换成word2<br />【:1,$s/word1/word2/gc】 功能同上，只不过每次替换时都会让用户确认</p>
<p>【x,X】 x为向后删除一个字符，相当于[Delete]，X为向前删除一个字符，相当于[Backspace]<br />【dd】 删除光标所在的一整行<br />【ndd】 删除光标所在的向下n行</p>
<p>【yy】 复制光标所在的那一行<br />【nyy】 复制光标所在的向下n行<br />【p,P】 p为将已经复制的数据在光标下一行粘贴；P为将已经复制的数据在光标上一行粘贴</p>
<p>【u】 撤消上一个操作<br />【[Ctrl] + r】 多次撤消<br />【.】 这是小数点键，重复上一个操作</p>
<p><strong>（五）一般模式切换到编辑模式的操作</strong><br />１、进入插入模式（６个命令）<br />【i】 从目前光标所在处插入<br />【I】 从目前光标<br />【a】 从当前光标所在的下一个字符处开始插入<br />【A】 从光标所在行的最后一个字符处开始插入<br />【o】 英文小写字母o，在目前光标所在行的下一行处插入新的一行并开始插入<br />【O】 英文大写字母O，在目前光标所在行的上一行处插入新的一行并开始插入<br />2、进入替换模式（2个命令）<br />【r】 只会替换光标所在的那一个字符一次<br />【R】 会一直替换光标所在字符，直到按下[ESC]键为止<br />【[ESC]】 退出编辑模式回到一般模式</p>
<p><strong>（六）一般模式切换到命令行模式</strong><br />【:w】 保存文件<br />【:w!】 若文件为只读，强制保存文件<br />【:q】 离开vi<br />【:q!】 不保存强制离开vi<br />【:wq】 保存后离开<br />【:wq!】 强制保存后离开<br />【:! command】 暂时离开vi到命令行下执行一个命令后的显示结果<br />【:set nu】 显示行号<br />【:set nonu】 取消显示行号<br />【:w newfile】 另存为</p>
<p><strong>（七）文件恢复模式</strong><br />【[O]pen Read-Only】 以只读方式打开文件<br />【[E]dit anyway】 用正常方式打开文件，不会载入暂存文件内容<br />【[R]ecover】 加载暂存文件内容<br />【[D]elete it】 用正常方式打开文件并删除暂存文件<br />【[Q]uit】 按下q就离开vi，不进行其他操作<br />【[A]bort】 与quit功能类似</p>
<p><strong>（八）块选择（一般模式下用）</strong><br />【v,V】 v:将光标经过的地方反白选择；V：将光标经过的行反白选择<br />【[Ctrl] + v】 块选择，可用长方形的方式选择文本<br />【y】 将反白的地方复制到剪贴板<br />【d】 将反白的内容删除</p>
<p><strong>（九）多文件编辑</strong><br />【vim file1 file2】 同时打开两个文件<br />【:n】 编辑下一个文件<br />【:N】 编辑上一个文件<br />【:files】 列出当前用vim打开的所有文件</p>
<p>（十）多窗口功能<br />【:sp [filename]】 打开一个新窗口，显示新文件，若只输入:sp，则两窗口显示同一个文件<br />【[Ctrl] + w + j】 光标移动到下方窗口<br />【[Ctrl] + w + k】 光标移动到上方窗口<br />【[Ctrl] + w + q】 离开当前窗口</p>
<p><strong>（十一）vim配置文件</strong><br />vim的配置文件为/etc/vimrc，但一般不建议直接修改这个文件，而是在用户根目录下创建一个新的隐藏文件：<br />vim ~/.vimrc<br />然后编辑这个文件，常用的配置如下：<br />"双引号后面的内容为注释<br />set nu "显示行号<br />set hlsearch "查找的字符串反白显示<br />set backspace=2 "可随时用退格键进行删除<br />set autoindent "自动缩排<br />set ruler "在最下方一行显示状态<br />set showmode "在左下角显示模式<br />set bg=dark "显示不同的底色，还可以为light<br />syntax on "语法检验，颜色显示</p>
<p><strong>（十二）Dos与Linux的断行字符（文件转化）</strong><br />dos2unix [-kn] file [newfile]<br />unix2dos [-kn] file [newfile]<br />-k:保留该文件原本的mtime时间格式<br />-n:保留原本旧文件，将转换后的内容输出到新文件</p>
<p><strong>（十三）语系编码转化</strong><br />iconv --list 列出iconv支持的语系编码<br />iconv -f 原本编码 -t 新编码 filename [-o new file]<br />-f:from,后接原本的编码格式<br />-t:to,后接新编码格式<br />-o file:可选参数，建立新文件<br />例：将/tmp/a.txt从big5编码格式转换成utf8编码格式：<br />iconv -f big5 -t utf8 /tmp/a.txt -o new.txt</p>
<p>&nbsp;</p>]]></description></item><item><title>收藏技术文章</title><link>http://www.cnblogs.com/jiayongji/archive/2016/08/14/5769323.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sat, 13 Aug 2016 16:24:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/08/14/5769323.html</guid><description><![CDATA[<p>http://www.hbcmm.com/infocenter/show.jsp?info_id=30629</p>
<p>http://vhs.custeel.com/shouye/common/viewArticle.jsp?articleID=4599050&amp;group=1006002</p>
<p>===</p>
<p>http://www.cnblogs.com/bubbleStar/p/6103350.html</p>
<p>http://www.cnblogs.com/hwaggLee/p/6278793.html</p>
<p>===</p>
<p>http://blog.csdn.net/javazejian/article/details/50878665 &nbsp;&nbsp;</p>
<p>http://www.jianshu.com/p/e7bb97218946</p>
<p>Activiti中文教程：http://www.mossle.com/docs/activiti/index.html#bpmnFirstExampleXml</p>
<p>&nbsp;</p>
<p>http://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html/</p>
<p>http://blog.csdn.net/w666666666/article/details/38231613</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>http://blog.csdn.net/zjx86320/article/details/50223005</p>
<p>http://www.mossle.com/docs/activiti/index.html#bpmnExclusiveGateway</p>
<p>&nbsp;</p>
<p>Java编程规范：</p>
<p><a href="http://blog.csdn.net/xinglu31/article/details/17549281">http://blog.csdn.net/xinglu31/article/details/17549281</a></p>
<p><a href="http://blog.csdn.net/u011073057/article/details/51881465">http://blog.csdn.net/u011073057/article/details/51881465</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">#</span><span style="color: #008000;">!/usr/bin/python</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;">#</span><span style="color: #008000;">coding:utf-8</span>
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> sys
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> requests
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">from</span> bs4 <span style="color: #0000ff;">import</span><span style="color: #000000;"> BeautifulSoup as BS
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> jieba
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">from</span> collections <span style="color: #0000ff;">import</span><span style="color: #000000;"> Counter
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> json
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #008000;">#</span><span style="color: #008000;"> 设置流处理为utf-8格式</span>
<span style="color: #008080;">11</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> setSysEncoding():
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    reload(sys)
</span><span style="color: #008080;">13</span>     sys.setdefaultencoding(<span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #008080;">14</span>     
<span style="color: #008080;">15</span> <span style="color: #008000;">#</span><span style="color: #008000;"> 获取网页页面html全文</span>
<span style="color: #008080;">16</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> getHtml(url):
</span><span style="color: #008080;">17</span>     res =<span style="color: #000000;"> requests.get(url)
</span><span style="color: #008080;">18</span>     res.encoding = <span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span>
<span style="color: #008080;">19</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> res.text
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #008000;">#</span><span style="color: #008000;"> 从html中解析出政府工作报告正文</span>
<span style="color: #008080;">22</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> getReportArticle(html):
</span><span style="color: #008080;">23</span>     soup = BS(html,<span style="color: #800000;">'</span><span style="color: #800000;">html.parser</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #008080;">24</span>     article = soup.select(<span style="color: #800000;">'</span><span style="color: #800000;">.article #UCAP-CONTENT</span><span style="color: #800000;">'</span><span style="color: #000000;">)[0]
</span><span style="color: #008080;">25</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> article.text 
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> <span style="color: #008000;">#</span><span style="color: #008000;"> 对文本进行分词</span>
<span style="color: #008080;">28</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> cutText(text):
</span><span style="color: #008080;">29</span>     cutList = jieba.cut(text.lower(),cut_all =<span style="color: #000000;"> True) 
</span><span style="color: #008080;">30</span>     <span style="color: #0000ff;">return</span> [word <span style="color: #0000ff;">for</span> word <span style="color: #0000ff;">in</span> cutList <span style="color: #0000ff;">if</span> len(word) &gt;= 2<span style="color: #000000;">]
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span> <span style="color: #008000;">#</span><span style="color: #008000;"> 统计出一个分词结果列表中出现数量最多的前n个关键词和出现数量</span>
<span style="color: #008080;">33</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> analyzeFrequency(cutList,n):
</span><span style="color: #008080;">34</span>     counter =<span style="color: #000000;"> Counter(cutList)
</span><span style="color: #008080;">35</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> counter.most_common(n)
</span><span style="color: #008080;">36</span> 
<span style="color: #008080;">37</span> <span style="color: #008000;">#</span><span style="color: #008000;"> 主方法</span>
<span style="color: #008080;">38</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> main():
</span><span style="color: #008080;">39</span> <span style="color: #000000;">    setSysEncoding()
</span><span style="color: #008080;">40</span> 
<span style="color: #008080;">41</span>     reportUrl = <span style="color: #800000;">'</span><span style="color: #800000;">http://www.gov.cn/guowuyuan/2016-03/05/content_5049372.htm</span><span style="color: #800000;">'</span>
<span style="color: #008080;">42</span>     html =<span style="color: #000000;"> getHtml(reportUrl)
</span><span style="color: #008080;">43</span>     article =<span style="color: #000000;"> getReportArticle(html)
</span><span style="color: #008080;">44</span>     ret = analyzeFrequency(cutText(article),30<span style="color: #000000;">)
</span><span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span>     with open(<span style="color: #800000;">'</span><span style="color: #800000;">out.txt</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">w+</span><span style="color: #800000;">'</span><span style="color: #000000;">) as f_out:
</span><span style="color: #008080;">47</span>         f_out.write(json.dumps(ret,encoding=<span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span>,ensure_ascii=<span style="color: #000000;">False))
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span> <span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
</span><span style="color: #008080;">50</span>     main()</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>Java正则表达式基础整理</title><link>http://www.cnblogs.com/jiayongji/archive/2016/06/24/5613846.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Fri, 24 Jun 2016 04:35:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/06/24/5613846.html</guid><description><![CDATA[<p><strong>（一）正则表达式及语法简介</strong></p>
<ol>
<li>String类使用正则表达式的几个方法：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624121234500-1529311826.png" alt="" /></li>
<li>正则表达式支持的合法字符：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624121432047-1075057387.png" alt="" /></li>
<li>特殊字符：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624121542750-1524625460.png" alt="" /></li>
<li>预定义字符：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624121738438-1993234321.png" alt="" /></li>
<li>方括号表达式：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624121919985-1756833077.png" alt="" /><img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624121930969-1689811836.png" alt="" /></li>
<li>圆括号表达式：用于将多个表达式组成一个子表达式，可以使用或运算符&ldquo;|&rdquo;，比如正则表达式："(aa|bb|cc)"就表示匹配"aa"、"bb"、"cc"三个字符串中的其中一个。</li>
<li>边界匹配符：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624122302094-192508106.png" alt="" /></li>
<li>贪婪、勉强、占有模式的数量标识符：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624194632953-1377945357.png" alt="" /></li>
</ol>
<p><strong>（二）Java正则表达式的简单用法</strong></p>
<ol>
<li>两个关键类：（1）Pattern：正则表达式编译后在内存中的表示形式。是不可变类，可供多个线程并发使用；（2）Matcher：保存执行匹配所涉及的各种状态，多个Matcher对象可以共享一个Pattern对象。</li>
<li>简单用法程序示例：
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> System.out.println(Pattern.matches("a\\wb", "a_b")); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：true</span>
<span style="color: #008080;">2</span> Pattern p = Pattern.compile("a*b"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> Matcher m = p.matcher("aabzaaadaaafbc"<span style="color: #000000;">);
</span><span style="color: #008080;">4</span> System.out.println(m.matches()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：false</span></pre>
</div>
<p>&nbsp;</p>
</li>
<li>
<p>Matcher类的常用方法：<img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160624123236906-1083809111.png" alt="" width="929" height="235" /></p>
</li>
<li>程序举例：
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> test1() {
</span><span style="color: #008080;"> 2</span>         System.out.println(Pattern.matches("a\\wb", "a_b")); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：true</span>
<span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>         Pattern p = Pattern.compile("a*b"<span style="color: #000000;">);
</span><span style="color: #008080;"> 5</span>         Matcher m = p.matcher("aabzaaadaaafbc"<span style="color: #000000;">);
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>         System.out.println(m.matches()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：false</span>
<span style="color: #008080;"> 8</span>         System.out.println(m.find()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：true</span>
<span style="color: #008080;"> 9</span>         System.out.println(m.group()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：b</span>
<span style="color: #008080;">10</span>         System.out.println(m.start()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：2</span>
<span style="color: #008080;">11</span>         System.out.println(m.end()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：3</span>
<span style="color: #008080;">12</span>         System.out.println(m.lookingAt()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：true</span>
<span style="color: #008080;">13</span>         m.reset("zab"<span style="color: #000000;">);
</span><span style="color: #008080;">14</span>         System.out.println(m.lookingAt()); <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：false</span>
<span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> test2() {
</span><span style="color: #008080;">18</span>         Matcher m = Pattern.compile("\\w+").matcher("Java is very easy!"<span style="color: #000000;">);
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>         <span style="color: #0000ff;">while</span><span style="color: #000000;"> (m.find()) {
</span><span style="color: #008080;">21</span>             System.out.println(m.group() + "子串的起始位置：" + m.start() + ",结束位置："
<span style="color: #008080;">22</span>                     +<span style="color: #000000;"> m.end());
</span><span style="color: #008080;">23</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>         <span style="color: #0000ff;">int</span> i = 0<span style="color: #000000;">;
</span><span style="color: #008080;">26</span>         <span style="color: #0000ff;">while</span><span style="color: #000000;"> (m.find(i)) {
</span><span style="color: #008080;">27</span>             System.out.print(m.group() + "\t"<span style="color: #000000;">);
</span><span style="color: #008080;">28</span>             i++<span style="color: #000000;">;
</span><span style="color: #008080;">29</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：
</span><span style="color: #008080;">32</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Java子串的起始位置：0,结束位置：4
</span><span style="color: #008080;">33</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> is子串的起始位置：5,结束位置：7
</span><span style="color: #008080;">34</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> very子串的起始位置：8,结束位置：12
</span><span style="color: #008080;">35</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> easy子串的起始位置：13,结束位置：17
</span><span style="color: #008080;">36</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Java ava va a is is s very very ery ry y easy easy asy sy y</span>
<span style="color: #008080;">37</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> test3() {
</span><span style="color: #008080;">40</span>         String[] mails = { "Jiayongji@163.com", "Jiayongji@gmail.com"<span style="color: #000000;">,
</span><span style="color: #008080;">41</span>                 "jy@hust.org", "wawa@abc.cc"<span style="color: #000000;"> };
</span><span style="color: #008080;">42</span>         String mailRegEx = "\\w{3,20}@\\w+\\.(com|cn|edu|org|net|gov)"<span style="color: #000000;">;
</span><span style="color: #008080;">43</span>         Pattern mailPattern =<span style="color: #000000;"> Pattern.compile(mailRegEx);
</span><span style="color: #008080;">44</span> 
<span style="color: #008080;">45</span>         Matcher mailMatcher = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">46</span> 
<span style="color: #008080;">47</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String mail : mails) {
</span><span style="color: #008080;">48</span>             <span style="color: #0000ff;">if</span> (mailMatcher == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">49</span>                 mailMatcher =<span style="color: #000000;"> mailPattern.matcher(mail);
</span><span style="color: #008080;">50</span>             } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">51</span> <span style="color: #000000;">                mailMatcher.reset(mail);
</span><span style="color: #008080;">52</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">53</span> 
<span style="color: #008080;">54</span>             System.out.println(mail + (mailMatcher.matches() ? "是" : "不是"<span style="color: #000000;">)
</span><span style="color: #008080;">55</span>                     + "一个合法的邮箱地址"<span style="color: #000000;">);
</span><span style="color: #008080;">56</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">57</span> 
<span style="color: #008080;">58</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：
</span><span style="color: #008080;">59</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Jiayongji@163.com是一个合法的邮箱地址
</span><span style="color: #008080;">60</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Jiayongji@gmail.com是一个合法的邮箱地址
</span><span style="color: #008080;">61</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> jy@hust.org不是一个合法的邮箱地址
</span><span style="color: #008080;">62</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> wawa@abc.cc不是一个合法的邮箱地址</span>
<span style="color: #008080;">63</span> 
<span style="color: #008080;">64</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">65</span> 
<span style="color: #008080;">66</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> test4() {
</span><span style="color: #008080;">67</span>         Matcher m = Pattern.compile("\\bre\\w*"<span style="color: #000000;">).matcher(
</span><span style="color: #008080;">68</span>                 "Java is real good at inrestart and regex."<span style="color: #000000;">);
</span><span style="color: #008080;">69</span>         System.out.println(m.replaceAll("哈哈"<span style="color: #000000;">));
</span><span style="color: #008080;">70</span> 
<span style="color: #008080;">71</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 输出：
</span><span style="color: #008080;">72</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Java is 哈哈 good at inrestart and 哈哈.</span>
<span style="color: #008080;">73</span> 
<span style="color: #008080;">74</span>     }</pre>
</div>
<p>&nbsp;</p>
</li>
</ol>
<p>Refer：《疯狂Java讲义（第二版）》</p>
<p style="text-align: center;">（完）</p>]]></description></item><item><title>Android自定义View的三种实现方式</title><link>http://www.cnblogs.com/jiayongji/archive/2016/06/05/5560806.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 05 Jun 2016 06:51:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/06/05/5560806.html</guid><description><![CDATA[<p>　　在毕设项目中多处用到自定义控件，一直打算总结一下自定义控件的实现方式，今天就来总结一下吧。在此之前学习了郭霖大神博客上面关于自定义View的几篇博文，感觉受益良多，本文中就参考了其中的一些内容。</p>
<p>　　总结来说，自定义控件的实现有三种方式，分别是：组合控件、自绘控件和继承控件。下面将分别对这三种方式进行介绍。</p>
<p><strong>（一）组合控件</strong></p>
<p>　　组合控件，顾名思义就是将一些小的控件组合起来形成一个新的控件，这些小的控件多是系统自带的控件。比如很多应用中普遍使用的标题栏控件，其实用的就是组合控件，那么下面将通过实现一个简单的标题栏自定义控件来说说组合控件的用法。</p>
<p>1、新建一个Android项目，创建自定义标题栏的布局文件title_bar.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1 <span style="color: #0000ff;">&lt;?<span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"<span style="color: #0000ff;">?&gt;
<span style="color: #008080;"> 2 <span style="color: #0000ff;">&lt;<span style="color: #800000;">RelativeLayout <span style="color: #ff0000;">xmlns:android<span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"
<span style="color: #008080;"> 3 <span style="color: #ff0000;">    android:layout_width<span style="color: #0000ff;">="match_parent"
<span style="color: #008080;"> 4 <span style="color: #ff0000;">    android:layout_height<span style="color: #0000ff;">="wrap_content"
<span style="color: #008080;"> 5 <span style="color: #ff0000;">    android:background<span style="color: #0000ff;">="#0000ff" <span style="color: #0000ff;">&gt;
<span style="color: #008080;"> 6 
<span style="color: #008080;"> 7     <span style="color: #0000ff;">&lt;<span style="color: #800000;">Button
<span style="color: #008080;"> 8         <span style="color: #ff0000;">android:id<span style="color: #0000ff;">="@+id/left_btn"
<span style="color: #008080;"> 9 <span style="color: #ff0000;">        android:layout_width<span style="color: #0000ff;">="wrap_content"
<span style="color: #008080;">10 <span style="color: #ff0000;">        android:layout_height<span style="color: #0000ff;">="wrap_content"
<span style="color: #008080;">11 <span style="color: #ff0000;">        android:layout_centerVertical<span style="color: #0000ff;">="true"
<span style="color: #008080;">12 <span style="color: #ff0000;">        android:layout_margin<span style="color: #0000ff;">="5dp"
<span style="color: #008080;">13 <span style="color: #ff0000;">        android:background<span style="color: #0000ff;">="@drawable/back1_64" <span style="color: #0000ff;">/&gt;
<span style="color: #008080;">14 
<span style="color: #008080;">15     <span style="color: #0000ff;">&lt;<span style="color: #800000;">TextView
<span style="color: #008080;">16         <span style="color: #ff0000;">android:id<span style="color: #0000ff;">="@+id/title_tv"
<span style="color: #008080;">17 <span style="color: #ff0000;">        android:layout_width<span style="color: #0000ff;">="wrap_content"
<span style="color: #008080;">18 <span style="color: #ff0000;">        android:layout_height<span style="color: #0000ff;">="wrap_content"
<span style="color: #008080;">19 <span style="color: #ff0000;">        android:layout_centerInParent<span style="color: #0000ff;">="true"
<span style="color: #008080;">20 <span style="color: #ff0000;">        android:text<span style="color: #0000ff;">="这是标题"
<span style="color: #008080;">21 <span style="color: #ff0000;">        android:textColor<span style="color: #0000ff;">="#ffffff"
<span style="color: #008080;">22 <span style="color: #ff0000;">        android:textSize<span style="color: #0000ff;">="20sp" <span style="color: #0000ff;">/&gt;
<span style="color: #008080;">23 
<span style="color: #008080;">24 <span style="color: #0000ff;">&lt;/<span style="color: #800000;">RelativeLayout<span style="color: #0000ff;">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>　　可见这个标题栏控件还是比较简单的，其中在左边有一个返回按钮，背景是一张事先准备好的图片back1_64.png，标题栏中间是标题文字。</p>
<p>2、创建一个类TitleView，继承自RelativeLayout：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> TitleView <span style="color: #0000ff;">extends</span><span style="color: #000000;"> RelativeLayout {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 返回按钮控件</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button mLeftBtn;
</span><span style="color: #008080;"> 5</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 标题Tv</span>
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> TextView mTitleTv;
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> TitleView(Context context, AttributeSet attrs) {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 加载布局</span>
<span style="color: #008080;">12</span>         LayoutInflater.from(context).inflate(R.layout.title_bar, <span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 获取控件</span>
<span style="color: #008080;">15</span>         mLeftBtn =<span style="color: #000000;"> (Button) findViewById(R.id.left_btn);
</span><span style="color: #008080;">16</span>         mTitleTv =<span style="color: #000000;"> (TextView) findViewById(R.id.title_tv);
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 为左侧返回按钮添加自定义点击事件</span>
<span style="color: #008080;">21</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setLeftButtonListener(OnClickListener listener) {
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        mLeftBtn.setOnClickListener(listener);
</span><span style="color: #008080;">23</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 设置标题的方法</span>
<span style="color: #008080;">26</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setTitleText(String title) {
</span><span style="color: #008080;">27</span> <span style="color: #000000;">        mTitleTv.setText(title);
</span><span style="color: #008080;">28</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">29</span> }</pre>
</div>
<p>　　在TitleView中主要是为自定义的标题栏加载了布局，为返回按钮添加事件监听方法，并提供了设置标题文本的方法。</p>
<p>3、在activity_main.xml中引入自定义的标题栏：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:id</span><span style="color: #0000ff;">="@+id/main_layout"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">com.example.test.TitleView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/title_bar"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">com.example.test.TitleView</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>4、在MainActivity中获取自定义的标题栏，并且为返回按钮添加自定义点击事件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　 <span style="color: #0000ff;">private</span><span style="color: #000000;"> TitleView mTitleBar;
</span><span style="color: #008080;"> 2</span> 　　　　 mTitleBar =<span style="color: #000000;"> (TitleView) findViewById(R.id.title_bar);
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>         mTitleBar.setLeftButtonListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 8</span>                 Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>, "点击了返回按钮"<span style="color: #000000;">, Toast.LENGTH_SHORT)
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">                        .show();
</span><span style="color: #008080;">10</span> <span style="color: #000000;">                finish();
</span><span style="color: #008080;">11</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">12</span>         });</pre>
</div>
<p>5、运行效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160605232953664-1520267109.png" alt="" />　　</p>
<p>　　这样就用组合的方式实现了自定义标题栏，其实经过更多的组合还可以创建出功能更为复杂的自定义控件，比如自定义搜索栏等。</p>
<p>&nbsp;</p>
<p><strong>（二）自绘控件</strong></p>
<p><strong>　　</strong>自绘控件的内容都是自己绘制出来的，在View的onDraw方法中完成绘制。下面就实现一个简单的计数器，每点击它一次，计数值就加1并显示出来。</p>
<p>1、创建CounterView类，继承自View，实现OnClickListener接口：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CounterView <span style="color: #0000ff;">extends</span> View <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 定义画笔</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Paint mPaint;
</span><span style="color: #008080;"> 5</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 用于获取文字的宽和高</span>
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Rect mBounds;
</span><span style="color: #008080;"> 7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 计数值，每点击一次本控件，其值增加1</span>
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mCount;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> CounterView(Context context, AttributeSet attrs) {
</span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 初始化画笔、Rect</span>
<span style="color: #008080;">14</span>         mPaint = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Paint(Paint.ANTI_ALIAS_FLAG);
</span><span style="color: #008080;">15</span>         mBounds = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Rect();
</span><span style="color: #008080;">16</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 本控件的点击事件</span>
<span style="color: #008080;">17</span>         setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDraw(Canvas canvas) {
</span><span style="color: #008080;">22</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDraw(canvas);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> <span style="color: #000000;">        mPaint.setColor(Color.BLUE);
</span><span style="color: #008080;">25</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 绘制一个填充色为蓝色的矩形</span>
<span style="color: #008080;">26</span>         canvas.drawRect(0, 0<span style="color: #000000;">, getWidth(), getHeight(), mPaint);
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span> <span style="color: #000000;">        mPaint.setColor(Color.YELLOW);
</span><span style="color: #008080;">29</span>         mPaint.setTextSize(50<span style="color: #000000;">);
</span><span style="color: #008080;">30</span>         String text =<span style="color: #000000;"> String.valueOf(mCount);
</span><span style="color: #008080;">31</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 获取文字的宽和高</span>
<span style="color: #008080;">32</span>         mPaint.getTextBounds(text, 0<span style="color: #000000;">, text.length(), mBounds);
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">float</span> textWidth =<span style="color: #000000;"> mBounds.width();
</span><span style="color: #008080;">34</span>         <span style="color: #0000ff;">float</span> textHeight =<span style="color: #000000;"> mBounds.height();
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 绘制字符串</span>
<span style="color: #008080;">37</span>         canvas.drawText(text, getWidth() / 2 - textWidth / 2, getHeight() / 2
<span style="color: #008080;">38</span>                 + textHeight / 2<span style="color: #000000;">, mPaint);
</span><span style="color: #008080;">39</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">40</span> 
<span style="color: #008080;">41</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">42</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">43</span>         mCount ++<span style="color: #000000;">;
</span><span style="color: #008080;">44</span>         
<span style="color: #008080;">45</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 重绘</span>
<span style="color: #008080;">46</span> <span style="color: #000000;">        invalidate();
</span><span style="color: #008080;">47</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span> }</pre>
</div>
<p>2、在activity_main.xml中引入该自定义布局：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:id</span><span style="color: #0000ff;">="@+id/main_layout"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">com.example.test.CounterView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/counter_view"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="100dp"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="100dp"</span>
<span style="color: #008080;">11</span> <span style="color: #ff0000;">        android:layout_gravity</span><span style="color: #0000ff;">="center_horizontal|top"</span>
<span style="color: #008080;">12</span> <span style="color: #ff0000;">        android:layout_margin</span><span style="color: #0000ff;">="20dp"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>3、运行效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160605233039117-904385135.png" alt="" /></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: left;"><strong>（三）继承控件</strong></p>
<p style="text-align: left;"><strong>　　</strong>就是继承已有的控件，创建新控件，保留继承的父控件的特性，并且还可以引入新特性。下面就以支持横向滑动删除列表项的自定义ListView的实现来介绍。</p>
<p style="text-align: left;">1、创建删除按钮布局delete_btn.xml，这个布局是在横向滑动列表项后显示的：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:background</span><span style="color: #0000ff;">="#FF0000"</span>
<span style="color: #008080;"> 6</span> <span style="color: #ff0000;">    android:padding</span><span style="color: #0000ff;">="5dp"</span>
<span style="color: #008080;"> 7</span> <span style="color: #ff0000;">    android:text</span><span style="color: #0000ff;">="删除"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">    android:textColor</span><span style="color: #0000ff;">="#FFFFFF"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">    android:textSize</span><span style="color: #0000ff;">="16sp"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Button</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>2、创建CustomListView类，继承自ListView，并实现了OnTouchListener和OnGestureListener接口：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CustomListView <span style="color: #0000ff;">extends</span> ListView <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnTouchListener,
</span><span style="color: #008080;">  2</span> <span style="color: #000000;">        OnGestureListener {
</span><span style="color: #008080;">  3</span> 
<span style="color: #008080;">  4</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 手势动作探测器</span>
<span style="color: #008080;">  5</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> GestureDetector mGestureDetector;
</span><span style="color: #008080;">  6</span> 
<span style="color: #008080;">  7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 删除事件监听器</span>
<span style="color: #008080;">  8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> OnDeleteListener {
</span><span style="color: #008080;">  9</span>         <span style="color: #0000ff;">void</span> onDelete(<span style="color: #0000ff;">int</span><span style="color: #000000;"> index);
</span><span style="color: #008080;"> 10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 11</span> 
<span style="color: #008080;"> 12</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> OnDeleteListener mOnDeleteListener;
</span><span style="color: #008080;"> 13</span> 
<span style="color: #008080;"> 14</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 删除按钮</span>
<span style="color: #008080;"> 15</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> View mDeleteBtn;
</span><span style="color: #008080;"> 16</span> 
<span style="color: #008080;"> 17</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 列表项布局</span>
<span style="color: #008080;"> 18</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> ViewGroup mItemLayout;
</span><span style="color: #008080;"> 19</span> 
<span style="color: #008080;"> 20</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 选择的列表项</span>
<span style="color: #008080;"> 21</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mSelectedItem;
</span><span style="color: #008080;"> 22</span> 
<span style="color: #008080;"> 23</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 当前删除按钮是否显示出来了</span>
<span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isDeleteShown;
</span><span style="color: #008080;"> 25</span> 
<span style="color: #008080;"> 26</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> CustomListView(Context context, AttributeSet attrs) {
</span><span style="color: #008080;"> 27</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);
</span><span style="color: #008080;"> 28</span> 
<span style="color: #008080;"> 29</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 创建手势监听器对象</span>
<span style="color: #008080;"> 30</span>         mGestureDetector = <span style="color: #0000ff;">new</span> GestureDetector(getContext(), <span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 31</span> 
<span style="color: #008080;"> 32</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 监听onTouch事件</span>
<span style="color: #008080;"> 33</span>         setOnTouchListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 34</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 35</span> 
<span style="color: #008080;"> 36</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 设置删除监听事件</span>
<span style="color: #008080;"> 37</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setOnDeleteListener(OnDeleteListener listener) {
</span><span style="color: #008080;"> 38</span>         mOnDeleteListener =<span style="color: #000000;"> listener;
</span><span style="color: #008080;"> 39</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 40</span> 
<span style="color: #008080;"> 41</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 触摸监听事件</span>
<span style="color: #008080;"> 42</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 43</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> onTouch(View v, MotionEvent event) {
</span><span style="color: #008080;"> 44</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isDeleteShown) {
</span><span style="color: #008080;"> 45</span> <span style="color: #000000;">            hideDelete();
</span><span style="color: #008080;"> 46</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 47</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 48</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> mGestureDetector.onTouchEvent(event);
</span><span style="color: #008080;"> 49</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 50</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 51</span> 
<span style="color: #008080;"> 52</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 53</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> onDown(MotionEvent e) {
</span><span style="color: #008080;"> 54</span>         <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">isDeleteShown) {
</span><span style="color: #008080;"> 55</span>             mSelectedItem = pointToPosition((<span style="color: #0000ff;">int</span>) e.getX(), (<span style="color: #0000ff;">int</span><span style="color: #000000;">) e.getY());
</span><span style="color: #008080;"> 56</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 57</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 58</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 59</span> 
<span style="color: #008080;"> 60</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 61</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span> onFling(MotionEvent e1, MotionEvent e2, <span style="color: #0000ff;">float</span><span style="color: #000000;"> velocityX,
</span><span style="color: #008080;"> 62</span>             <span style="color: #0000ff;">float</span><span style="color: #000000;"> velocityY) {
</span><span style="color: #008080;"> 63</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 如果当前删除按钮没有显示出来，并且x方向滑动的速度大于y方向的滑动速度</span>
<span style="color: #008080;"> 64</span>         <span style="color: #0000ff;">if</span> (!isDeleteShown &amp;&amp; Math.abs(velocityX) &gt;<span style="color: #000000;"> Math.abs(velocityY)) {
</span><span style="color: #008080;"> 65</span>             mDeleteBtn =<span style="color: #000000;"> LayoutInflater.from(getContext()).inflate(
</span><span style="color: #008080;"> 66</span>                     R.layout.delete_btn, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 67</span> 
<span style="color: #008080;"> 68</span>             mDeleteBtn.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;"> 69</span> 
<span style="color: #008080;"> 70</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;"> 71</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 72</span> <span style="color: #000000;">                    mItemLayout.removeView(mDeleteBtn);
</span><span style="color: #008080;"> 73</span>                     mDeleteBtn = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 74</span>                     isDeleteShown = <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 75</span> <span style="color: #000000;">                    mOnDeleteListener.onDelete(mSelectedItem);
</span><span style="color: #008080;"> 76</span> <span style="color: #000000;">                }
</span><span style="color: #008080;"> 77</span> <span style="color: #000000;">            });
</span><span style="color: #008080;"> 78</span> 
<span style="color: #008080;"> 79</span>             mItemLayout =<span style="color: #000000;"> (ViewGroup) getChildAt(mSelectedItem
</span><span style="color: #008080;"> 80</span>                     -<span style="color: #000000;"> getFirstVisiblePosition());
</span><span style="color: #008080;"> 81</span> 
<span style="color: #008080;"> 82</span>             RelativeLayout.LayoutParams params = <span style="color: #0000ff;">new</span><span style="color: #000000;"> RelativeLayout.LayoutParams(
</span><span style="color: #008080;"> 83</span> <span style="color: #000000;">                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
</span><span style="color: #008080;"> 84</span> <span style="color: #000000;">            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
</span><span style="color: #008080;"> 85</span> <span style="color: #000000;">            params.addRule(RelativeLayout.CENTER_VERTICAL);
</span><span style="color: #008080;"> 86</span> 
<span style="color: #008080;"> 87</span> <span style="color: #000000;">            mItemLayout.addView(mDeleteBtn, params);
</span><span style="color: #008080;"> 88</span>             isDeleteShown = <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 89</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 90</span> 
<span style="color: #008080;"> 91</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 92</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 93</span> 
<span style="color: #008080;"> 94</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 隐藏删除按钮</span>
<span style="color: #008080;"> 95</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> hideDelete() {
</span><span style="color: #008080;"> 96</span> <span style="color: #000000;">        mItemLayout.removeView(mDeleteBtn);
</span><span style="color: #008080;"> 97</span>         mDeleteBtn = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 98</span>         isDeleteShown = <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 99</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">100</span> 
<span style="color: #008080;">101</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isDeleteShown() {
</span><span style="color: #008080;">102</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> isDeleteShown;
</span><span style="color: #008080;">103</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">104</span>     
<span style="color: #008080;">105</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">106</span> <span style="color: #008000;">     * 后面几个方法本例中没有用到
</span><span style="color: #008080;">107</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">108</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">109</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onShowPress(MotionEvent e) {
</span><span style="color: #008080;">110</span> 
<span style="color: #008080;">111</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">112</span> 
<span style="color: #008080;">113</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">114</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> onSingleTapUp(MotionEvent e) {
</span><span style="color: #008080;">115</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;">116</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">117</span> 
<span style="color: #008080;">118</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">119</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span> onScroll(MotionEvent e1, MotionEvent e2, <span style="color: #0000ff;">float</span><span style="color: #000000;"> distanceX,
</span><span style="color: #008080;">120</span>             <span style="color: #0000ff;">float</span><span style="color: #000000;"> distanceY) {
</span><span style="color: #008080;">121</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;">122</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">123</span> 
<span style="color: #008080;">124</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">125</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onLongPress(MotionEvent e) {
</span><span style="color: #008080;">126</span> 
<span style="color: #008080;">127</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">128</span> 
<span style="color: #008080;">129</span> }</pre>
</div>
<p>3、定义列表项布局custom_listview_item.xml，它的结构很简单，只包含了一个TextView：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">RelativeLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:descendantFocusability</span><span style="color: #0000ff;">="blocksDescendants"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/content_tv"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">11</span> <span style="color: #ff0000;">        android:layout_centerVertical</span><span style="color: #0000ff;">="true"</span>
<span style="color: #008080;">12</span> <span style="color: #ff0000;">        android:layout_margin</span><span style="color: #0000ff;">="30dp"</span>
<span style="color: #008080;">13</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="center_vertical|left"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">RelativeLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>4、定义适配器类CustomListViewAdapter，继承自ArrayAdapter&lt;String&gt;：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CustomListViewAdapter <span style="color: #0000ff;">extends</span> ArrayAdapter&lt;String&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> CustomListViewAdapter(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> textViewResourceId,
</span><span style="color: #008080;"> 4</span>             List&lt;String&gt;<span style="color: #000000;"> objects) {
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, textViewResourceId, objects);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        View view;
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>         <span style="color: #0000ff;">if</span> (convertView == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">13</span>             view =<span style="color: #000000;"> LayoutInflater.from(getContext()).inflate(
</span><span style="color: #008080;">14</span>                     R.layout.custom_listview_item, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">15</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">16</span>             view =<span style="color: #000000;"> convertView;
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>         TextView contentTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.content_tv);
</span><span style="color: #008080;">20</span> <span style="color: #000000;">        contentTv.setText(getItem(position));
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> view;
</span><span style="color: #008080;">23</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span> }</pre>
</div>
<p>5、在activity_main.xml中引入自定义的ListView：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:id</span><span style="color: #0000ff;">="@+id/main_layout"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">com.example.test.CustomListView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/custom_lv"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>6、在MainActivity中对列表做初始化、设置列表项删除按钮点击事件等处理：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 自定义Lv</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> CustomListView mCustomLv;
</span><span style="color: #008080;"> 5</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 自定义适配器</span>
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> CustomListViewAdapter mAdapter;
</span><span style="color: #008080;"> 7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 内容列表</span>
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span> List&lt;String&gt; contentList = <span style="color: #0000ff;">new</span> ArrayList&lt;String&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        requestWindowFeature(Window.FEATURE_NO_TITLE);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> <span style="color: #000000;">        initContentList();
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>         mCustomLv =<span style="color: #000000;"> (CustomListView) findViewById(R.id.custom_lv);
</span><span style="color: #008080;">19</span>         mCustomLv.setOnDeleteListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnDeleteListener() {
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">22</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onDelete(<span style="color: #0000ff;">int</span><span style="color: #000000;"> index) {
</span><span style="color: #008080;">23</span> <span style="color: #000000;">                contentList.remove(index);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">                mAdapter.notifyDataSetChanged();
</span><span style="color: #008080;">25</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">26</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>         mAdapter = <span style="color: #0000ff;">new</span> CustomListViewAdapter(<span style="color: #0000ff;">this</span>, 0<span style="color: #000000;">, contentList);
</span><span style="color: #008080;">29</span> <span style="color: #000000;">        mCustomLv.setAdapter(mAdapter);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 初始化内容列表</span>
<span style="color: #008080;">33</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> initContentList() {
</span><span style="color: #008080;">34</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; 20; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">35</span>             contentList.add("内容项" +<span style="color: #000000;"> i);
</span><span style="color: #008080;">36</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">37</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">40</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onBackPressed() {
</span><span style="color: #008080;">41</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (mCustomLv.isDeleteShown()) {
</span><span style="color: #008080;">42</span> <span style="color: #000000;">            mCustomLv.hideDelete();
</span><span style="color: #008080;">43</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;
</span><span style="color: #008080;">44</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">45</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onBackPressed();
</span><span style="color: #008080;">46</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">47</span> 
<span style="color: #008080;">48</span> }</pre>
</div>
<p>7、运行效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201606/760572-20160605234135461-642948109.png" alt="" /></p>
<p>&nbsp;</p>
<p>Refer：<a href="http://blog.csdn.net/guolin_blog/article/details/17357967" target="_blank">http://blog.csdn.net/guolin_blog/article/details/17357967</a></p>]]></description></item><item><title>UML统一建模语言简介</title><link>http://www.cnblogs.com/jiayongji/archive/2016/05/27/5534299.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Fri, 27 May 2016 05:18:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/05/27/5534299.html</guid><description><![CDATA[<div><span style="font-size: 14px;"><strong>（一）UML概述</strong></span></div>
<div><span style="font-size: 14px;">1、面向对象软件开发的过程：</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（1）OOA(面向对象分析)：建立分析模型并文档化。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（2）OOD(面向对象设计)：用面向对象思想对OOA的结果进行细化，得出设计模型。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（3）OOP(面向对象编程)</span></div>
<div><span style="font-size: 14px;">2、UML就是将OOA和OOD的结果用统一的符号来描述和记录。</span></div>
<div><span style="font-size: 14px;">3、UML已经是可视化建模事实上的工业标准。</span></div>
<div><span style="font-size: 14px;">4、不要把UML当成一种负担，而是当成工具。</span></div>
<div><span style="font-size: 14px;">5、UML有13种图形，最常用的有：用例图、类图、组件图、部署图、顺序图、活动图、状态机图。</span></div>
<div><span style="font-size: 14px;">&nbsp;</span></div>
<div><span style="font-size: 14px;">　　</span>
<div><span style="font-size: 14px;"><strong>（二）用例图</strong></span></div>
<div><span style="font-size: 14px;">1、用于描述系统的系列功能，一个用例图代表系统的一个功能模块，由&ldquo;用例+角色&rdquo;组成，主要在需求分析阶段使用。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">用例：<span style="color: #ff0000;">用椭圆表示。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">角色：<span style="color: #ff0000;">用一个人形符号表示。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">用例之间的依赖关系：<span style="color: #ff0000;">用虚线箭头表示</span></span></div>
<div><span style="font-size: 14px;"><span style="color: #ff0000;"><span style="color: #000000;">2、一个BBS系统的用例图：</span></span></span></div>
<div style="text-align: center;"><span style="font-size: 14px;"><span style="color: #ff0000;"><span style="color: #000000;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527130329256-1281689612.png" alt="" /></span></span></span></div>
<div style="text-align: left;"><span style="font-size: 14px;">　　</span></div>
<div style="text-align: left;"><span style="font-size: 14px;">　　</span>
<div><span style="font-size: 14px;"><strong>（三）类图</strong></span></div>
<div><span style="font-size: 14px;">1、类图用一个三层的矩形框表示，第一层写类名，第二层包含类的属性，第三层包含类的方法。如下图示例：</span></div>
<div style="text-align: center; margin-left: 30px;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527130713959-1208461778.png" alt="" /></span></div>
<div><span style="font-size: 14px;">2、类之间的三种关系：关联（包括聚合和组合）、泛化（和继承是同一概念）、依赖。</span></div>
<div>
<div>
<div><span style="font-size: 14px;">3、关联：</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（1）关联和属性很像，两者的区别：类里的某个属性引用到另外一个实体时，就变成了关联。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（2）<span style="color: #ff0000;">关联用一条实线来表示，带箭头的实线表示单向关联。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（3）关联包含两种特例：聚合和组合。两者区别：</span></div>
<div style="margin-left: 60px;"><span style="font-size: 14px;">①聚合：当某个实体A聚合成另一个实体B时，A还可以同时是另外一个实体的一部分。比如学生既可以是网球俱乐部的成员，也可以是羽毛球俱乐部的成员。<span style="color: #ff0000;">聚合使用带空心菱形框的实线表示。</span></span></div>
<div style="margin-left: 60px;"><span style="font-size: 14px;">②组合：当某个实体A组合成另一个实体B时，A不能同时是另外一个实体的一部分。比如手是人这个实体的一部分，手组合成为一个人的一部分后，不能同时是另外一个人的一部分。<span style="color: #ff0000;">组合使用带实心菱形框的实线表示。</span></span></div>
<div style="margin-left: 60px;"><span style="font-size: 14px;">关联关系示例图如下：</span></div>
<div style="text-align: center; margin-left: 60px;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132231569-339114380.png" alt="" /></span></div>
<div><span style="font-size: 14px;">4、泛化关系：即继承关系，用带空心三角形的实线表示。对接口的实现也可以看成是一种特殊的继承，<span style="color: #ff0000;">实现接口的关系用带空心三角形的虚线表示</span>。示例图如下：</span></div>
<div style="text-align: center;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132311897-1641095560.png" alt="" /></span></div>
<div>
<div><span style="font-size: 14px;">5、依赖关系：如果一个类的改动会导致另一个类的改动，则两者之间存在依赖关系。依赖的常见原因：</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（1）改动的类将消息发送给另一个类；</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（2）改动的类以另一个类作为数据部分；</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（3）改动的类以另一个类作为操作参数。</span></div>
<div><span style="font-size: 14px;"><span style="color: #ff0000;">依赖用带箭头的虚线表示，箭头在被依赖的类一侧</span>，依赖关系示例图如下：</span></div>
</div>
</div>
<div style="text-align: center; margin-left: 30px;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132450631-1347449195.png" alt="" /></span></div>
<div><span style="font-size: 14px;">&nbsp;</span>
<div><span style="font-size: 14px;"><strong>（三）组件图</strong><br /></span></div>
<div><span style="font-size: 14px;">1、对于一个大型应用程序而言，通常由多个可部署的组件组成。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（1）Java：可复用的组件通常打包成JAR、WAR等文件。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（2）C/C++：可复用的组件通常是一个函数库，或者DLL（动态链接库）文件。</span></div>
<div><span style="font-size: 14px;">2、组件图的用途是显示系统中的软件对其他软件组件（如库函数）的依赖关系。组件图通常包含组件、接口、Port等元素，UML<span style="color: #ff0000;">用带<img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132555803-182746785.png" alt="" /></span><span style="color: #ff0000;">符号的矩形表示组件，用圆圈代表接口，用位于组件边界上的小矩形代表Port</span>。</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">组件接口表示它能对外提供的服务规范，有两种表示形式：</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（1）用一条实线连接到组件边界的圆圈表示；</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（2）使用位于组件内部的圆圈表示。</span></div>
<div style="margin-left: 30px;"><span style="color: #ff0000; font-size: 14px;">组件依赖于某个接口用一条带半圆弧的实线来表示。</span></div>
<div><span style="color: #000000; font-size: 14px;">3、组件图示例如下：</span></div>
<div style="text-align: center;"><span style="color: #000000; font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132737694-889476937.png" alt="" /></span></div>
<div style="text-align: center;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132843194-901154427.png" alt="" /></span></div>
<div><span style="font-size: 14px;">&nbsp;</span></div>
<div>
<div><span style="font-size: 14px;"><strong>（四）部署图</strong></span></div>
<div><span style="font-size: 14px;">1、部署图显示系统不同组件在何处物理运行，以及它们之间如何通信。</span></div>
<div><span style="font-size: 14px;">2、部署图示例：</span></div>
<div style="text-align: center;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527132945241-905446871.png" alt="" /></span></div>
<div><span style="font-size: 14px;">&nbsp;</span></div>
<div>
<div><span style="font-size: 14px;"><strong>（五）顺序图</strong></span></div>
<div><span style="font-size: 14px;">1、顺序图描述对象之间的交互，注重描述消息及其时间顺序。</span></div>
<div><span style="font-size: 14px;">2、顺序图示例：</span></div>
<div style="text-align: center;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527133156709-2118207657.png" alt="" /></span></div>
<div style="text-align: center;"><span style="font-size: 14px;">&nbsp;</span></div>
<div>
<div><span style="font-size: 14px;"><strong>（六）活动图</strong></span></div>
<div><span style="font-size: 14px;">1、活动图 = 传统流程图 + 并行。</span></div>
<div><span style="font-size: 14px;">2、用于描述用例内部的活动或方法的流程，用于描述过程原理、业务逻辑、工作流。</span></div>
<div><span style="font-size: 14px;">3、活动图和状态机图都属于演化图，演化图五要素：状态、事件、动作、活动、条件。</span></div>
<div><span style="font-size: 14px;">4、<span style="color: #ff0000;">活动图用圆角矩形表示活动，用带箭头的实线表示事件。</span></span></div>
<div><span style="font-size: 14px;">5、活动图示例：</span></div>
<div style="text-align: center;"><span style="font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527133237319-612774195.png" alt="" /></span></div>
<div style="text-align: center;"><span style="font-size: 14px;">&nbsp;</span></div>
<div>
<div><span style="font-size: 14px;"><strong>（七）状态机图</strong></span></div>
<div><span style="font-size: 14px;">1、状态机图表示某个对象所处的不同状态和状态之间的转换信息，当对象的状态大于等于3个时才需要考虑使用状态机图。</span></div>
<div><span style="font-size: 14px;">2、状态机图5个基本元素：</span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（1）初始状态：<span style="color: #ff0000;">用实心圆来表示。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（2）状态之间的转换：<span style="color: #ff0000;">用带箭头的实线表示。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（3）状态：<span style="color: #ff0000;">用圆角矩形来表示。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（4）判断点：<span style="color: #ff0000;">使用空心圆来表示。</span></span></div>
<div style="margin-left: 30px;"><span style="font-size: 14px;">（5）终止点：<span style="color: #ff0000;">有一个或多个终止点，使用内部包含实心圆的空心圆表示。</span></span></div>
<div><span style="color: #000000; font-size: 14px;">3、状态机图示例：</span></div>
<div style="text-align: center;"><span style="color: #000000; font-size: 14px;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160527133346116-446906974.png" alt="" /></span></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>]]></description></item><item><title>Android设置TextView的字体</title><link>http://www.cnblogs.com/jiayongji/archive/2016/05/22/5516046.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sat, 21 May 2016 17:10:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/05/22/5516046.html</guid><description><![CDATA[<p>　　做项目的时候，需要使用到手写字体来让内容更加的美观。可是程序中默认使用的是系统的默认字体，怎么将TextView（或EditText）的字体设置成自己想要的字体呢？步骤如下：</p>
<p>　　1、下载字体文件(.ttf格式)，比如Jinglei.ttf（方正静蕾的字体文件），然后将其复制到项目工程的assets/fonts目录下。</p>
<p>　　2、设置TextView的字体：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> TextView tv =<span style="color: #000000;"> (TextView)findViewById(R.id.my_textview);
</span><span style="color: #008080;">2</span> Typeface typeface = Typeface.createFromAsset(mContext.getAssets(), "fonts/Jinglei.ttf");  <span style="color: #008000;">//</span><span style="color: #008000;"> mContext为上下文</span>
<span style="color: #008080;">3</span> tv.setTypeface(typeface );</pre>
</div>
<p>　　3、为了使用起来方便，还可以将设置字体的操作封装成一个工具类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 字体相关操作工具类
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> * 
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> TypefaceUtil {
</span><span style="color: #008080;"> 6</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 上下文</span>
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Context mContext;
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Typeface mTypeface;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">11</span> <span style="color: #008000;">     * 如果ttfPath为null那么mTypeface就为系统默认值
</span><span style="color: #008080;">12</span> <span style="color: #008000;">     * 
</span><span style="color: #008080;">13</span> <span style="color: #008000;">     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> context
</span><span style="color: #008080;">14</span> <span style="color: #008000;">     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> ttfPath
</span><span style="color: #008080;">15</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> TypefaceUtil(Context context, String ttfPath) {
</span><span style="color: #008080;">18</span>         mContext =<span style="color: #000000;"> context;
</span><span style="color: #008080;">19</span>         mTypeface =<span style="color: #000000;"> getTypefaceFromTTF(ttfPath);
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">23</span> <span style="color: #008000;">     * 从ttf文件创建Typeface对象
</span><span style="color: #008080;">24</span> <span style="color: #008000;">     * 
</span><span style="color: #008080;">25</span> <span style="color: #008000;">     * @ttfPath "fonts/XXX.ttf"
</span><span style="color: #008080;">26</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">27</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Typeface getTypefaceFromTTF(String ttfPath) {
</span><span style="color: #008080;">28</span> 
<span style="color: #008080;">29</span>         <span style="color: #0000ff;">if</span> (ttfPath == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">30</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> Typeface.DEFAULT;
</span><span style="color: #008080;">31</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">32</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> Typeface.createFromAsset(mContext.getAssets(), ttfPath);
</span><span style="color: #008080;">33</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">34</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">37</span> <span style="color: #008000;">     * 设置TextView的字体 
</span><span style="color: #008080;">38</span> <span style="color: #008000;">     * 
</span><span style="color: #008080;">39</span> <span style="color: #008000;">     * @tv TextView对象
</span><span style="color: #008080;">40</span> <span style="color: #008000;">     * @ttfPath ttf文件路径
</span><span style="color: #008080;">41</span> <span style="color: #008000;">     * @isBold 是否加粗字体
</span><span style="color: #008080;">42</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">43</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setTypeface(TextView tv, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isBold) {
</span><span style="color: #008080;">44</span> <span style="color: #000000;">        tv.setTypeface(mTypeface);
</span><span style="color: #008080;">45</span> <span style="color: #000000;">        setBold(tv, isBold);
</span><span style="color: #008080;">46</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">47</span> 
<span style="color: #008080;">48</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">49</span> <span style="color: #008000;">     * 设置字体加粗
</span><span style="color: #008080;">50</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">51</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setBold(TextView tv, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isBold) {
</span><span style="color: #008080;">52</span>         TextPaint tp =<span style="color: #000000;"> tv.getPaint();
</span><span style="color: #008080;">53</span> <span style="color: #000000;">        tp.setFakeBoldText(isBold);
</span><span style="color: #008080;">54</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">55</span> 
<span style="color: #008080;">56</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">57</span> <span style="color: #008000;">     * 设置TextView的字体为系统默认字体
</span><span style="color: #008080;">58</span> <span style="color: #008000;">     * 
</span><span style="color: #008080;">59</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">60</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setDefaultTypeFace(TextView tv, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isBold) {
</span><span style="color: #008080;">61</span> <span style="color: #000000;">        tv.setTypeface(Typeface.DEFAULT);
</span><span style="color: #008080;">62</span> <span style="color: #000000;">        setBold(tv, isBold);
</span><span style="color: #008080;">63</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">64</span> 
<span style="color: #008080;">65</span>     <span style="color: #008000;">/**</span>
<span style="color: #008080;">66</span> <span style="color: #008000;">     * 设置当前工具对象的字体
</span><span style="color: #008080;">67</span> <span style="color: #008000;">     * 
</span><span style="color: #008080;">68</span>      <span style="color: #008000;">*/</span>
<span style="color: #008080;">69</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setmTypeface(String ttfPath) {
</span><span style="color: #008080;">70</span>         mTypeface =<span style="color: #000000;"> getTypefaceFromTTF(ttfPath);
</span><span style="color: #008080;">71</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">72</span> 
<span style="color: #008080;">73</span> }</pre>
</div>
<p>　　4、使用的时候只需这样调用：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> TypefaceUtil tfUtil = <span style="color: #0000ff;">new</span> TypefaceUtil(mContext,"fonts/Jinglei.ttf"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> tfUtil.setTypeface(tv,<span style="color: #0000ff;">false</span>);</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>Java设计模式之——观察者模式（Observer）</title><link>http://www.cnblogs.com/jiayongji/archive/2016/05/01/5449937.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sat, 30 Apr 2016 17:26:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/05/01/5449937.html</guid><description><![CDATA[<p>　　<strong>（一）观察者模式简介</strong></p>
<p>　　1、定义：定义对象间一种一对多的依赖关系，一个对象状态发生改变时，所有依赖它的对象都会接到通知并作出相应的响应。</p>
<p>　　2、应用场景：</p>
<p>　　（1）GUI系统</p>
<p>　　（2）订阅-发布系统</p>
<p>　　（3）事件多级触发场景</p>
<p>　　（4）当一个对象改变时需要通知其他对象，但不知道有其他对象具体有哪些时</p>
<p>　　3、UML类图</p>
<p style="text-align: center;"><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160501011811769-1278954584.png" alt="" />　　</p>
<p style="text-align: left;">　<strong>　（二）观察者模式实例</strong></p>
<p style="text-align: left;">　　1、假设有个珠宝公司要运送一批钻石，强盗也盯上这批钻石了，准备在运输途中抢劫，而珠宝公司雇佣的保镖要全程对钻石进行保护，警察也派出警车护航，关系如下图：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201605/760572-20160501011726863-1434028017.png" alt="" /></p>
<p style="text-align: left;">　　2、代码如下：</p>
<p style="text-align: left;">　　（1）抽象观察者接口：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;">2</span> <span style="color: #008000;"> * 抽象观察者
</span><span style="color: #008080;">3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;">4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> Watcher {
</span><span style="color: #008080;">7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 对被观察者状态变化做出响应的抽象方法</span>
<span style="color: #008080;">8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> update(String msg);
</span><span style="color: #008080;">9</span> }</pre>
</div>
<p>　　（2）抽象被观察者接口：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 抽象被观察者
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> Watched {
</span><span style="color: #008080;"> 7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 添加观察者</span>
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> addWatcher(Watcher watcher);
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 移除观察者</span>
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> removeWatcher(Watcher watcher);
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 通知观察者</span>
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> notifyWatchers(String msg);
</span><span style="color: #008080;">15</span> }</pre>
</div>
<p>　　（3）保镖类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 保镖类，实现Watcher接口
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Security <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Watcher {
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> update(String msg) {
</span><span style="color: #008080;">10</span>         System.out.println("保镖收到消息：" + msg + "。保镖开始保护！"<span style="color: #000000;">);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> }</pre>
</div>
<p>　　（4）警察类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 警察类，实现Watcher接口
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Police <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Watcher {
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> update(String msg) {
</span><span style="color: #008080;">10</span>         System.out.println("警察收到消息：" + msg + "。警察开始派警车护航！"<span style="color: #000000;">);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> }</pre>
</div>
<p>　　（5）强盗类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/**</span><span style="color: #008000;">
 * 强盗类，实现Watcher接口
 *
 </span><span style="color: #008000;">*/</span>

<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Thief <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Watcher {

    @Override
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> update(String msg) {
        System.out.println(</span>"收到消息：" + msg + "。强盗准备动手！"<span style="color: #000000;">);
    }

}</span></pre>
</div>
<p>　　（6）珠宝运输类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 具体的被观察者
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Transporter <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Watched {
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     List&lt;Watcher&gt; wathcerList = <span style="color: #0000ff;">new</span> ArrayList&lt;Watcher&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> addWatcher(Watcher watcher) {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">        wathcerList.add(watcher);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">16</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> removeWatcher(Watcher watcher) {
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        wathcerList.remove(watcher);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> notifyWatchers(String msg) {
</span><span style="color: #008080;">22</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Watcher w : wathcerList) {
</span><span style="color: #008080;">23</span> <span style="color: #000000;">            w.update(msg);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> }</pre>
</div>
<p>　　（6）测试类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Test {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;"> 3</span>         Security s = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Security();
</span><span style="color: #008080;"> 4</span>         Thief t = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Thief();
</span><span style="color: #008080;"> 5</span>         Police p = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Police();
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>         Transporter transPorter = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Transporter();
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        transPorter.addWatcher(s);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        transPorter.addWatcher(t);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        transPorter.addWatcher(p);
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>         transPorter.notifyWatchers("运输车队开始出发了"<span style="color: #000000;">);
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">        transPorter.removeWatcher(t);
</span><span style="color: #008080;">15</span>         transPorter.notifyWatchers("运输车队摆脱了强盗"<span style="color: #000000;">);
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">17</span> }</pre>
</div>
<p>　　（7）输出结果：</p>
<p>保镖收到消息：运输车队开始出发了。保镖开始保护！<br />收到消息：运输车队开始出发了。强盗准备动手！<br />警察收到消息：运输车队开始出发了。警察开始派警车护航！<br />保镖收到消息：运输车队摆脱了强盗。保镖开始保护！<br />警察收到消息：运输车队摆脱了强盗。警察开始派警车护航！</p>
<p>&nbsp;</p>
<p style="text-align: right;">Refer：<a href="http://blog.csdn.net/jason0539/article/details/45055233">http://blog.csdn.net/jason0539/article/details/45055233</a></p>]]></description></item><item><title>Android AlarmManager的用法详解</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/20/5413335.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Wed, 20 Apr 2016 08:37:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/20/5413335.html</guid><description><![CDATA[<p>　　在Android的Alarm机制中，使用AlarmManager可以实现类似闹钟这样的定时任务。在毕业设计项目中要实现定时任务的功能，所以在这里先进行一下梳理。</p>
<p>　　<strong>（一）AlarmManager与Broadcast结合实现定时任务</strong></p>
<p>　　AlarmManager主要可以发送定时广播，然后在广播接收器中执行任务的具体逻辑；还可以取消已经创建的定时任务、创建可以周期重复执行的定时任务等，将这几个功能进行封装，封装成AlarmManagerUtil类如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.AlarmManager;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.PendingIntent;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 8</span> <span style="color: #008000;"> * AlarmManager工具类
</span><span style="color: #008080;"> 9</span> <span style="color: #008000;"> *
</span><span style="color: #008080;">10</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> AlarmManagerUtil {
</span><span style="color: #008080;">13</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取AlarmManager实例</span>
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> AlarmManager getAlarmManager(Context context) {
</span><span style="color: #008080;">15</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 发送定时广播（执行广播中的定时任务）
</span><span style="color: #008080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 参数：
</span><span style="color: #008080;">20</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> context:上下文
</span><span style="color: #008080;">21</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> requestCode:请求码，用于区分不同的任务
</span><span style="color: #008080;">22</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> type:alarm启动类型
</span><span style="color: #008080;">23</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> triggerAtTime:定时任务开启的时间，毫秒为单位
</span><span style="color: #008080;">24</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> cls:广播接收器的class</span>
<span style="color: #008080;">25</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> sendAlarmBroadcast(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> requestCode,
</span><span style="color: #008080;">26</span>             <span style="color: #0000ff;">int</span> type, <span style="color: #0000ff;">long</span><span style="color: #000000;"> triggerAtTime, Class cls) {
</span><span style="color: #008080;">27</span>         AlarmManager mgr =<span style="color: #000000;"> getAlarmManager(context);
</span><span style="color: #008080;">28</span> 
<span style="color: #008080;">29</span>         Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(context, cls);
</span><span style="color: #008080;">30</span>         PendingIntent pi =<span style="color: #000000;"> PendingIntent.getBroadcast(context, requestCode,
</span><span style="color: #008080;">31</span>                 intent, 0<span style="color: #000000;">);
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span> <span style="color: #000000;">        mgr.set(type, triggerAtTime, pi);
</span><span style="color: #008080;">34</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 取消指定requestCode的定时任务
</span><span style="color: #008080;">37</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 参数：
</span><span style="color: #008080;">38</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> context:上下文
</span><span style="color: #008080;">39</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> requestCode:请求码，用于区分不同的任务
</span><span style="color: #008080;">40</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> cls:广播接收器的class</span>
<span style="color: #008080;">41</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> cancelAlarmBroadcast(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> requestCode,
</span><span style="color: #008080;">42</span> <span style="color: #000000;">            Class cls) {
</span><span style="color: #008080;">43</span>         AlarmManager mgr =<span style="color: #000000;"> getAlarmManager(context);
</span><span style="color: #008080;">44</span> 
<span style="color: #008080;">45</span>         Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(context, cls);
</span><span style="color: #008080;">46</span>         PendingIntent pi =<span style="color: #000000;"> PendingIntent.getBroadcast(context, requestCode,
</span><span style="color: #008080;">47</span>                 intent, 0<span style="color: #000000;">);
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span> <span style="color: #000000;">        mgr.cancel(pi);
</span><span style="color: #008080;">50</span> <span style="color: #000000;">        ToastUtil
</span><span style="color: #008080;">51</span>                 .showShort(context, "取消定时服务成功" + " @requestCode:" +<span style="color: #000000;"> requestCode);
</span><span style="color: #008080;">52</span>         Log.d("取消定时服务成功", "@requestCode:" +<span style="color: #000000;"> requestCode);
</span><span style="color: #008080;">53</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">54</span> 
<span style="color: #008080;">55</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 周期性执行定时任务
</span><span style="color: #008080;">56</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 参数：
</span><span style="color: #008080;">57</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> context:上下文
</span><span style="color: #008080;">58</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> requestCode:请求码，用于区分不同的任务
</span><span style="color: #008080;">59</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> type:alarm启动类型
</span><span style="color: #008080;">60</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> startTime:开始的时间，毫秒为单位
</span><span style="color: #008080;">61</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> cycleTime:定时任务的重复周期，毫秒为单位
</span><span style="color: #008080;">62</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> cls:广播接收器的class</span>
<span style="color: #008080;">63</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendRepeatAlarmBroadcast(Context context,
</span><span style="color: #008080;">64</span>             <span style="color: #0000ff;">int</span> requestCode, <span style="color: #0000ff;">int</span> type, <span style="color: #0000ff;">long</span> startTime, <span style="color: #0000ff;">long</span><span style="color: #000000;"> cycleTime, Class cls) {
</span><span style="color: #008080;">65</span>         AlarmManager mgr =<span style="color: #000000;"> getAlarmManager(context);
</span><span style="color: #008080;">66</span> 
<span style="color: #008080;">67</span>         Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(context, cls);
</span><span style="color: #008080;">68</span>         PendingIntent pi =<span style="color: #000000;"> PendingIntent.getBroadcast(context, requestCode,
</span><span style="color: #008080;">69</span>                 intent, 0<span style="color: #000000;">);
</span><span style="color: #008080;">70</span> 
<span style="color: #008080;">71</span> <span style="color: #000000;">        mgr.setRepeating(type, startTime, cycleTime, pi);
</span><span style="color: #008080;">72</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">73</span> }</pre>
</div>
<p>　　其中使用到的其他两个工具类都是项目中经常用到的，代码如下：</p>
<p>　　ToastUtil：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * Toast提示显示工具类
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> * 
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ToastUtil {
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 短时间显示Toast信息</span>
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> showShort(Context context, String info) {
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        Toast.makeText(context, info, Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 长时间显示Toast信息</span>
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> showLong(Context context, String info) {
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        Toast.makeText(context, info, Toast.LENGTH_LONG).show();
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> }</pre>
</div>
<p>　　DateTimeUtil：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.text.DateFormat;
</span><span style="color: #008080;">  2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.text.DecimalFormat;
</span><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.text.ParseException;
</span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.text.SimpleDateFormat;
</span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Arrays;
</span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Calendar;
</span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Date;
</span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.GregorianCalendar;
</span><span style="color: #008080;">  9</span> 
<span style="color: #008080;"> 10</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DateTimeUtil {
</span><span style="color: #008080;"> 11</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前时间n[]之后的时间的日期时间字符串（N的单位为Calendar的那些表示时间的常量）</span>
<span style="color: #008080;"> 12</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getNLaterDateTimeString(<span style="color: #0000ff;">int</span> nType, <span style="color: #0000ff;">int</span><span style="color: #000000;"> n) {
</span><span style="color: #008080;"> 13</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 14</span>         Calendar c = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GregorianCalendar();
</span><span style="color: #008080;"> 15</span> <span style="color: #000000;">        c.setTime(date);
</span><span style="color: #008080;"> 16</span> <span style="color: #000000;">        c.add(nType, n);
</span><span style="color: #008080;"> 17</span> 
<span style="color: #008080;"> 18</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> CalendarToString(c);
</span><span style="color: #008080;"> 19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 20</span> 
<span style="color: #008080;"> 21</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> millis to datetime</span>
<span style="color: #008080;"> 22</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getDateTimeStringFromMillis(<span style="color: #0000ff;">long</span><span style="color: #000000;"> millis) {
</span><span style="color: #008080;"> 23</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date(millis);
</span><span style="color: #008080;"> 24</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> (DateToString(date));
</span><span style="color: #008080;"> 25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 26</span> 
<span style="color: #008080;"> 27</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 把日期时间字符串的时间转换成毫秒值（RTC）</span>
<span style="color: #008080;"> 28</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> stringToMillis(String dateTime) {
</span><span style="color: #008080;"> 29</span>         Calendar c =<span style="color: #000000;"> StringToGregorianCalendar(dateTime);
</span><span style="color: #008080;"> 30</span> 
<span style="color: #008080;"> 31</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> c.getTimeInMillis();
</span><span style="color: #008080;"> 32</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 33</span> 
<span style="color: #008080;"> 34</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取两个日期时间字符串表示的时间之间的毫秒差值</span>
<span style="color: #008080;"> 35</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> getDifMillis(String dateTime1, String dateTime2) {
</span><span style="color: #008080;"> 36</span>         <span style="color: #0000ff;">return</span> (stringToMillis(dateTime1) -<span style="color: #000000;"> stringToMillis(dateTime2));
</span><span style="color: #008080;"> 37</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 38</span> 
<span style="color: #008080;"> 39</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 输入一个表示日期或时间的整型数，输出"01"或"23"这样格式的字符串</span>
<span style="color: #008080;"> 40</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getDoubleNumString(<span style="color: #0000ff;">int</span><span style="color: #000000;"> n) {
</span><span style="color: #008080;"> 41</span>         <span style="color: #0000ff;">int</span> num = n % 60<span style="color: #000000;">;
</span><span style="color: #008080;"> 42</span> 
<span style="color: #008080;"> 43</span>         <span style="color: #0000ff;">if</span> (num &lt; 10<span style="color: #000000;">) {
</span><span style="color: #008080;"> 44</span>             <span style="color: #0000ff;">return</span> "0" +<span style="color: #000000;"> num;
</span><span style="color: #008080;"> 45</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 46</span>             <span style="color: #0000ff;">return</span> num + ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 47</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 48</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 49</span> 
<span style="color: #008080;"> 50</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取标准日期时间字符串的整型的日期值，如："2015-01-21 00:00:00"，返回：21</span>
<span style="color: #008080;"> 51</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getDayOfMonth(String dateTime) {
</span><span style="color: #008080;"> 52</span>         Calendar c =<span style="color: #000000;"> StringToGregorianCalendar(dateTime);
</span><span style="color: #008080;"> 53</span>         <span style="color: #0000ff;">int</span> day =<span style="color: #000000;"> c.get(Calendar.DAY_OF_MONTH);
</span><span style="color: #008080;"> 54</span> 
<span style="color: #008080;"> 55</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> day;
</span><span style="color: #008080;"> 56</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 57</span> 
<span style="color: #008080;"> 58</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前时间的日期时间字符串，格式："yyyy-MM-dd HH:mm:ss"</span>
<span style="color: #008080;"> 59</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getCurrentDateTimeString() {
</span><span style="color: #008080;"> 60</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 61</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> DateToString(date);
</span><span style="color: #008080;"> 62</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 63</span> 
<span style="color: #008080;"> 64</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前的"yyyy-MM-dd"日期格式字符串</span>
<span style="color: #008080;"> 65</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getCurrentDateString() {
</span><span style="color: #008080;"> 66</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 67</span>         <span style="color: #0000ff;">return</span> DateToString(date).substring(0, 10<span style="color: #000000;">);
</span><span style="color: #008080;"> 68</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 69</span> 
<span style="color: #008080;"> 70</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前的"yyyy-MM"日期格式字符串</span>
<span style="color: #008080;"> 71</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getCurrentMonthString() {
</span><span style="color: #008080;"> 72</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 73</span>         <span style="color: #0000ff;">return</span> DateToString(date).substring(0, 7<span style="color: #000000;">);
</span><span style="color: #008080;"> 74</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 75</span> 
<span style="color: #008080;"> 76</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前的"HH:mm"时间格式字符串</span>
<span style="color: #008080;"> 77</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getCurrentTimeString() {
</span><span style="color: #008080;"> 78</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 79</span>         <span style="color: #0000ff;">return</span> DateToString(date).substring(11, 16<span style="color: #000000;">);
</span><span style="color: #008080;"> 80</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 81</span> 
<span style="color: #008080;"> 82</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前的"HH:mm:ss"时间格式字符串</span>
<span style="color: #008080;"> 83</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getCurrentTimeLongString() {
</span><span style="color: #008080;"> 84</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 85</span>         <span style="color: #0000ff;">return</span> DateToString(date).substring(11, 19<span style="color: #000000;">);
</span><span style="color: #008080;"> 86</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 87</span> 
<span style="color: #008080;"> 88</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 由日期时间字符串生成&ldquo;11月1日 星期一&rdquo;这样格式的字符串</span>
<span style="color: #008080;"> 89</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getShortDateTimeOfWeek(String dateTime) {
</span><span style="color: #008080;"> 90</span>         Calendar c =<span style="color: #000000;"> StringToGregorianCalendar(dateTime);
</span><span style="color: #008080;"> 91</span> 
<span style="color: #008080;"> 92</span>         <span style="color: #0000ff;">int</span> month = c.get(Calendar.MONTH) + 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 93</span>         <span style="color: #0000ff;">int</span> day =<span style="color: #000000;"> c.get(Calendar.DAY_OF_MONTH);
</span><span style="color: #008080;"> 94</span> 
<span style="color: #008080;"> 95</span>         String[] weekStr = <span style="color: #0000ff;">new</span> String[] { "星期日", "星期一", "星期二", "星期三", "星期四"<span style="color: #000000;">,
</span><span style="color: #008080;"> 96</span>                 "星期五", "星期六"<span style="color: #000000;"> };
</span><span style="color: #008080;"> 97</span>         String week = weekStr[c.get(Calendar.DAY_OF_WEEK) - 1<span style="color: #000000;">];
</span><span style="color: #008080;"> 98</span> 
<span style="color: #008080;"> 99</span>         String result = month + "月" + day + "日" + "  " +<span style="color: #000000;"> week;
</span><span style="color: #008080;">100</span> 
<span style="color: #008080;">101</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">102</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">103</span> 
<span style="color: #008080;">104</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 由日期时间字符串生成&ldquo;2015年11月1日 星期一&rdquo;这样格式的字符串</span>
<span style="color: #008080;">105</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getDateTimeOfWeek(String dateTime) {
</span><span style="color: #008080;">106</span>         Calendar c =<span style="color: #000000;"> StringToGregorianCalendar(dateTime);
</span><span style="color: #008080;">107</span> 
<span style="color: #008080;">108</span>         <span style="color: #0000ff;">int</span> year =<span style="color: #000000;"> c.get(Calendar.YEAR);
</span><span style="color: #008080;">109</span>         <span style="color: #0000ff;">int</span> month = c.get(Calendar.MONTH) + 1<span style="color: #000000;">;
</span><span style="color: #008080;">110</span>         <span style="color: #0000ff;">int</span> day =<span style="color: #000000;"> c.get(Calendar.DAY_OF_MONTH);
</span><span style="color: #008080;">111</span> 
<span style="color: #008080;">112</span>         String[] weekStr = <span style="color: #0000ff;">new</span> String[] { "星期日", "星期一", "星期二", "星期三", "星期四"<span style="color: #000000;">,
</span><span style="color: #008080;">113</span>                 "星期五", "星期六"<span style="color: #000000;"> };
</span><span style="color: #008080;">114</span>         String week = weekStr[c.get(Calendar.DAY_OF_WEEK) - 1<span style="color: #000000;">];
</span><span style="color: #008080;">115</span> 
<span style="color: #008080;">116</span>         String result = year + "年" + month + "月" + day + "日" + "  " +<span style="color: #000000;"> week;
</span><span style="color: #008080;">117</span> 
<span style="color: #008080;">118</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">119</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">120</span> 
<span style="color: #008080;">121</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 由日期时间字符串生成&ldquo;2015年11月1日 05:43&rdquo;这样格式的字符串</span>
<span style="color: #008080;">122</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String getDateTimeOfHourMinute(String dateTime) {
</span><span style="color: #008080;">123</span>         String result = ""<span style="color: #000000;">;
</span><span style="color: #008080;">124</span>         String date = dateTime.split(" ")[0<span style="color: #000000;">];
</span><span style="color: #008080;">125</span>         String time = dateTime.split(" ")[1<span style="color: #000000;">];
</span><span style="color: #008080;">126</span>         String[] dateArr = date.split("-"<span style="color: #000000;">);
</span><span style="color: #008080;">127</span>         String[] timeArr = time.split(":"<span style="color: #000000;">);
</span><span style="color: #008080;">128</span> 
<span style="color: #008080;">129</span>         <span style="color: #0000ff;">int</span> year = Integer.parseInt(dateArr[0<span style="color: #000000;">]);
</span><span style="color: #008080;">130</span>         <span style="color: #0000ff;">int</span> month = Integer.parseInt(dateArr[1<span style="color: #000000;">]);
</span><span style="color: #008080;">131</span>         <span style="color: #0000ff;">int</span> day = Integer.parseInt(dateArr[2<span style="color: #000000;">]);
</span><span style="color: #008080;">132</span> 
<span style="color: #008080;">133</span>         result = year + "年" + month + "月" + day + "日" + "  " + timeArr[0] + ":"
<span style="color: #008080;">134</span>                 + timeArr[1<span style="color: #000000;">];
</span><span style="color: #008080;">135</span> 
<span style="color: #008080;">136</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">137</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">138</span> 
<span style="color: #008080;">139</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 用年月日生成日期字符串，month取值范围：[0,13]</span>
<span style="color: #008080;">140</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getDateString(<span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span> month, <span style="color: #0000ff;">int</span><span style="color: #000000;"> day) {
</span><span style="color: #008080;">141</span> <span style="color: #000000;">        String m;
</span><span style="color: #008080;">142</span> <span style="color: #000000;">        String d;
</span><span style="color: #008080;">143</span> 
<span style="color: #008080;">144</span>         <span style="color: #0000ff;">if</span> (month &gt;= 9<span style="color: #000000;">) {
</span><span style="color: #008080;">145</span>             m = (month + 1) + ""<span style="color: #000000;">;
</span><span style="color: #008080;">146</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">147</span>             m = "0" + (month + 1<span style="color: #000000;">);
</span><span style="color: #008080;">148</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">149</span> 
<span style="color: #008080;">150</span>         <span style="color: #0000ff;">if</span> (day &gt;= 10<span style="color: #000000;">) {
</span><span style="color: #008080;">151</span>             d = day + ""<span style="color: #000000;">;
</span><span style="color: #008080;">152</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">153</span>             d = "0" +<span style="color: #000000;"> day;
</span><span style="color: #008080;">154</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">155</span> 
<span style="color: #008080;">156</span>         String dateString = year + "-" + m + "-" +<span style="color: #000000;"> d;
</span><span style="color: #008080;">157</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> dateString;
</span><span style="color: #008080;">158</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">159</span> 
<span style="color: #008080;">160</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 用年月生成年月日期字符串，month取值范围：[0,13]</span>
<span style="color: #008080;">161</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getDateString(<span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span><span style="color: #000000;"> month) {
</span><span style="color: #008080;">162</span> <span style="color: #000000;">        String m;
</span><span style="color: #008080;">163</span> <span style="color: #000000;">        String d;
</span><span style="color: #008080;">164</span> 
<span style="color: #008080;">165</span>         <span style="color: #0000ff;">if</span> (month &gt;= 9<span style="color: #000000;">) {
</span><span style="color: #008080;">166</span>             m = (month + 1) + ""<span style="color: #000000;">;
</span><span style="color: #008080;">167</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">168</span>             m = "0" + (month + 1<span style="color: #000000;">);
</span><span style="color: #008080;">169</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">170</span> 
<span style="color: #008080;">171</span>         String dateString = year + "-" +<span style="color: #000000;"> m;
</span><span style="color: #008080;">172</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> dateString;
</span><span style="color: #008080;">173</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">174</span> 
<span style="color: #008080;">175</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 用时、分生成时间字符串</span>
<span style="color: #008080;">176</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getTimeString(<span style="color: #0000ff;">int</span> hour, <span style="color: #0000ff;">int</span><span style="color: #000000;"> minute) {
</span><span style="color: #008080;">177</span> <span style="color: #000000;">        String h;
</span><span style="color: #008080;">178</span> <span style="color: #000000;">        String m;
</span><span style="color: #008080;">179</span> 
<span style="color: #008080;">180</span>         <span style="color: #0000ff;">if</span> (hour &gt;= 10<span style="color: #000000;">) {
</span><span style="color: #008080;">181</span>             h = hour + ""<span style="color: #000000;">;
</span><span style="color: #008080;">182</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">183</span>             h = "0" +<span style="color: #000000;"> hour;
</span><span style="color: #008080;">184</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">185</span> 
<span style="color: #008080;">186</span>         <span style="color: #0000ff;">if</span> (minute &gt;= 10<span style="color: #000000;">) {
</span><span style="color: #008080;">187</span>             m = minute + ""<span style="color: #000000;">;
</span><span style="color: #008080;">188</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">189</span>             m = "0" +<span style="color: #000000;"> minute;
</span><span style="color: #008080;">190</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">191</span> 
<span style="color: #008080;">192</span>         <span style="color: #0000ff;">return</span> h + ":" +<span style="color: #000000;"> m;
</span><span style="color: #008080;">193</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">194</span> 
<span style="color: #008080;">195</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 用时、分、秒生成时间字符串</span>
<span style="color: #008080;">196</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getTimeString(<span style="color: #0000ff;">int</span> hour, <span style="color: #0000ff;">int</span> minute, <span style="color: #0000ff;">int</span><span style="color: #000000;"> second) {
</span><span style="color: #008080;">197</span> <span style="color: #000000;">        String h;
</span><span style="color: #008080;">198</span> <span style="color: #000000;">        String m;
</span><span style="color: #008080;">199</span> <span style="color: #000000;">        String c;
</span><span style="color: #008080;">200</span> 
<span style="color: #008080;">201</span>         <span style="color: #0000ff;">if</span> (hour &gt;= 10<span style="color: #000000;">) {
</span><span style="color: #008080;">202</span>             h = hour + ""<span style="color: #000000;">;
</span><span style="color: #008080;">203</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">204</span>             h = "0" +<span style="color: #000000;"> hour;
</span><span style="color: #008080;">205</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">206</span> 
<span style="color: #008080;">207</span>         <span style="color: #0000ff;">if</span> (minute &gt;= 10<span style="color: #000000;">) {
</span><span style="color: #008080;">208</span>             m = minute + ""<span style="color: #000000;">;
</span><span style="color: #008080;">209</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">210</span>             m = "0" +<span style="color: #000000;"> minute;
</span><span style="color: #008080;">211</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">212</span> 
<span style="color: #008080;">213</span>         <span style="color: #0000ff;">if</span> (second &gt;= 10<span style="color: #000000;">) {
</span><span style="color: #008080;">214</span>             c = second + ""<span style="color: #000000;">;
</span><span style="color: #008080;">215</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">216</span>             c = "0" +<span style="color: #000000;"> second;
</span><span style="color: #008080;">217</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">218</span> 
<span style="color: #008080;">219</span>         <span style="color: #0000ff;">return</span> h + ":" + m + ":" +<span style="color: #000000;"> c;
</span><span style="color: #008080;">220</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">221</span> 
<span style="color: #008080;">222</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 该内部类是用于对日期时间字符串数组进行排序的</span>
<span style="color: #008080;">223</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> DateTimeString <span style="color: #0000ff;">implements</span> Comparable&lt;DateTimeString&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;">224</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String mDateTimeStr;
</span><span style="color: #008080;">225</span> 
<span style="color: #008080;">226</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTimeString(String dateTimeStr) {
</span><span style="color: #008080;">227</span>             mDateTimeStr =<span style="color: #000000;"> dateTimeStr;
</span><span style="color: #008080;">228</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">229</span> 
<span style="color: #008080;">230</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;">231</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> compareTo(DateTimeString another) {
</span><span style="color: #008080;">232</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> compareDateTimeString(mDateTimeStr.toString(),
</span><span style="color: #008080;">233</span> <span style="color: #000000;">                    another.toString());
</span><span style="color: #008080;">234</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">235</span> 
<span style="color: #008080;">236</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;">237</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">238</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> mDateTimeStr;
</span><span style="color: #008080;">239</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">240</span> 
<span style="color: #008080;">241</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">242</span> 
<span style="color: #008080;">243</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 对日期时间字符串数组进行排序,返回排序后的数组（排序后的顺序是从小到大）</span>
<span style="color: #008080;">244</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String[] sortDateTimeStringArray(String[] dateTimeStringArray) {
</span><span style="color: #008080;">245</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 将日期时间字符串数组转换成DateTimeString类型数组，DateTimeString实现了Comparable接口，可以进行排序</span>
<span style="color: #008080;">246</span>         DateTimeString[] tmpArray = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DateTimeString[dateTimeStringArray.length];
</span><span style="color: #008080;">247</span> 
<span style="color: #008080;">248</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 生成tmpArray数组</span>
<span style="color: #008080;">249</span>         <span style="color: #0000ff;">int</span> i = 0<span style="color: #000000;">;
</span><span style="color: #008080;">250</span>         DateTimeUtil tmpUtil = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DateTimeUtil();
</span><span style="color: #008080;">251</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String str : dateTimeStringArray) {
</span><span style="color: #008080;">252</span>             tmpArray[i++] = tmpUtil.<span style="color: #0000ff;">new</span><span style="color: #000000;"> DateTimeString(str);
</span><span style="color: #008080;">253</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">254</span> 
<span style="color: #008080;">255</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 对tmpArray进行排序</span>
<span style="color: #008080;">256</span> <span style="color: #000000;">        Arrays.sort(tmpArray);
</span><span style="color: #008080;">257</span> 
<span style="color: #008080;">258</span>         String[] result = <span style="color: #0000ff;">new</span><span style="color: #000000;"> String[tmpArray.length];
</span><span style="color: #008080;">259</span>         i = 0<span style="color: #000000;">;
</span><span style="color: #008080;">260</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (DateTimeString str : tmpArray) {
</span><span style="color: #008080;">261</span>             result[i++] =<span style="color: #000000;"> str.toString();
</span><span style="color: #008080;">262</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">263</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">264</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">265</span> 
<span style="color: #008080;">266</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 比较两个日期时间字符串的大小，如果str1比str2早，则返回-1，如果相等返回0，否则返回1</span>
<span style="color: #008080;">267</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> compareDateTimeString(String str1, String str2) {
</span><span style="color: #008080;">268</span>         Date d1 =<span style="color: #000000;"> StringToDate(str1);
</span><span style="color: #008080;">269</span>         Date d2 =<span style="color: #000000;"> StringToDate(str2);
</span><span style="color: #008080;">270</span>         <span style="color: #0000ff;">if</span> (d1.getTime() - d2.getTime() &lt; 0<span style="color: #000000;">) {
</span><span style="color: #008080;">271</span>             <span style="color: #0000ff;">return</span> -1<span style="color: #000000;">;
</span><span style="color: #008080;">272</span>         } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (d1.getTime() - d2.getTime() &gt; 0<span style="color: #000000;">) {
</span><span style="color: #008080;">273</span>             <span style="color: #0000ff;">return</span> 1<span style="color: #000000;">;
</span><span style="color: #008080;">274</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">275</span>             <span style="color: #0000ff;">return</span> 0<span style="color: #000000;">;
</span><span style="color: #008080;">276</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">277</span> 
<span style="color: #008080;">278</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">279</span> 
<span style="color: #008080;">280</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 时间日期字符串转换成Date对象
</span><span style="color: #008080;">281</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 注：dateTimeStr带不带前导0都是可以的，比如"2011-01-01 01:02:03"和"2011-1-1 1:2:3"都是合法的</span>
<span style="color: #008080;">282</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> Date StringToDate(String dateTimeStr) {
</span><span style="color: #008080;">283</span>         Date date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;">284</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> DateFormat fmt = DateFormat.getDateTimeInstance();</span>
<span style="color: #008080;">285</span>         DateFormat fmt = <span style="color: #0000ff;">new</span> SimpleDateFormat("yyyy-MM-dd HH:mm:ss"<span style="color: #000000;">);
</span><span style="color: #008080;">286</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">287</span>             date =<span style="color: #000000;"> fmt.parse(dateTimeStr);
</span><span style="color: #008080;">288</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> date;
</span><span style="color: #008080;">289</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ParseException e) {
</span><span style="color: #008080;">290</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">291</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">292</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> date;
</span><span style="color: #008080;">293</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">294</span> 
<span style="color: #008080;">295</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> Date对象转换成日期时间字符串</span>
<span style="color: #008080;">296</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String DateToString(Date date) {
</span><span style="color: #008080;">297</span>         String dateTimeStr = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">298</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> DateFormat fmt = DateFormat.getDateTimeInstance();</span>
<span style="color: #008080;">299</span>         DateFormat fmt = <span style="color: #0000ff;">new</span> SimpleDateFormat("yyyy-MM-dd HH:mm:ss"<span style="color: #000000;">);
</span><span style="color: #008080;">300</span>         dateTimeStr =<span style="color: #000000;"> fmt.format(date);
</span><span style="color: #008080;">301</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> dateTimeStr;
</span><span style="color: #008080;">302</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">303</span> 
<span style="color: #008080;">304</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 字符串转换成Calendar</span>
<span style="color: #008080;">305</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> Calendar StringToGregorianCalendar(String dateTimeStr) {
</span><span style="color: #008080;">306</span>         Date date =<span style="color: #000000;"> StringToDate(dateTimeStr);
</span><span style="color: #008080;">307</span>         Calendar calendar = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GregorianCalendar();
</span><span style="color: #008080;">308</span> 
<span style="color: #008080;">309</span> <span style="color: #000000;">        calendar.setTime(date);
</span><span style="color: #008080;">310</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> calendar;
</span><span style="color: #008080;">311</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">312</span> 
<span style="color: #008080;">313</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> Calendar转换成String</span>
<span style="color: #008080;">314</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String CalendarToString(Calendar calendar) {
</span><span style="color: #008080;">315</span>         Date date =<span style="color: #000000;"> ((GregorianCalendar) calendar).getTime();
</span><span style="color: #008080;">316</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> DateToString(date);
</span><span style="color: #008080;">317</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">318</span> 
<span style="color: #008080;">319</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 获取日期时间格式字符串表示的两日期时间之间相隔的天数（天数可为浮点型） AC</span>
<span style="color: #008080;">320</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> getDayNumDif(String str1, String str2) {
</span><span style="color: #008080;">321</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> DateFormat fmt = DateFormat.getDateTimeInstance();</span>
<span style="color: #008080;">322</span>         DateFormat fmt = <span style="color: #0000ff;">new</span> SimpleDateFormat("yyyy-MM-dd HH:mm:ss"<span style="color: #000000;">);
</span><span style="color: #008080;">323</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">324</span>             Date d1 =<span style="color: #000000;"> fmt.parse(str1);
</span><span style="color: #008080;">325</span>             Date d2 =<span style="color: #000000;"> fmt.parse(str2);
</span><span style="color: #008080;">326</span>             <span style="color: #0000ff;">long</span> dif = Math.abs(d1.getTime() -<span style="color: #000000;"> d2.getTime());
</span><span style="color: #008080;">327</span>             <span style="color: #0000ff;">double</span> dayDif = (<span style="color: #0000ff;">double</span>) (dif) / 1000 / (24 * 60 * 60<span style="color: #000000;">);
</span><span style="color: #008080;">328</span> 
<span style="color: #008080;">329</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 保留两位小数</span>
<span style="color: #008080;">330</span>             DecimalFormat df = <span style="color: #0000ff;">new</span> DecimalFormat("0.00"<span style="color: #000000;">);
</span><span style="color: #008080;">331</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> Double.parseDouble(df.format(dayDif));
</span><span style="color: #008080;">332</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ParseException e) {
</span><span style="color: #008080;">333</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">334</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">335</span>         <span style="color: #0000ff;">return</span> -1<span style="color: #000000;">;
</span><span style="color: #008080;">336</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">337</span> 
<span style="color: #008080;">338</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 求算术平均值函数，保留2位小数</span>
<span style="color: #008080;">339</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">double</span> getAverage(<span style="color: #0000ff;">double</span><span style="color: #000000;">[] data) {
</span><span style="color: #008080;">340</span>         <span style="color: #0000ff;">double</span> sum = 0<span style="color: #000000;">;
</span><span style="color: #008080;">341</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; data.length; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">342</span>             sum +=<span style="color: #000000;"> data[i];
</span><span style="color: #008080;">343</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">344</span> 
<span style="color: #008080;">345</span>         DecimalFormat df = <span style="color: #0000ff;">new</span> DecimalFormat("0.00"<span style="color: #000000;">);
</span><span style="color: #008080;">346</span>         <span style="color: #0000ff;">return</span> Double.parseDouble(df.format(sum /<span style="color: #000000;"> data.length));
</span><span style="color: #008080;">347</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">348</span> 
<span style="color: #008080;">349</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 输入一个时间日期字符串（格式：&ldquo;yyyy-MM-dd HH:mm:ss&rdquo;），输出num天后的时间日期字符串（num可为浮点数）</span>
<span style="color: #008080;">350</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String getNDayLatterDateTime(String str, <span style="color: #0000ff;">double</span><span style="color: #000000;"> num) {
</span><span style="color: #008080;">351</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 创建日期时间格式对象fmt
</span><span style="color: #008080;">352</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> DateFormat fmt = DateFormat.getDateTimeInstance();</span>
<span style="color: #008080;">353</span>         DateFormat fmt = <span style="color: #0000ff;">new</span> SimpleDateFormat("yyyy-MM-dd HH:mm:ss"<span style="color: #000000;">);
</span><span style="color: #008080;">354</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">355</span>             Date curDate =<span style="color: #000000;"> fmt.parse(str);
</span><span style="color: #008080;">356</span>             GregorianCalendar calendar = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GregorianCalendar();
</span><span style="color: #008080;">357</span> <span style="color: #000000;">            calendar.setTime(curDate);
</span><span style="color: #008080;">358</span> 
<span style="color: #008080;">359</span>             calendar.add(Calendar.SECOND, (<span style="color: #0000ff;">int</span>) (num * (24 * 60 * 60<span style="color: #000000;">)));
</span><span style="color: #008080;">360</span> 
<span style="color: #008080;">361</span>             Date newDate =<span style="color: #000000;"> calendar.getTime();
</span><span style="color: #008080;">362</span>             String newDateStr =<span style="color: #000000;"> fmt.format(newDate);
</span><span style="color: #008080;">363</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> newDateStr;
</span><span style="color: #008080;">364</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ParseException e) {
</span><span style="color: #008080;">365</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">366</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">367</span>         <span style="color: #0000ff;">return</span> ""<span style="color: #000000;">;
</span><span style="color: #008080;">368</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">369</span> 
<span style="color: #008080;">370</span> }</pre>
</div>
<p>　　</p>
<p>　　<strong>（二）Demo</strong></p>
<p>　　根据上面AlarmManagerUtil中的方法，下面要编写一个Demo，主要的功能就是能创建和取消可以周期执行的定时任务，定时任务的创建是在服务中执行的，而任务的具体内容是在广播接收器中执行的，并且在手机重启后定时任务还能正常运作。</p>
<p>　　1、布局文件activity_main.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/start_service_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="开启定时服务"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">13</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/cancel_service_btn"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="取消定时服务"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Calendar;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 开启服务按钮</span>
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button startServiceBtn;
</span><span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 取消服务按钮</span>
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button cancelServiceBtn;
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 模拟的task id</span>
<span style="color: #008080;">18</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> mTaskId = 0<span style="color: #000000;">;
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">22</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">23</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>         startServiceBtn =<span style="color: #000000;"> (Button) findViewById(R.id.start_service_btn);
</span><span style="color: #008080;">26</span>         cancelServiceBtn =<span style="color: #000000;"> (Button) findViewById(R.id.cancel_service_btn);
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>         startServiceBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">29</span>         cancelServiceBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">33</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">34</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;">35</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.start_service_btn:
</span><span style="color: #008080;">36</span>             Intent i = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, AlarmService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">37</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 获取20秒之后的日期时间字符串</span>
<span style="color: #008080;">38</span>             i.putExtra("alarm_time"<span style="color: #000000;">,
</span><span style="color: #008080;">39</span>                     DateTimeUtil.getNLaterDateTimeString(Calendar.SECOND, 20<span style="color: #000000;">));
</span><span style="color: #008080;">40</span>             i.putExtra("task_id"<span style="color: #000000;">, mTaskId);
</span><span style="color: #008080;">41</span> <span style="color: #000000;">            startService(i);
</span><span style="color: #008080;">42</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">43</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.cancel_service_btn:
</span><span style="color: #008080;">44</span>             AlarmManagerUtil.cancelAlarmBroadcast(<span style="color: #0000ff;">this</span><span style="color: #000000;">, mTaskId,
</span><span style="color: #008080;">45</span>                     AlarmReceiver.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">46</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">47</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">48</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">49</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">50</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">51</span> }</pre>
</div>
<p>　　3、创建一个服务AlarmService，为了让不同的定时任务运行在不同的线程中，让AlarmService继承支持线程的IntentService类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Date;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.AlarmManager;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.IntentService;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.PendingIntent;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Service;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.IBinder;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.SystemClock;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AlarmService <span style="color: #0000ff;">extends</span><span style="color: #000000;"> IntentService {
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 从其他地方通过Intent传递过来的提醒时间</span>
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String alarmDateTime;
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> AlarmService() {
</span><span style="color: #008080;">18</span>         <span style="color: #0000ff;">super</span>("AlarmService"<span style="color: #000000;">);
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onHandleIntent(Intent intent) {
</span><span style="color: #008080;">23</span>         alarmDateTime = intent.getStringExtra("alarm_time"<span style="color: #000000;">);
</span><span style="color: #008080;">24</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> taskId用于区分不同的任务</span>
<span style="color: #008080;">25</span>         <span style="color: #0000ff;">int</span> taskId = intent.getIntExtra("task_id", 0<span style="color: #000000;">);
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>         Log.d("AlarmService", "executed at " + <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date().toString()
</span><span style="color: #008080;">28</span>                 + " @Thread id：" +<span style="color: #000000;"> Thread.currentThread().getId());
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span>         <span style="color: #0000ff;">long</span> alarmDateTimeMillis =<span style="color: #000000;"> DateTimeUtil.stringToMillis(alarmDateTime);
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>         AlarmManagerUtil.sendRepeatAlarmBroadcast(<span style="color: #0000ff;">this</span><span style="color: #000000;">, taskId,
</span><span style="color: #008080;">33</span>                 AlarmManager.RTC_WAKEUP, alarmDateTimeMillis, 10 * 1000<span style="color: #000000;">,
</span><span style="color: #008080;">34</span>                 AlarmReceiver.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">37</span> 
<span style="color: #008080;">38</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">39</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">40</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">41</span>         Log.d("Destroy", "Alarm Service Destroy"<span style="color: #000000;">);
</span><span style="color: #008080;">42</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">43</span> 
<span style="color: #008080;">44</span> }</pre>
</div>
<p>　　4、创建广播接收器AlarmReceiver：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.BroadcastReceiver;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.text.method.DateTimeKeyListener;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AlarmReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">        ToastUtil.showShort(context,
</span><span style="color: #008080;">13</span>                 "从服务启动广播：at " +<span style="color: #000000;"> DateTimeUtil.getCurrentDateTimeString());
</span><span style="color: #008080;">14</span>         Log.d("Alarm", "从服务启动广播：at " +<span style="color: #000000;"> DateTimeUtil.getCurrentDateTimeString());
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> }</pre>
</div>
<p>　　5、为了让定时服务在手机重启后也能正常运行，再创建一个系统广播接收器BootCompleteReceiver，监听手机一旦开机完成就启动服务AlarmService：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 开机重新启动服务AlarmService
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> BootCompleteReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;"> 7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 模拟的task id</span>
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> mTaskId = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">12</span>         Log.d("定时服务", "开机启动"<span style="color: #000000;">);
</span><span style="color: #008080;">13</span>         ToastUtil.showShort(context, "定时服务开机启动"<span style="color: #000000;">);
</span><span style="color: #008080;">14</span>         Intent i = <span style="color: #0000ff;">new</span> Intent(context, AlarmService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">15</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 获取3分钟之后的日期时间字符串</span>
<span style="color: #008080;">16</span>         i.putExtra("alarm_time"<span style="color: #000000;">,
</span><span style="color: #008080;">17</span>                 DateTimeUtil.getNLaterDateTimeString(Calendar.MINUTE, 3<span style="color: #000000;">));
</span><span style="color: #008080;">18</span>         i.putExtra("task_id"<span style="color: #000000;">, mTaskId);
</span><span style="color: #008080;">19</span> <span style="color: #000000;">        context.startService(i);
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">21</span> }</pre>
</div>
<p>　　6、最后是在AndroidManifest.xml文件中注册服务、广播接收器，申请相应的权限：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">manifest </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    package</span><span style="color: #0000ff;">="com.example.servicebestpractice"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:versionCode</span><span style="color: #0000ff;">="1"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:versionName</span><span style="color: #0000ff;">="1.0"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-sdk
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:minSdkVersion</span><span style="color: #0000ff;">="14"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:targetSdkVersion</span><span style="color: #0000ff;">="14"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.RECEIVE_BOOT_COMPLETED"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">application
</span><span style="color: #008080;">14</span>         <span style="color: #ff0000;">android:allowBackup</span><span style="color: #0000ff;">="true"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:icon</span><span style="color: #0000ff;">="@drawable/ic_launcher"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:label</span><span style="color: #0000ff;">="@string/app_name"</span>
<span style="color: #008080;">17</span> <span style="color: #ff0000;">        android:theme</span><span style="color: #0000ff;">="@style/AppTheme"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">18</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity
</span><span style="color: #008080;">19</span>             <span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".MainActivity"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">            android:label</span><span style="color: #0000ff;">="@string/app_name"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">21</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">22</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.action.MAIN"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">category </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.category.LAUNCHER"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">25</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">26</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activity</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">service </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".AlarmService"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">29</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">service</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".AlarmReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">32</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">33</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".BootCompleteReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">34</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">35</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.action.BOOT_COMPLETED"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">36</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">37</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">38</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">application</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">manifest</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;　　7、点击&ldquo;开启定时服务&rdquo;按钮后一段时间，最后点击&ldquo;取消定时服务&rdquo;按钮后的运行结果截图：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160420164151288-1718156456.png" alt="" /></p>
<p>　　8、存在的问题：定时任务在手机上测试时，计时不精确，但在模拟器上是精确的。这个问题现在还没有找到很好的解决方案。　　</p>]]></description></item><item><title>ListView的优化机制和滑动时数据错乱的讨论</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/18/5402980.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 17 Apr 2016 16:56:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/18/5402980.html</guid><description><![CDATA[<p>　　Refer：<a href="http://www.myexception.cn/mobile/1612364.html">http://www.myexception.cn/mobile/1612364.html</a></p>
<p>　　<strong>（一）Android ListView的基本用法</strong></p>
<p>　　1、创建一个实体类Person，为其添加Getter和Setter方法，作为ListView适配器的类型：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Person {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> imageId;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> age;
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">public</span> Person(<span style="color: #0000ff;">int</span> imageId, String name, <span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">this</span>.imageId =<span style="color: #000000;"> imageId;
</span><span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getImageId() {
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> imageId;
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
</span><span style="color: #008080;">17</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getAge() {
</span><span style="color: #008080;">21</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> age;
</span><span style="color: #008080;">22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setImageId(<span style="color: #0000ff;">int</span><span style="color: #000000;"> imageId) {
</span><span style="color: #008080;">25</span>         <span style="color: #0000ff;">this</span>.imageId =<span style="color: #000000;"> imageId;
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
</span><span style="color: #008080;">29</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setAge(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
</span><span style="color: #008080;">34</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">35</span>     
<span style="color: #008080;">36</span>     
<span style="color: #008080;">37</span> 
<span style="color: #008080;">38</span> }</pre>
</div>
<p>　　2、创建person_item.xml文件，其中包含一个ImageView和两个TextView：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:id</span><span style="color: #0000ff;">="@+id/person_item_ll"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;"> 6</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="horizontal"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageView
</span><span style="color: #008080;"> 9</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/image_iv"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">11</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">12</span> <span style="color: #ff0000;">        android:src</span><span style="color: #0000ff;">="@drawable/img"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;">15</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="0dp"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">17</span> <span style="color: #ff0000;">        android:layout_weight</span><span style="color: #0000ff;">="1"</span>
<span style="color: #008080;">18</span> <span style="color: #ff0000;">        android:orientation</span><span style="color: #0000ff;">="vertical"</span>
<span style="color: #008080;">19</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="center"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">22</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/name_tv"</span>
<span style="color: #008080;">23</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">24</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">25</span> <span style="color: #ff0000;">            android:gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">26</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="Tom"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">29</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/age_tv"</span>
<span style="color: #008080;">30</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">31</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">32</span> <span style="color: #ff0000;">            android:gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">33</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="20"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">34</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　3、创建自定义适配器类PersonAdapter，以Person类为泛型，继承自ArrayAdapter&lt;Person&gt;，重写父类的构造方法和getView方法，getView方法会在每个子项被滚动到屏幕内的时候调用：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> PersonAdapter <span style="color: #0000ff;">extends</span> ArrayAdapter&lt;Person&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mResourceId;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">public</span> PersonAdapter(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> textViewResourceId,
</span><span style="color: #008080;"> 5</span>             List&lt;Person&gt;<span style="color: #000000;"> objects) {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, textViewResourceId, objects);
</span><span style="color: #008080;"> 7</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> textViewResourceId：ListView子项布局的id;objects：数据</span>
<span style="color: #008080;"> 8</span>         mResourceId =<span style="color: #000000;"> textViewResourceId;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {
</span><span style="color: #008080;">13</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.获取当前项的Person实例</span>
<span style="color: #008080;">14</span>         Person person =<span style="color: #000000;"> getItem(position);
</span><span style="color: #008080;">15</span>         
<span style="color: #008080;">16</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.为这个子项加载传入的布局</span>
<span style="color: #008080;">17</span>         View view = LayoutInflater.from(getContext()).inflate(mResourceId, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">18</span>         
<span style="color: #008080;">19</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.用view的findViewById方法获取到子项布局控件的实例</span>
<span style="color: #008080;">20</span>         ImageView imgIv =<span style="color: #000000;"> (ImageView) view.findViewById(R.id.image_iv);
</span><span style="color: #008080;">21</span>         TextView nameTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.name_tv);
</span><span style="color: #008080;">22</span>         TextView ageTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.age_tv);
</span><span style="color: #008080;">23</span>         
<span style="color: #008080;">24</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 4.设置相应控件的内容</span>
<span style="color: #008080;">25</span> <span style="color: #000000;">        imgIv.setImageResource(person.getImageId());
</span><span style="color: #008080;">26</span> <span style="color: #000000;">        nameTv.setText(person.getName());
</span><span style="color: #008080;">27</span>         ageTv.setText(person.getAge() + ""<span style="color: #000000;">);
</span><span style="color: #008080;">28</span>         
<span style="color: #008080;">29</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 5.为imgIv设置点击事件，点击它的时候换图片</span>
<span style="color: #008080;">30</span>         <span style="color: #0000ff;">final</span> ImageView finalImgIv =<span style="color: #000000;"> imgIv;
</span><span style="color: #008080;">31</span>         imgIv.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;">32</span>             
<span style="color: #008080;">33</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">34</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">35</span> <span style="color: #000000;">                finalImgIv.setImageResource(R.drawable.another_img);
</span><span style="color: #008080;">36</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">37</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">38</span>         
<span style="color: #008080;">39</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 6.返回view</span>
<span style="color: #008080;">40</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> view;
</span><span style="color: #008080;">41</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">42</span> 
<span style="color: #008080;">43</span> }</pre>
</div>
<p>　　4、activity_main.xml</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ListView
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/person_info_lv"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="match_parent"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ListView</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　5、MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> ListView personInfoLv;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String[] names;
</span><span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;">[] ages;
</span><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">private</span> List&lt;Person&gt;<span style="color: #000000;"> persons;
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> imageId;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span>         personInfoLv =<span style="color: #000000;"> (ListView) findViewById(R.id.person_info_lv);
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>         names = <span style="color: #0000ff;">new</span> String[] { "AAA", "BBB", "CCC", "DDD", "EEE", "FFF", "GGG"<span style="color: #000000;">,
</span><span style="color: #008080;">18</span>                 "HHH", "III", "JJJ", "KKK", "LLL", "MMM", "NNN", "OOO"<span style="color: #000000;"> };
</span><span style="color: #008080;">19</span>         ages = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">int</span><span style="color: #000000;">[names.length];
</span><span style="color: #008080;">20</span>         persons = <span style="color: #0000ff;">new</span> ArrayList&lt;Person&gt;<span style="color: #000000;">();
</span><span style="color: #008080;">21</span>         imageId =<span style="color: #000000;"> R.drawable.img;
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; names.length; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">24</span>             ages[i] = i + 1<span style="color: #000000;">;
</span><span style="color: #008080;">25</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">26</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 创建Person信息列表</span>
<span style="color: #008080;">27</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; names.length; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">28</span>             Person person = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Person(imageId, names[i], ages[i]);
</span><span style="color: #008080;">29</span> <span style="color: #000000;">            persons.add(person);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">31</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 创建adapter</span>
<span style="color: #008080;">32</span>         PersonAdapter adapter = <span style="color: #0000ff;">new</span> PersonAdapter(MainActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,
</span><span style="color: #008080;">33</span> <span style="color: #000000;">                R.layout.person_item, persons);
</span><span style="color: #008080;">34</span>         
<span style="color: #008080;">35</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置adapter</span>
<span style="color: #008080;">36</span> <span style="color: #000000;">        personInfoLv.setAdapter(adapter);
</span><span style="color: #008080;">37</span> 
<span style="color: #008080;">38</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">39</span> }</pre>
</div>
<p>　　运行效果：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160418004321473-852059049.png" alt="" /></p>
<p><strong>　</strong></p>
<p><strong>　　（二）ListView的性能优化及滑动时数据显示错乱问题解决</strong></p>
<p>　　1、在adapter的getView方法中，每次都将布局重新加载一遍，当快速滚动屏幕时候就会带来性能问题；此外，View的findViewById方法对性能的影响也比较大。为此要做一些优化，主要使用缓存和ViewHolder两种策略。缓存机制如下图，可以实现item的复用（假设一屏可以容纳7个item）</p>
<p style="text-align: center;"><img src="http://www.myexception.cn/img/2014/04/03/095731120.jpg" alt="" width="569" height="406" /></p>
<p style="text-align: left;">　　2、假设现在有两个新需求：一个是把列表的前三项的背景颜色设置成蓝色的，另一个是在每次点击每一item的图片时，不仅要修改图片，还要把修改后的图片id存到列表对象中去，这个可以用控件的setTag方法来实现。加上实现优化策略，最终修改原adapter如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> PersonAdapter <span style="color: #0000ff;">extends</span> ArrayAdapter&lt;Person&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mResourceId;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">public</span> PersonAdapter(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> textViewResourceId,
</span><span style="color: #008080;"> 5</span>             List&lt;Person&gt;<span style="color: #000000;"> objects) {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, textViewResourceId, objects);
</span><span style="color: #008080;"> 7</span>         mResourceId =<span style="color: #000000;"> textViewResourceId;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {
</span><span style="color: #008080;">12</span>         Person person =<span style="color: #000000;"> getItem(position);
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">        View view;
</span><span style="color: #008080;">15</span> <span style="color: #000000;">        ViewHolder viewHolder;
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> ==<span style="color: #000000;"> convertView) {
</span><span style="color: #008080;">18</span>             view =<span style="color: #000000;"> LayoutInflater.from(getContext()).inflate(
</span><span style="color: #008080;">19</span>                     R.layout.person_item, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>             viewHolder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ViewHolder();
</span><span style="color: #008080;">22</span>             viewHolder.imageIv =<span style="color: #000000;"> (ImageView) view.findViewById(R.id.image_iv);
</span><span style="color: #008080;">23</span>             viewHolder.nameTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.name_tv);
</span><span style="color: #008080;">24</span>             viewHolder.ageTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.age_tv);
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 点击图片的时候更换图片，并更改列表对象中的imageId的值</span>
<span style="color: #008080;">27</span>             <span style="color: #0000ff;">final</span> ViewHolder finalViewHolder =<span style="color: #000000;"> viewHolder;
</span><span style="color: #008080;">28</span>             viewHolder.imageIv.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">31</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">32</span>                     Person p =<span style="color: #000000;"> (Person) finalViewHolder.imageIv.getTag();
</span><span style="color: #008080;">33</span> 
<span style="color: #008080;">34</span>                     <span style="color: #0000ff;">int</span><span style="color: #000000;"> currentImageId;
</span><span style="color: #008080;">35</span>                     <span style="color: #0000ff;">if</span> (p.getImageId() ==<span style="color: #000000;"> R.drawable.img) {
</span><span style="color: #008080;">36</span> <span style="color: #000000;">                        finalViewHolder.imageIv
</span><span style="color: #008080;">37</span> <span style="color: #000000;">                                .setImageResource(R.drawable.another_img);
</span><span style="color: #008080;">38</span>                         currentImageId =<span style="color: #000000;"> R.drawable.another_img;
</span><span style="color: #008080;">39</span>                     } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">40</span> <span style="color: #000000;">                        finalViewHolder.imageIv
</span><span style="color: #008080;">41</span> <span style="color: #000000;">                                .setImageResource(R.drawable.img);
</span><span style="color: #008080;">42</span>                         currentImageId =<span style="color: #000000;"> R.drawable.img;
</span><span style="color: #008080;">43</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">44</span> 
<span style="color: #008080;">45</span> <span style="color: #000000;">                    p.setImageId(currentImageId);
</span><span style="color: #008080;">46</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">47</span> <span style="color: #000000;">            });
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span> <span style="color: #000000;">            view.setTag(viewHolder);
</span><span style="color: #008080;">50</span> <span style="color: #000000;">            viewHolder.imageIv.setTag(person);
</span><span style="color: #008080;">51</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">52</span>             view =<span style="color: #000000;"> convertView;
</span><span style="color: #008080;">53</span>             viewHolder =<span style="color: #000000;"> (ViewHolder) view.getTag();
</span><span style="color: #008080;">54</span> <span style="color: #000000;">            viewHolder.imageIv.setTag(person);
</span><span style="color: #008080;">55</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">56</span> 
<span style="color: #008080;">57</span> <span style="color: #000000;">        viewHolder.imageIv.setImageResource(person.getImageId());
</span><span style="color: #008080;">58</span> <span style="color: #000000;">        viewHolder.nameTv.setText(person.getName());
</span><span style="color: #008080;">59</span>         viewHolder.ageTv.setText(person.getAge() + ""<span style="color: #000000;">);
</span><span style="color: #008080;">60</span> 
<span style="color: #008080;">61</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 为前三个item设置背景颜色为蓝色</span>
<span style="color: #008080;">62</span>         <span style="color: #0000ff;">if</span> (position &lt; 3<span style="color: #000000;">) {
</span><span style="color: #008080;">63</span>             view.setBackgroundColor(0xFF0000FF<span style="color: #000000;">);
</span><span style="color: #008080;">64</span> <span style="color: #000000;">        } 
</span><span style="color: #008080;">65</span> 
<span style="color: #008080;">66</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> view;
</span><span style="color: #008080;">67</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">68</span> 
<span style="color: #008080;">69</span>     <span style="color: #0000ff;">class</span><span style="color: #000000;"> ViewHolder {
</span><span style="color: #008080;">70</span> <span style="color: #000000;">        ImageView imageIv;
</span><span style="color: #008080;">71</span> <span style="color: #000000;">        TextView nameTv;
</span><span style="color: #008080;">72</span> <span style="color: #000000;">        TextView ageTv;
</span><span style="color: #008080;">73</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">74</span> 
<span style="color: #008080;">75</span> }</pre>
</div>
<p>　　3、这时发现在滑动ListView后，不仅是前三个item的背景颜色是蓝色的，而且后面有些项的背景颜色也变成了蓝色的，而且毫无规律可循。滑动几次后的效果如下图所示：</p>
<p style="text-align: center;">　　<img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160418005504863-1456057518.png" alt="" /></p>
<p>　　这主要是因为缓存复用引起的问题，只需要在原来代码的64行后面添加else判断即可，将不是前三行的item的背景颜色设置成默认的白色的。最终代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> PersonAdapter <span style="color: #0000ff;">extends</span> ArrayAdapter&lt;Person&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mResourceId;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">public</span> PersonAdapter(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> textViewResourceId,
</span><span style="color: #008080;"> 5</span>             List&lt;Person&gt;<span style="color: #000000;"> objects) {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, textViewResourceId, objects);
</span><span style="color: #008080;"> 7</span>         mResourceId =<span style="color: #000000;"> textViewResourceId;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {
</span><span style="color: #008080;">12</span>         Person person =<span style="color: #000000;"> getItem(position);
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">        View view;
</span><span style="color: #008080;">15</span> <span style="color: #000000;">        ViewHolder viewHolder;
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> ==<span style="color: #000000;"> convertView) {
</span><span style="color: #008080;">18</span>             view =<span style="color: #000000;"> LayoutInflater.from(getContext()).inflate(
</span><span style="color: #008080;">19</span>                     R.layout.person_item, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>             viewHolder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ViewHolder();
</span><span style="color: #008080;">22</span>             viewHolder.imageIv =<span style="color: #000000;"> (ImageView) view.findViewById(R.id.image_iv);
</span><span style="color: #008080;">23</span>             viewHolder.nameTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.name_tv);
</span><span style="color: #008080;">24</span>             viewHolder.ageTv =<span style="color: #000000;"> (TextView) view.findViewById(R.id.age_tv);
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 点击图片的时候更换图片，并更改列表对象中的imageId的值</span>
<span style="color: #008080;">27</span>             <span style="color: #0000ff;">final</span> ViewHolder finalViewHolder =<span style="color: #000000;"> viewHolder;
</span><span style="color: #008080;">28</span>             viewHolder.imageIv.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">31</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">32</span>                     Person p =<span style="color: #000000;"> (Person) finalViewHolder.imageIv.getTag();
</span><span style="color: #008080;">33</span> 
<span style="color: #008080;">34</span>                     <span style="color: #0000ff;">int</span><span style="color: #000000;"> currentImageId;
</span><span style="color: #008080;">35</span>                     <span style="color: #0000ff;">if</span> (p.getImageId() ==<span style="color: #000000;"> R.drawable.img) {
</span><span style="color: #008080;">36</span> <span style="color: #000000;">                        finalViewHolder.imageIv
</span><span style="color: #008080;">37</span> <span style="color: #000000;">                                .setImageResource(R.drawable.another_img);
</span><span style="color: #008080;">38</span>                         currentImageId =<span style="color: #000000;"> R.drawable.another_img;
</span><span style="color: #008080;">39</span>                     } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">40</span> <span style="color: #000000;">                        finalViewHolder.imageIv
</span><span style="color: #008080;">41</span> <span style="color: #000000;">                                .setImageResource(R.drawable.img);
</span><span style="color: #008080;">42</span>                         currentImageId =<span style="color: #000000;"> R.drawable.img;
</span><span style="color: #008080;">43</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">44</span> 
<span style="color: #008080;">45</span> <span style="color: #000000;">                    p.setImageId(currentImageId);
</span><span style="color: #008080;">46</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">47</span> <span style="color: #000000;">            });
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span> <span style="color: #000000;">            view.setTag(viewHolder);
</span><span style="color: #008080;">50</span> <span style="color: #000000;">            viewHolder.imageIv.setTag(person);
</span><span style="color: #008080;">51</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">52</span>             view =<span style="color: #000000;"> convertView;
</span><span style="color: #008080;">53</span>             viewHolder =<span style="color: #000000;"> (ViewHolder) view.getTag();
</span><span style="color: #008080;">54</span> <span style="color: #000000;">            viewHolder.imageIv.setTag(person);
</span><span style="color: #008080;">55</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">56</span> 
<span style="color: #008080;">57</span> <span style="color: #000000;">        viewHolder.imageIv.setImageResource(person.getImageId());
</span><span style="color: #008080;">58</span> <span style="color: #000000;">        viewHolder.nameTv.setText(person.getName());
</span><span style="color: #008080;">59</span>         viewHolder.ageTv.setText(person.getAge() + ""<span style="color: #000000;">);
</span><span style="color: #008080;">60</span> 
<span style="color: #008080;">61</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 为前三个item设置背景颜色为蓝色</span>
<span style="color: #008080;">62</span>         <span style="color: #0000ff;">if</span> (position &lt; 3<span style="color: #000000;">) {
</span><span style="color: #008080;">63</span>             view.setBackgroundColor(0xFF0000FF<span style="color: #000000;">);
</span><span style="color: #008080;">64</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">65</span>             view.setBackgroundColor(0xFFFFFFFF<span style="color: #000000;">);
</span><span style="color: #008080;">66</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">67</span> 
<span style="color: #008080;">68</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> view;
</span><span style="color: #008080;">69</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">70</span> 
<span style="color: #008080;">71</span>     <span style="color: #0000ff;">class</span><span style="color: #000000;"> ViewHolder {
</span><span style="color: #008080;">72</span> <span style="color: #000000;">        ImageView imageIv;
</span><span style="color: #008080;">73</span> <span style="color: #000000;">        TextView nameTv;
</span><span style="color: #008080;">74</span> <span style="color: #000000;">        TextView ageTv;
</span><span style="color: #008080;">75</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">76</span> 
<span style="color: #008080;">77</span> }</pre>
</div>
<p>&nbsp;　　总结：总之防止错乱关键就是一句话：哪里对控件有修改，另外的地方就要把它改回来。</p>
<p>&nbsp;</p>]]></description></item><item><title>Android连续按返回键两次实现退出程序</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5374088.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 10 Apr 2016 06:16:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5374088.html</guid><description><![CDATA[<p>　　思路：重写Activity的onKeyDown方法，判断按键是不是返回键，如果是，则再判断按下的时间和上次按下的时间之间的差值（毫秒数）是不是大于2000，如果不大于，则用finish()方法结束程序。Demo如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.KeyEvent;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;"> 5</span>  
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> TestActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span> mExitTime;  <span style="color: #008000;">//</span><span style="color: #008000;">存在时间，初值为0，用于和当前时间（毫秒数）做差值</span>
<span style="color: #008080;"> 8</span>      
<span style="color: #008080;"> 9</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">11</span>                 <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">12</span> <span style="color: #000000;">                setContentView(R.layout.main);
</span><span style="color: #008080;">13</span>  
<span style="color: #008080;">14</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">15</span>     
<span style="color: #008080;">16</span> <span style="color: #000000;">    @Override     
</span><span style="color: #008080;">17</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span> onKeyDown(<span style="color: #0000ff;">int</span><span style="color: #000000;"> keyCode, KeyEvent event) {
</span><span style="color: #008080;">18</span>                 <span style="color: #0000ff;">if</span> (keyCode ==<span style="color: #000000;"> KeyEvent.KEYCODE_BACK) {
</span><span style="color: #008080;">19</span>                         <span style="color: #0000ff;">if</span> ((System.currentTimeMillis() - mExitTime) &gt; 2000) {  <span style="color: #008000;">//</span><span style="color: #008000;">mExitTime的初始值为0，currentTimeMillis()肯定大于2000（毫秒），所以第一次按返回键的时候一定会进入此判断</span>
<span style="color: #008080;">20</span> <span style="color: #008080;">21</span>                                 Toast.makeText(<span style="color: #0000ff;">this</span>, "再按一次退出程序"<span style="color: #000000;">, Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">22</span>                                 mExitTime =<span style="color: #000000;"> System.currentTimeMillis();
</span><span style="color: #008080;">23</span>  
<span style="color: #008080;">24</span>                         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                                finish();
</span><span style="color: #008080;">26</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">27</span>                         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">28</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">29</span>                 <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">super</span><span style="color: #000000;">.onKeyDown(keyCode, event);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">31</span> }</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>Android去除系统默认的标题栏和全屏的三种方法</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5373785.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 10 Apr 2016 04:21:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5373785.html</guid><description><![CDATA[<p><strong>　　</strong>在做应用的时候，很多时候是不需要系统自带的标题栏的，而是自己去实现标题栏，这就要去掉系统的标题栏，下面总结了三种方法。全屏也是一样的道理，也总结了实现的三种方法。</p>
<p><strong>　　（一）去除标题栏</strong></p>
<p>　　1、方法1</p>
<p>　　在Activity的onCreate方法中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> requestWindowFeature(Window.FEATURE_NO_TITLE);<span style="color: #008000;">//</span><span style="color: #008000;">去掉标题栏
</span><span style="color: #008080;">2</span> <span style="color: #008000;">//</span><span style="color: #008000;">注意这句一定要写在setContentView()方法的前面，不然会报错的</span></pre>
</div>
<p>　　但是这种方法的缺陷是，因为在onCreate方法中才去掉标题栏，所以在这之前会发现标题栏还是会一闪而过，去的不彻底，那么用下面两种方法就能够避免这个问题。</p>
<p>　　2、方法2</p>
<p>　　在AndroidManifest.xml文件中定义：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">application 
</span><span style="color: #008080;">2</span> <span style="color: #ff0000;">android:icon</span><span style="color: #0000ff;">="@drawable/icon"</span>  
<span style="color: #008080;">3</span> <span style="color: #ff0000;">android:label</span><span style="color: #0000ff;">="@string/app_name"</span> 
<span style="color: #008080;">4</span> <span style="color: #ff0000;">android:theme</span><span style="color: #0000ff;">="@android:style/Theme.NoTitleBar"</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　这样就会把整个应用的每个界面都去掉标题栏，如果只是想把某些活动去掉标题栏，那么把android:theme="@android:style/Theme.NoTitleBar"属性放在Activity标签即可。</p>
<p>　　3、方法3（推荐，便于维护和扩展）</p>
<p>　　（1）先在styles.xml中定义名为NoTitle的style：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="AppBaseTheme"</span><span style="color: #ff0000;"> parent</span><span style="color: #0000ff;">="android:Theme.Light"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="NoTitle"</span><span style="color: #ff0000;"> parent</span><span style="color: #0000ff;">="AppBaseTheme"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="android:windowNoTitle"</span><span style="color: #0000ff;">&gt;</span>true<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）在AndroidManifest.xml文件中定义：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity
</span><span style="color: #008080;">2</span>             <span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="XXX"</span>
<span style="color: #008080;">3</span> <span style="color: #ff0000;">            android:label</span><span style="color: #0000ff;">="@string/app_name"</span> 
<span style="color: #008080;">4</span> <span style="color: #ff0000;">            android:theme</span><span style="color: #0000ff;">="@style/NoTitle"</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<p>　　<strong>（二）全屏</strong></p>
<p>　　和去除标题栏的三种方法类似，全屏也有三种方法.</p>
<p>　　1、方法1</p>
<p>　　在Activity的onCreate方法中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</pre>
</div>
<p>　　2、方法2</p>
<p>　　在AndroidManifest.xml文件中定义：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> android:theme="@android:style/Theme.NoTitleBar.Fullscreen"</pre>
</div>
<p>　　3、方法3（推荐）</p>
<p>　　（1）styles.xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　 <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 全屏style </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="FullScreen"</span><span style="color: #ff0000;"> parent</span><span style="color: #0000ff;">="AppBaseTheme"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="android:windowNoTitle"</span><span style="color: #0000ff;">&gt;</span>true<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="android:windowFullscreen"</span><span style="color: #0000ff;">&gt;</span>true<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）AndroidManifest.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity
</span><span style="color: #008080;">2</span>             <span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="XXX"</span>
<span style="color: #008080;">3</span> <span style="color: #ff0000;">            android:theme</span><span style="color: #0000ff;">="@style/FullScreen"</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<p>　</p>]]></description></item><item><title>Android自定义控件在不同状态下的属性</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5373610.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 10 Apr 2016 03:13:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5373610.html</guid><description><![CDATA[<p>　　在写代码的时候，有时候需要控件在不同状态下显示不同的外观，比如在按钮按下的时候要变颜色，EditText获取焦点时候边框要变颜色等。那么下面就来梳理一下这些是怎么实现的。</p>
<p>　　<strong>（一）按钮按下时候变颜色</strong></p>
<p>　　1、在项目的drawable目录下创建selector_title_imagebutton_bg.xml文件，内容如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">selector </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> title栏ImageButton按下去时候的颜色 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:drawable</span><span style="color: #0000ff;">="@drawable/LightBlue"</span><span style="color: #ff0000;"> android:state_pressed</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> title栏ImageButton正常时候的颜色 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:drawable</span><span style="color: #0000ff;">="@drawable/ThemeDefault"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 注：LightBlue和ThemeDefault都是在color.xml文件中定义的drawable类型的颜色值 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">selector</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、在values目录下styles.xml文件中增加一个style项，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>  <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 标题栏ImageButton的style </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="TitleIbStyle"</span><span style="color: #ff0000;"> parent</span><span style="color: #0000ff;">="@android:style/Widget.ImageButton"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="android:background"</span><span style="color: #0000ff;">&gt;</span>@drawable/selector_title_imagebutton_bg<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　3、在布局xml文件中，创建ImageButton时只需设置其style属性为"TitleIbStyle"即可：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageButton
</span><span style="color: #008080;">2</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/title_base_left_ib"</span>
<span style="color: #008080;">3</span> <span style="color: #ff0000;">            style</span><span style="color: #0000ff;">="@style/TitleIbStyle"</span>
<span style="color: #008080;">4</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">5</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">6</span> <span style="color: #ff0000;">            android:padding</span><span style="color: #0000ff;">="5dp"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>　　</p>
<p><strong>　　（二）EditText获取焦点时候边框变颜色</strong></p>
<p>　　1、在项目的drawable目录下新建一个selector_edittext_bg.xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">selector </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> 
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:drawable</span><span style="color: #0000ff;">="@drawable/et_pressed"</span><span style="color: #ff0000;"> android:state_focused</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:drawable</span><span style="color: #0000ff;">="@drawable/et_normal"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">6</span>     
<span style="color: #008080;">7</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 注：et_pressed和et_normal是drawable目录下两张相同大小、填充颜色都为白色但边框颜色不同的圆角矩形的png图片 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">8</span>     
<span style="color: #008080;">9</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">selector</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、在values目录下styles.xml文件中增加一个style项，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> EditText的自定义风格 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="MyEtStyle"</span><span style="color: #ff0000;"> parent</span><span style="color: #0000ff;">="@android:style/Widget.EditText"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="android:background"</span><span style="color: #0000ff;">&gt;</span>@drawable/selector_edittext_bg<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　3、在布局xml文件中，创建EditText时只需设置其style属性为"MyEtStyle"即可：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　　　　　　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">2</span>                     <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/content_et"</span>
<span style="color: #008080;">3</span> <span style="color: #ff0000;">                    style</span><span style="color: #0000ff;">="@style/MyEtStyle"</span>
<span style="color: #008080;">4</span> <span style="color: #ff0000;">                    android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">5</span> <span style="color: #ff0000;">                    android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span></pre>
</div>
<p>　　</p>
<p><strong>　　（三）总结</strong></p>
<p>　　通过上述方式，其实还可以实现很多种其他的自定义效果，有待进一步探索。</p>
<p>&nbsp;</p>]]></description></item><item><title>Android中日期和时间选择器的实现</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5373509.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 10 Apr 2016 02:29:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/10/5373509.html</guid><description><![CDATA[<p>　　创建日期或时间选择窗口需要弹出Dialog的时候，Activity类的showDialog方法已经弃用了，而推荐使用的是DialogFragment，本文总结一下其具体用法.</p>
<p>　　<strong>（一）日期选择器</strong></p>
<p>　　1、创建MyDatePickerDialog类，继承自DatePickerDialog类，实现构造方法，重写onDateChanged方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.DatePickerDialog;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.DatePicker;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyDatePickerDialog <span style="color: #0000ff;">extends</span><span style="color: #000000;"> DatePickerDialog {
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> MyDatePickerDialog (Context context, OnDateSetListener callBack,
</span><span style="color: #008080;"> 8</span>             <span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span> monthOfYear, <span style="color: #0000ff;">int</span><span style="color: #000000;"> dayOfMonth) {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, callBack, year, monthOfYear, dayOfMonth);
</span><span style="color: #008080;">10</span>         
<span style="color: #008080;">11</span>         <span style="color: #0000ff;">this</span>.setTitle("选择任务的日期"<span style="color: #000000;">);        
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">this</span>.setButton2("取消", (OnClickListener)<span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">this</span>.setButton("确定", <span style="color: #0000ff;">this</span>);  <span style="color: #008000;">//</span><span style="color: #008000;">setButton和this参数组合表示这个按钮是确定按钮</span>
<span style="color: #008080;">14</span>         
<span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onDateChanged(DatePicker view, <span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span> month, <span style="color: #0000ff;">int</span><span style="color: #000000;"> day) {
</span><span style="color: #008080;">19</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDateChanged(view, year, month, day);
</span><span style="color: #008080;">20</span>         <span style="color: #0000ff;">this</span>.setTitle("选择任务的日期"<span style="color: #000000;">);
</span><span style="color: #008080;">21</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> }</pre>
</div>
<p>　　注：隐藏日期选择器的&ldquo;日&rdquo;选择项的方法：在MyDatePickerDialog的构造方法中添加一个参数：代表日期选择器类型的整型参数，比如0代表年月日都显示，1表示只显示年和月等，然后用如下代码来隐藏&ldquo;日&rdquo;选择项（隐藏年月的方法同理，时间选择器也同理）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前系统的语言</span>
<span style="color: #008080;"> 2</span>         Locale locale =<span style="color: #000000;"> context.getResources().getConfiguration().locale;
</span><span style="color: #008080;"> 3</span>         String language =<span style="color: #000000;"> locale.getLanguage();
</span><span style="color: #008080;"> 4</span> 　　　　　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 隐藏日选择栏</span>
<span style="color: #008080;"> 5</span>             <span style="color: #0000ff;">if</span> (language.endsWith("zh"<span style="color: #000000;">)) {
</span><span style="color: #008080;"> 6</span>                 ((ViewGroup) ((ViewGroup) <span style="color: #0000ff;">this</span>.getDatePicker().getChildAt(0<span style="color: #000000;">))
</span><span style="color: #008080;"> 7</span>                         .getChildAt(0)).getChildAt(2<span style="color: #000000;">).setVisibility(View.GONE);
</span><span style="color: #008080;"> 8</span>             } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 9</span>                 ((ViewGroup) ((ViewGroup) <span style="color: #0000ff;">this</span>.getDatePicker().getChildAt(0<span style="color: #000000;">))
</span><span style="color: #008080;">10</span>                         .getChildAt(0)).getChildAt(1<span style="color: #000000;">).setVisibility(View.GONE);
</span><span style="color: #008080;">11</span>             }</pre>
</div>
<p>　　2、创建DatePickerFragment类，继承自DialogFragment类并实现DatePickerDialog.OnDateSetListener接口，重写其onCreateDialog和onDateSet方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Calendar;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Dialog;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.DialogFragment;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.DatePicker;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.DatePickerDialog;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> DatePickerFragment <span style="color: #0000ff;">extends</span> DialogFragment <span style="color: #0000ff;">implements</span>
<span style="color: #008080;">10</span> <span style="color: #000000;">        DatePickerDialog.OnDateSetListener {
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Dialog onCreateDialog(Bundle savedInstanceState) {
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">final</span> Calendar c =<span style="color: #000000;"> Calendar.getInstance();
</span><span style="color: #008080;">14</span>         <span style="color: #0000ff;">int</span> year =<span style="color: #000000;"> c.get(Calendar.YEAR);
</span><span style="color: #008080;">15</span>         <span style="color: #0000ff;">int</span> month =<span style="color: #000000;"> c.get(Calendar.MONTH);
</span><span style="color: #008080;">16</span>         <span style="color: #0000ff;">int</span> day =<span style="color: #000000;"> c.get(Calendar.DAY_OF_MONTH);
</span><span style="color: #008080;">17</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> MyDatePickerDialog(getActivity(), <span style="color: #0000ff;">this</span><span style="color: #000000;">, year, month, day);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onDateSet(DatePicker view, <span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span> month, <span style="color: #0000ff;">int</span><span style="color: #000000;"> day) {
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span> }</pre>
</div>
<p>　　3、在活动中显示日期选择器</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　　　  DatePickerFragment datePickerFrg = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DatePickerFragment() {
</span><span style="color: #008080;">2</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">3</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onDateSet(DatePicker view, <span style="color: #0000ff;">int</span> year, <span style="color: #0000ff;">int</span><span style="color: #000000;"> month,
</span><span style="color: #008080;">4</span>                         <span style="color: #0000ff;">int</span><span style="color: #000000;"> day) {
</span><span style="color: #008080;">5</span>                     Log.d("DateSet","选择的日期是：" + year +"-" + (month + 1) + "-" +<span style="color: #000000;"> day);                }
</span><span style="color: #008080;">6</span> <span style="color: #000000;">            };
</span><span style="color: #008080;">7</span>             datePickerFrg.show(getFragmentManager(), "datePickerFrg");</pre>
</div>
<p>&nbsp;　　效果：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160410104700312-259896109.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>　　（二）时间选择器</strong></p>
<p>　　时间选择器的使用其实和日期选择器差不多.</p>
<p>　　1、创建MyTimePickerDialog类，继承自TimePickerDialog，实现构造方法，重写onTimeChanged方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.TimePickerDialog;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.DialogInterface.OnClickListener;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.TimePicker;
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyTimePickerDialog <span style="color: #0000ff;">extends</span><span style="color: #000000;"> TimePickerDialog {
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> MyTimePickerDialog (Context context, OnTimeSetListener callBack,
</span><span style="color: #008080;"> 9</span>             <span style="color: #0000ff;">int</span> hourOfDay, <span style="color: #0000ff;">int</span> minute, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> is24HourView) {
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, callBack, hourOfDay, minute, is24HourView);
</span><span style="color: #008080;">11</span>         
<span style="color: #008080;">12</span>         <span style="color: #0000ff;">this</span>.setTitle("选择任务的时间"<span style="color: #000000;">);        
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">this</span>.setButton2("取消", (OnClickListener)<span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">14</span>         <span style="color: #0000ff;">this</span>.setButton("确定", <span style="color: #0000ff;">this</span>);  <span style="color: #008000;">//</span><span style="color: #008000;">setButton和this参数组合表示这个按钮是确定按钮</span>
<span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span>     
<span style="color: #008080;">17</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onTimeChanged(TimePicker view, <span style="color: #0000ff;">int</span> hourOfDay, <span style="color: #0000ff;">int</span><span style="color: #000000;"> minute) {
</span><span style="color: #008080;">19</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onTimeChanged(view, hourOfDay, minute);
</span><span style="color: #008080;">20</span>         <span style="color: #0000ff;">this</span>.setTitle("选择任务的时间"<span style="color: #000000;">);    
</span><span style="color: #008080;">21</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> }</pre>
</div>
<p>　　2、创建TimePickerFragment类，继承自DialogFragment类并实现TimePickerDialog.OnTimeSetListener接口，重写其onCreateDialog和onTimeSet方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> TimePickerFragment <span style="color: #0000ff;">extends</span> DialogFragment <span style="color: #0000ff;">implements</span>
<span style="color: #008080;"> 2</span> <span style="color: #000000;">        TimePickerDialog.OnTimeSetListener {
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Dialog onCreateDialog(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">final</span> Calendar calendar =<span style="color: #000000;"> Calendar.getInstance();
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">int</span> hour =<span style="color: #000000;"> calendar.get(Calendar.HOUR_OF_DAY);
</span><span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">int</span> minute =<span style="color: #000000;"> calendar.get(Calendar.MINUTE);
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> MyTimePickerDialog(getActivity(), <span style="color: #0000ff;">this</span><span style="color: #000000;">, hour, minute,
</span><span style="color: #008080;">11</span> <span style="color: #000000;">                DateFormat.is24HourFormat(getActivity()));
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">15</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onTimeSet(TimePicker view, <span style="color: #0000ff;">int</span> hourOfDay, <span style="color: #0000ff;">int</span><span style="color: #000000;"> minute) {
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">18</span> }</pre>
</div>
<p>　　3、在活动中显示时间选择器：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　　　  TimePickerFragment timePickerFrg = <span style="color: #0000ff;">new</span><span style="color: #000000;"> TimePickerFragment() {
</span><span style="color: #008080;">2</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">3</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onTimeSet(android.widget.TimePicker view,
</span><span style="color: #008080;">4</span>                         <span style="color: #0000ff;">int</span> hourOfDay, <span style="color: #0000ff;">int</span><span style="color: #000000;"> minute) {
</span><span style="color: #008080;">5</span>                     Log.d("TimeSet", "选择的时间是：" + hourOfDay + ":" +<span style="color: #000000;"> minute);
</span><span style="color: #008080;">6</span> <span style="color: #000000;">                };
</span><span style="color: #008080;">7</span> <span style="color: #000000;">            };
</span><span style="color: #008080;">8</span>             timePickerFrg.show(getFragmentManager(), "timePickerFrg");</pre>
</div>
<p>&nbsp;　　效果：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160410104714265-1702179073.png" alt="" /></p>]]></description></item><item><title>Android AlertDialog的各种用法总结</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/09/5371996.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sat, 09 Apr 2016 12:55:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/09/5371996.html</guid><description><![CDATA[<p>　　Refer:<a title="http://www.2cto.com/kf/201205/131876.html" href="http://www.2cto.com/kf/201205/131876.html">http://www.2cto.com/kf/201205/131876.html</a></p>
<p><strong>　　（一）最简单的用法（详见注释）</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1 　　　　　　  <span style="color: #008000;">//<span style="color: #008000;"> 1、创建简单的AlertDialog <span style="color: #008000;">//<span style="color: #008000;"> AlertDialog的构造方法全部是Protected的，
<span style="color: #008080;"> 2             <span style="color: #008000;">//<span style="color: #008000;"> 所以不能直接通过new一个AlertDialog来创建出一个AlertDialog; <span style="color: #008000;">//
<span style="color: #008080;"> 3             <span style="color: #008000;">//<span style="color: #008000;"> (1)要创建一个AlertDialog，就要用到AlertDialog.Builder
<span style="color: #008080;"> 4             AlertDialog.Builder dialog = <span style="color: #0000ff;">new AlertDialog.Builder(<span style="color: #0000ff;">this<span style="color: #000000;">);
<span style="color: #008080;"> 5 
<span style="color: #008080;"> 6             <span style="color: #008000;">//<span style="color: #008000;"> (2)设置各种属性 <span style="color: #008000;">//<span style="color: #008000;"> 注：不设置哪项属性，这个属性就默认不会显示出来
<span style="color: #008080;"> 7             dialog.setTitle("这是一个简单的对话框"<span style="color: #000000;">);
<span style="color: #008080;"> 8 <span style="color: #000000;">            dialog.setIcon(R.drawable.dictation2_64);
<span style="color: #008080;"> 9             dialog.setMessage("欢迎使用！"<span style="color: #000000;">);
<span style="color: #008080;">10 
<span style="color: #008080;">11             <span style="color: #008000;">//<span style="color: #008000;"> (3)设置dialog可否被取消 
<span style="color: #008080;">12             dialog.setCancelable(<span style="color: #0000ff;">true<span style="color: #000000;">);
<span style="color: #008080;">13 
<span style="color: #008080;">14             <span style="color: #008000;">//<span style="color: #008000;"> (4)显示出来 
<span style="color: #008080;">15             dialog.show();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>　　　效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409162620297-571492582.png" alt="" /></p>
<p style="text-align: center;">　</p>
<p style="text-align: left;"><strong>　　（二）带按钮的AlertDialog</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 2、带按钮的AlertDialog</span>
<span style="color: #008080;"> 2</span>             AlertDialog.Builder dialog = <span style="color: #0000ff;">new</span> AlertDialog.Builder(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>             dialog.setTitle("确认"<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">            dialog.setIcon(R.drawable.dictation2_64);
</span><span style="color: #008080;"> 5</span>             dialog.setMessage("确定要删除此项吗？"<span style="color: #000000;">);
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 设置&ldquo;确定&rdquo;按钮,使用DialogInterface.OnClickListener接口参数</span>
<span style="color: #008080;"> 8</span>             dialog.setPositiveButton("确定"<span style="color: #000000;">,
</span><span style="color: #008080;"> 9</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">12</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">13</span>                             Log.d("Dialog", "点击了&ldquo;确认&rdquo;按钮"<span style="color: #000000;">);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 设置&ldquo;查看详情&rdquo;按钮,使用DialogInterface.OnClickListener接口参数</span>
<span style="color: #008080;">18</span>             dialog.setNeutralButton("查看详情"<span style="color: #000000;">,
</span><span style="color: #008080;">19</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">22</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">23</span>                             Log.d("Dialog", "点击了&ldquo;查看详情&rdquo;按钮"<span style="color: #000000;">);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 设置&ldquo;取消&rdquo;按钮,使用DialogInterface.OnClickListener接口参数</span>
<span style="color: #008080;">28</span>             dialog.setNegativeButton("取消"<span style="color: #000000;">,
</span><span style="color: #008080;">29</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">32</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">33</span>                             Log.d("Dialog", "点击了&ldquo;取消&rdquo;按钮"<span style="color: #000000;">);
</span><span style="color: #008080;">34</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">35</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">36</span> 
<span style="color: #008080;">37</span>             dialog.show();</pre>
</div>
<p>　　效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409162841484-945849880.png" alt="" /></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: left;">　　<strong>（三）类似于ListView的AlertDialog</strong></p>
<p style="text-align: left;">　　用setItems(CharSequence[] items, final OnClickListener listener)方法来实现类似ListView的AlertDialog。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 3、类似ListView的AlertDialog</span>
<span style="color: #008080;"> 2</span>             AlertDialog.Builder dialog = <span style="color: #0000ff;">new</span> AlertDialog.Builder(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>             dialog.setTitle("请选择一项运动"<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">            dialog.setIcon(R.drawable.dictation2_64);
</span><span style="color: #008080;"> 5</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 设置为false说明当前dialog是不能用返回键取消的</span>
<span style="color: #008080;"> 6</span>             dialog.setCancelable(<span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span>             
<span style="color: #008080;"> 8</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 列表字符串数组</span>
<span style="color: #008080;"> 9</span>             <span style="color: #0000ff;">final</span> String[] sportsArray = <span style="color: #0000ff;">new</span> String[] { "跑步", "篮球", "游泳"<span style="color: #000000;">,
</span><span style="color: #008080;">10</span>                     "自行车", "羽毛球"<span style="color: #000000;"> };
</span><span style="color: #008080;">11</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用于在item的点击事件中，记录选择的是哪一项，初始值设为0.这里用final数组只是因为匿名内部类中只能使用外部终态的变量</span>
<span style="color: #008080;">12</span>             <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> selectedIndex[] = { 0<span style="color: #000000;"> };
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用setItems方法来实现</span>
<span style="color: #008080;">15</span>             dialog.setItems(sportsArray, <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">18</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">19</span>                     selectedIndex[0] =<span style="color: #000000;"> which;
</span><span style="color: #008080;">20</span>                     Log.d("Dialog", "选择了：" + sportsArray[selectedIndex[0<span style="color: #000000;">]]);
</span><span style="color: #008080;">21</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">22</span> <span style="color: #000000;">            });
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>             dialog.setNegativeButton("取消"<span style="color: #000000;">,
</span><span style="color: #008080;">25</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">28</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">29</span>                             Log.d("Dialog", "点击了&ldquo;取消&rdquo;按钮"<span style="color: #000000;">);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">31</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>             dialog.show();</pre>
</div>
<p>　　效果如下：</p>
<p style="text-align: center;">　<img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409164316375-36958677.png" alt="" /></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">　　<strong>（四）类似RadioButton的AlertDialog </strong></p>
<p style="text-align: left;">　　用setSingleChoiceItems(CharSequence[] items, int checkedItem, final OnClickListener listener)方法来实现类似RadioButton的AlertDialog</p>
<p>　　第一个参数是要显示的数据的数组，第二个参数是初始值（初始被选中的item），第三个参数是点击某个item的触发事件</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 4、类似RadioButton的AlertDialog</span>
<span style="color: #008080;"> 2</span>             AlertDialog.Builder dialog = <span style="color: #0000ff;">new</span> AlertDialog.Builder(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>             dialog.setTitle("请选择一项运动"<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">            dialog.setIcon(R.drawable.dictation2_64);
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 列表字符串数组</span>
<span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">final</span> String[] sportsArray = <span style="color: #0000ff;">new</span> String[] { "跑步", "篮球", "游泳"<span style="color: #000000;">,
</span><span style="color: #008080;"> 8</span>                     "自行车", "羽毛球"<span style="color: #000000;"> };
</span><span style="color: #008080;"> 9</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用于在item的点击事件中，记录选择的是哪一项，初始值设为0.这里用final数组只是因为匿名内部类中只能使用外部终态的变量</span>
<span style="color: #008080;">10</span>             <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> selectedIndex[] = { 0<span style="color: #000000;"> };
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用setSingleChoiceItems方法来实现</span>
<span style="color: #008080;">13</span>             dialog.setSingleChoiceItems(sportsArray, 0<span style="color: #000000;">,
</span><span style="color: #008080;">14</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">17</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">18</span>                             selectedIndex[0] =<span style="color: #000000;"> which;
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">21</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span>             dialog.setPositiveButton("确定"<span style="color: #000000;">,
</span><span style="color: #008080;">24</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">27</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">28</span>                             Log.d("Dialog", "选择了："
<span style="color: #008080;">29</span>                                     + sportsArray[selectedIndex[0<span style="color: #000000;">]]);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">31</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>             dialog.setNegativeButton("取消"<span style="color: #000000;">,
</span><span style="color: #008080;">34</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">37</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">38</span>                             Log.d("Dialog", "点击了&ldquo;取消&rdquo;按钮"<span style="color: #000000;">);
</span><span style="color: #008080;">39</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">40</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">41</span> 
<span style="color: #008080;">42</span>             dialog.show();</pre>
</div>
<p>　　效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409201209140-208898923.png" alt="" /></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: left;"><strong>　　（五）类似CheckBox的AlertDialog</strong></p>
<p style="text-align: left;">　　用setMultiChoiceItems(CharSequence[] items, boolean[] checkedItems, final OnMultiChoiceClickListener listener)方法来实现类似CheckBox的AlertDialog <br />　　第一个参数是要显示的数据的数组，第二个参数是选中状态的数组，第三个参数是点击某个item的触发事件</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 5、类似CheckBox的AlertDialog</span>
<span style="color: #008080;"> 2</span>             AlertDialog.Builder dialog = <span style="color: #0000ff;">new</span> AlertDialog.Builder(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>             dialog.setTitle("请选择喜欢的运动（可多选）"<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">            dialog.setIcon(R.drawable.dictation2_64);
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 列表字符串数组</span>
<span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">final</span> String[] sportsArray = <span style="color: #0000ff;">new</span> String[] { "跑步", "篮球", "游泳"<span style="color: #000000;">,
</span><span style="color: #008080;"> 8</span>                     "自行车", "羽毛球"<span style="color: #000000;"> };
</span><span style="color: #008080;"> 9</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用于在item的点击事件中，记录选择了哪些项.</span>
<span style="color: #008080;">10</span>             <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">boolean</span>[] selectedIndex = { <span style="color: #0000ff;">true</span>, <span style="color: #0000ff;">true</span>, <span style="color: #0000ff;">false</span>, <span style="color: #0000ff;">false</span>, <span style="color: #0000ff;">false</span><span style="color: #000000;"> };
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用setMultiChoiceItems方法来实现</span>
<span style="color: #008080;">13</span> <span style="color: #000000;">            dialog.setMultiChoiceItems(sportsArray, selectedIndex,
</span><span style="color: #008080;">14</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnMultiChoiceClickListener() {
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">17</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which,
</span><span style="color: #008080;">18</span>                                 <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isChecked) {
</span><span style="color: #008080;">19</span>                             selectedIndex[which] =<span style="color: #000000;"> isChecked;
</span><span style="color: #008080;">20</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">21</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span>             dialog.setPositiveButton("确定"<span style="color: #000000;">,
</span><span style="color: #008080;">24</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">27</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">28</span>                             <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; selectedIndex.length; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">29</span>                                 <span style="color: #0000ff;">if</span><span style="color: #000000;"> (selectedIndex[i]) {
</span><span style="color: #008080;">30</span>                                     Log.d("Dialog", "选择了：" +<span style="color: #000000;"> sportsArray[i]);
</span><span style="color: #008080;">31</span> <span style="color: #000000;">                                }
</span><span style="color: #008080;">32</span> <span style="color: #000000;">                            }
</span><span style="color: #008080;">33</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">34</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>             dialog.setNegativeButton("取消"<span style="color: #000000;">,
</span><span style="color: #008080;">37</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">40</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">41</span>                             Log.d("Dialog", "点击了&ldquo;取消&rdquo;按钮"<span style="color: #000000;">);
</span><span style="color: #008080;">42</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">43</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">44</span> 
<span style="color: #008080;">45</span>             dialog.show();</pre>
</div>
<p>　　效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409202113047-1036072631.png" alt="" /></p>
<p style="text-align: left;"><strong>　 （六）自定义View的AlertDialog </strong></p>
<p style="text-align: left;">　　有时候系统自带的AlertDialog风格不能满足我们的需求，就比如说我们要实现一个Login画面，有用户名和密码，这时我们就要用到自定义View的AlertDialog</p>
<p style="text-align: left;">　　1、先创建自定义登录框的布局文件my_login_view.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="fill_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">11</span> <span style="color: #ff0000;">        android:padding</span><span style="color: #0000ff;">="5dp"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">14</span>             <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="账号："</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">19</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/my_login_account_et"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="0dip"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">22</span> <span style="color: #ff0000;">            android:layout_weight</span><span style="color: #0000ff;">="1"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">23</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;">26</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="fill_parent"</span>
<span style="color: #008080;">27</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">28</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">29</span> <span style="color: #ff0000;">        android:padding</span><span style="color: #0000ff;">="5dp"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">32</span>             <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">33</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">34</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="密码："</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">37</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/my_login_password_et"</span>
<span style="color: #008080;">38</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="0dip"</span>
<span style="color: #008080;">39</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">40</span> <span style="color: #ff0000;">            android:layout_weight</span><span style="color: #0000ff;">="1"</span>
<span style="color: #008080;">41</span> <span style="color: #ff0000;">            android:inputType</span><span style="color: #0000ff;">="numberPassword"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">42</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">43</span> 
<span style="color: #008080;">44</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、在Activity的合适地方创建自定义的AlertDialog（比如按钮的点击事件中）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 6、自定义View的AlertDialog</span>
<span style="color: #008080;"> 2</span>             AlertDialog.Builder dialog = <span style="color: #0000ff;">new</span> AlertDialog.Builder(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 3</span>             dialog.setTitle("用户登录"<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 取得自定义View</span>
<span style="color: #008080;"> 6</span>             LayoutInflater layoutInflater = LayoutInflater.from(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">final</span> View myLoginView =<span style="color: #000000;"> layoutInflater.inflate(
</span><span style="color: #008080;"> 8</span>                     R.layout.my_login_view, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">            dialog.setView(myLoginView);
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>             dialog.setPositiveButton("确定"<span style="color: #000000;">,
</span><span style="color: #008080;">12</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">15</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">16</span>                             EditText loginAccountEt =<span style="color: #000000;"> (EditText) myLoginView
</span><span style="color: #008080;">17</span> <span style="color: #000000;">                                    .findViewById(R.id.my_login_account_et);
</span><span style="color: #008080;">18</span>                             EditText loginPasswordEt =<span style="color: #000000;"> (EditText) myLoginView
</span><span style="color: #008080;">19</span> <span style="color: #000000;">                                    .findViewById(R.id.my_login_password_et);
</span><span style="color: #008080;">20</span>                             Log.d("MyLogin Dialog", "输入的用户名是："
<span style="color: #008080;">21</span>                                     +<span style="color: #000000;"> loginAccountEt.getText().toString());
</span><span style="color: #008080;">22</span>                             Log.d("MyLogin Dialog", "输入的密码是："
<span style="color: #008080;">23</span>                                     +<span style="color: #000000;"> loginPasswordEt.getText().toString());
</span><span style="color: #008080;">24</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>             dialog.setNegativeButton("取消"<span style="color: #000000;">,
</span><span style="color: #008080;">28</span>                     <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> <span style="color: #000000;">                        @Override
</span><span style="color: #008080;">31</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">34</span> <span style="color: #000000;">                    });
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>             dialog.show();</pre>
</div>
<p>　　效果如下：</p>
<p style="text-align: center;">　<img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409205406265-1149611758.png" alt="" /></p>
<p style="text-align: left;">　　点击&ldquo;确定&rdquo;按钮后LogCat中的内容：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160409205437922-1457679025.png" alt="" /></p>]]></description></item><item><title>Android自定义控件风格的方法</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/08/5366265.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Thu, 07 Apr 2016 16:29:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/08/5366265.html</guid><description><![CDATA[<p>　　EditText在获取焦点后默认的边框都是黄色的，这可能和我在开发的应用的主题颜色不匹配，那怎么办呢？&mdash;&mdash;用自定义的控件风格，比如说我想让EditText在获取焦点时候边框变成蓝色的，而失去焦点后边框变成灰色的，要实现这个目的方法如下：</p>
<p>　　（一）先在PS中画两张png图片，一张为蓝色边框、白色填充的圆角矩形，另一张为灰色边框、白色填充的圆角矩形，两个矩形形状完全相同。这两种图片分别作为EditText在激活和未激活两个状态的背景图片。一张命名为et_pressed.png，另一张为et_normal.png，如下：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160408001152078-152074361.png" alt="" />&nbsp;&nbsp;&nbsp;</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160408001141687-2129518765.png" alt="" /></p>
<p>　　（二）使用draw9patch.bat工具（该工具的使用方法见这篇文章：<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/5338245.html">Android制作和使用Nine-Patch图片</a>）将上面两个图片制作成Nine-Patch图片，并分别命名为：et_pressed.9.png和et_normal.9.png，如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160408001454593-1829810809.png" alt="" /></p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160408001506828-2033388674.png" alt="" /></p>
<p style="text-align: left;">　　（三）将这两个Nine-Patch图片放到项目的res/drawable目录下，并在res/drawable目录下新建一个名为selector_edittext_bg.xml的xml文件，内容如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">selector </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> 
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:drawable</span><span style="color: #0000ff;">="@drawable/et_pressed"</span><span style="color: #ff0000;"> android:state_focused</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">android:drawable</span><span style="color: #0000ff;">="@drawable/et_normal"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">selector</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（四）往res/values/styles.xml文件中添加如下内容：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="MyEtStyle"</span><span style="color: #ff0000;"> parent</span><span style="color: #0000ff;">="@android:style/Widget.EditText"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="android:background"</span><span style="color: #0000ff;">&gt;</span>@drawable/selector_edittext_bg<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">item</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（五）在xml布局文件中只需这样设置EditText的style属性即可达到预期效果：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">2</span>                     <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/input_et"</span>
<span style="color: #008080;">3</span> <span style="color: #ff0000;">                    style</span><span style="color: #0000ff;">="@style/MyEtStyle"</span>
<span style="color: #008080;">4</span> <span style="color: #ff0000;">                    ...
</span><span style="color: #008080;">5</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>　　（六）效果如下截图：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160408002620500-1292104848.png" alt="" /></p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201604/760572-20160408002637640-435785162.png" alt="" /></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: center;">&nbsp;</p>]]></description></item><item><title>科大讯飞语音听写接口使用的封装</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/07/5366171.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Thu, 07 Apr 2016 15:39:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/07/5366171.html</guid><description><![CDATA[<p>　　在 <a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/5300563.html">科大讯飞开放平台&mdash;&mdash;语音听写接口的使用</a>&nbsp;这篇文章里介绍了科大讯飞语音听写接口的简单使用方法，但是在实际开发中发现仅仅那样做在使用起来还是不方便，于是想到把语音听写接口的调用、Json数据解析、听写结果的处理等操作进行封装，使用异步回调的方式进行调用，这样在使用到语音听写的地方只需创建一个监听接口并重写语音识别返回结果的处理方法即可。梳理了一下步骤如下：</p>
<p>　　<strong>（一）前期准备工作</strong>（略，见<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/5300563.html">科大讯飞开放平台&mdash;&mdash;语音听写接口的使用</a>一文）</p>
<p>　　注：将获取到的AppId存到一个常量类里，后面便于管理：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GlobalConfig {
</span><span style="color: #008080;">2</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 科大讯飞语音SDK AppID</span>
<span style="color: #008080;">3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String IFLY_VOICE_SDK_APP_ID = "570657ad"<span style="color: #000000;">;
</span><span style="color: #008080;">4</span> }</pre>
</div>
<p>&nbsp;</p>
<p>　　<strong>（二）创建用GSON解析Json数据的通用工具类GsonUtil，用于为解析语音听写服务器返回的Json格式数据做准备：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.Gson;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.JsonArray;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.JsonElement;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.JsonParser;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">10</span> <span style="color: #008000;"> * 封装的GSON解析工具类，提供泛型参数方法
</span><span style="color: #008080;">11</span> <span style="color: #008000;"> * 
</span><span style="color: #008080;">12</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">13</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonUtil {
</span><span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 将单条Json数据解析成相应的映射对象</span>
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> &lt;T&gt; T parseJsonWithGson(String jsonData, Class&lt;T&gt;<span style="color: #000000;"> type) {
</span><span style="color: #008080;">16</span>         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">17</span>         T result =<span style="color: #000000;"> gson.fromJson(jsonData, type);
</span><span style="color: #008080;">18</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 将Json数组解析成相应的映射对象列表</span>
<span style="color: #008080;">22</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> &lt;T&gt; List&lt;T&gt;<span style="color: #000000;"> parseJsonArrayWithGson(String jsonData,
</span><span style="color: #008080;">23</span>             Class&lt;T&gt;<span style="color: #000000;"> type) {
</span><span style="color: #008080;">24</span>         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">25</span>         List&lt;T&gt; result = <span style="color: #0000ff;">new</span> ArrayList&lt;T&gt;<span style="color: #000000;">();
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 下面这句因为泛型在编译期类型会被擦除，从而导致如下错误：
</span><span style="color: #008080;">28</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap
</span><span style="color: #008080;">29</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> cannot be cast to DictationResult
</span><span style="color: #008080;">30</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> List&lt;T&gt; result = gson.fromJson(jsonData, new TypeToken&lt;List&lt;T&gt;&gt;() {
</span><span style="color: #008080;">31</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> }.getType());
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 正确写法</span>
<span style="color: #008080;">34</span>         JsonArray array = <span style="color: #0000ff;">new</span><span style="color: #000000;"> JsonParser().parse(jsonData).getAsJsonArray();
</span><span style="color: #008080;">35</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">final</span><span style="color: #000000;"> JsonElement elem : array) {
</span><span style="color: #008080;">36</span>             result.add(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson().fromJson(elem, type));
</span><span style="color: #008080;">37</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">40</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">41</span> }</pre>
</div>
<p>　　</p>
<p><strong>　　（三）创建专门解析语音听写结果Json数据的工具类DictationJsonParseUtil，用于解析科大讯飞语音听写服务器返回的Json数据：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;
</span><span style="color: #008080;">  2</span> 
<span style="color: #008080;">  3</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;">  4</span> <span style="color: #008000;"> * 用于解析科大讯飞语音听写服务器返回的Json数据
</span><span style="color: #008080;">  5</span> <span style="color: #008000;"> *
</span><span style="color: #008080;">  6</span> <span style="color: #008000;"> * 语音识别结果Json数据格式：
</span><span style="color: #008080;">  7</span> <span style="color: #008000;"> * {"sn":1,"ls":true,"bg":0,"ed":0,"ws":[{"bg":0,"cw":[{"w":"今天","sc":0}]},
</span><span style="color: #008080;">  8</span> <span style="color: #008000;"> * {"bg":0,"cw":[{"w":"的","sc":0}]},{"bg":0,"cw":[{"w":"天气","sc":0}]},
</span><span style="color: #008080;">  9</span> <span style="color: #008000;"> * {"bg":0,"cw":[{"w":"怎么样","sc":0}]},{"bg":0,"cw":[{"w":"。","sc":0}]}]}
</span><span style="color: #008080;"> 10</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DictationJsonParseUtil {
</span><span style="color: #008080;"> 12</span> 
<span style="color: #008080;"> 13</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 解析服务器返回的语音听写结果Json格式数据的静态方法，返回值为语音的字符串</span>
<span style="color: #008080;"> 14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String parseJsonData(String jsonDataStr) {
</span><span style="color: #008080;"> 15</span>         String speechStr = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 16</span>         List&lt;DictationResult&gt; resultList =<span style="color: #000000;"> GsonUtil.parseJsonArrayWithGson(
</span><span style="color: #008080;"> 17</span>                 jsonDataStr, DictationResult.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 18</span> 
<span style="color: #008080;"> 19</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; resultList.size() - 1; i++) { <span style="color: #008000;">//</span><span style="color: #008000;"> 这里减1是因为最后有一组作为结尾的标点符号数据，要舍去</span>
<span style="color: #008080;"> 20</span>             speechStr +=<span style="color: #000000;"> resultList.get(i).toString();
</span><span style="color: #008080;"> 21</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 22</span> 
<span style="color: #008080;"> 23</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> speechStr;
</span><span style="color: #008080;"> 24</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 25</span> <span style="color: #000000;">}
</span><span style="color: #008080;"> 26</span> 
<span style="color: #008080;"> 27</span> <span style="color: #008000;">//</span><span style="color: #008000;"> 语音听写结果类</span>
<span style="color: #008080;"> 28</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DictationResult {
</span><span style="color: #008080;"> 29</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String sn;
</span><span style="color: #008080;"> 30</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String ls;
</span><span style="color: #008080;"> 31</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String bg;
</span><span style="color: #008080;"> 32</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String ed;
</span><span style="color: #008080;"> 33</span> 
<span style="color: #008080;"> 34</span>     <span style="color: #0000ff;">private</span> List&lt;Words&gt;<span style="color: #000000;"> ws;
</span><span style="color: #008080;"> 35</span> 
<span style="color: #008080;"> 36</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Words {
</span><span style="color: #008080;"> 37</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String bg;
</span><span style="color: #008080;"> 38</span>         <span style="color: #0000ff;">private</span> List&lt;Cw&gt;<span style="color: #000000;"> cw;
</span><span style="color: #008080;"> 39</span> 
<span style="color: #008080;"> 40</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Cw {
</span><span style="color: #008080;"> 41</span>             <span style="color: #0000ff;">private</span><span style="color: #000000;"> String w;
</span><span style="color: #008080;"> 42</span>             <span style="color: #0000ff;">private</span><span style="color: #000000;"> String sc;
</span><span style="color: #008080;"> 43</span> 
<span style="color: #008080;"> 44</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getW() {
</span><span style="color: #008080;"> 45</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> w;
</span><span style="color: #008080;"> 46</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 47</span> 
<span style="color: #008080;"> 48</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setW(String w) {
</span><span style="color: #008080;"> 49</span>                 <span style="color: #0000ff;">this</span>.w =<span style="color: #000000;"> w;
</span><span style="color: #008080;"> 50</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 51</span> 
<span style="color: #008080;"> 52</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getSc() {
</span><span style="color: #008080;"> 53</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> sc;
</span><span style="color: #008080;"> 54</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 55</span> 
<span style="color: #008080;"> 56</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setSc(String sc) {
</span><span style="color: #008080;"> 57</span>                 <span style="color: #0000ff;">this</span>.sc =<span style="color: #000000;"> sc;
</span><span style="color: #008080;"> 58</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 59</span> 
<span style="color: #008080;"> 60</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;"> 61</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;"> 62</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> w;
</span><span style="color: #008080;"> 63</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 64</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 65</span> 
<span style="color: #008080;"> 66</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getBg() {
</span><span style="color: #008080;"> 67</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> bg;
</span><span style="color: #008080;"> 68</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 69</span> 
<span style="color: #008080;"> 70</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setBg(String bg) {
</span><span style="color: #008080;"> 71</span>             <span style="color: #0000ff;">this</span>.bg =<span style="color: #000000;"> bg;
</span><span style="color: #008080;"> 72</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 73</span> 
<span style="color: #008080;"> 74</span>         <span style="color: #0000ff;">public</span> List&lt;Cw&gt;<span style="color: #000000;"> getCw() {
</span><span style="color: #008080;"> 75</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> cw;
</span><span style="color: #008080;"> 76</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 77</span> 
<span style="color: #008080;"> 78</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setCw(List&lt;Cw&gt;<span style="color: #000000;"> cw) {
</span><span style="color: #008080;"> 79</span>             <span style="color: #0000ff;">this</span>.cw =<span style="color: #000000;"> cw;
</span><span style="color: #008080;"> 80</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 81</span> 
<span style="color: #008080;"> 82</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;"> 83</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;"> 84</span>             String result = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 85</span>             <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Cw cwTmp : cw) {
</span><span style="color: #008080;"> 86</span>                 result +=<span style="color: #000000;"> cwTmp.toString();
</span><span style="color: #008080;"> 87</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 88</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;"> 89</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 90</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 91</span> 
<span style="color: #008080;"> 92</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getSn() {
</span><span style="color: #008080;"> 93</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> sn;
</span><span style="color: #008080;"> 94</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 95</span> 
<span style="color: #008080;"> 96</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setSn(String sn) {
</span><span style="color: #008080;"> 97</span>         <span style="color: #0000ff;">this</span>.sn =<span style="color: #000000;"> sn;
</span><span style="color: #008080;"> 98</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 99</span> 
<span style="color: #008080;">100</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getLs() {
</span><span style="color: #008080;">101</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> ls;
</span><span style="color: #008080;">102</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">103</span> 
<span style="color: #008080;">104</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setLs(String ls) {
</span><span style="color: #008080;">105</span>         <span style="color: #0000ff;">this</span>.ls =<span style="color: #000000;"> ls;
</span><span style="color: #008080;">106</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">107</span> 
<span style="color: #008080;">108</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getBg() {
</span><span style="color: #008080;">109</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> bg;
</span><span style="color: #008080;">110</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">111</span> 
<span style="color: #008080;">112</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setBg(String bg) {
</span><span style="color: #008080;">113</span>         <span style="color: #0000ff;">this</span>.bg =<span style="color: #000000;"> bg;
</span><span style="color: #008080;">114</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">115</span> 
<span style="color: #008080;">116</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getEd() {
</span><span style="color: #008080;">117</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> ed;
</span><span style="color: #008080;">118</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">119</span> 
<span style="color: #008080;">120</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setEd(String ed) {
</span><span style="color: #008080;">121</span>         <span style="color: #0000ff;">this</span>.ed =<span style="color: #000000;"> ed;
</span><span style="color: #008080;">122</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">123</span> 
<span style="color: #008080;">124</span>     <span style="color: #0000ff;">public</span> List&lt;Words&gt;<span style="color: #000000;"> getWs() {
</span><span style="color: #008080;">125</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> ws;
</span><span style="color: #008080;">126</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">127</span> 
<span style="color: #008080;">128</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setWs(List&lt;Words&gt;<span style="color: #000000;"> ws) {
</span><span style="color: #008080;">129</span>         <span style="color: #0000ff;">this</span>.ws =<span style="color: #000000;"> ws;
</span><span style="color: #008080;">130</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">131</span> 
<span style="color: #008080;">132</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">133</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">134</span>         String result = ""<span style="color: #000000;">;
</span><span style="color: #008080;">135</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Words wsTmp : ws) {
</span><span style="color: #008080;">136</span>             result +=<span style="color: #000000;"> wsTmp.toString();
</span><span style="color: #008080;">137</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">138</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">139</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">140</span> }</pre>
</div>
<p>&nbsp;</p>
<p>　　<strong>（四）创建语音听写结果监听接口DictationListener，提供一个onDictationListener(String dictationResultStr)方法，调用方可以重写该方法，对语音听写结果进行其他操作。</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;">2</span> <span style="color: #008000;"> * 科大讯飞语音解析结果返回监听接口
</span><span style="color: #008080;">3</span> <span style="color: #008000;"> *
</span><span style="color: #008080;">4</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">5</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> DictationListener {
</span><span style="color: #008080;">6</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDictationListener(String dictationResultStr);
</span><span style="color: #008080;">7</span> }</pre>
</div>
<p>&nbsp;</p>
<p>　　<strong>（五）创建DictationUtil类，其showDictationDialog方法会弹出语音听写Dialog窗口，并对语音返回结果进行解析得到最终结果，最后用onDictationListener接口来将最终结果传送给调用方。</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.easydo.constant.GlobalConfig;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.RecognizerResult;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechConstant;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechError;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechRecognizer;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechUtility;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.ui.RecognizerDialog;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.ui.RecognizerDialogListener;
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;">13</span> <span style="color: #008000;"> * 语音听写工具类，用于弹出语音听写Dialog进行听写
</span><span style="color: #008080;">14</span> <span style="color: #008000;"> *
</span><span style="color: #008080;">15</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DictationUtil {
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String DICTATION_APPID =<span style="color: #000000;"> GlobalConfig.IFLY_VOICE_SDK_APP_ID;
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> SpeechRecognizer mIat;
</span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> RecognizerDialog iatDialog;
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String dictationResultStr;
</span><span style="color: #008080;">23</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String finalResult;
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> showDictationDialog(<span style="color: #0000ff;">final</span><span style="color: #000000;"> Context context,
</span><span style="color: #008080;">26</span>             <span style="color: #0000ff;">final</span><span style="color: #000000;"> DictationListener listener) {
</span><span style="color: #008080;">27</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 初始化语音配置</span>
<span style="color: #008080;">28</span> <span style="color: #000000;">        initConfig(context);
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 开始听写</span>
<span style="color: #008080;">31</span>         iatDialog.setListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> RecognizerDialogListener() {
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">34</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onResult(RecognizerResult results, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isLast) {
</span><span style="color: #008080;">35</span>                 <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">isLast) {
</span><span style="color: #008080;">36</span>                     dictationResultStr += results.getResultString() + ","<span style="color: #000000;">;
</span><span style="color: #008080;">37</span>                 } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">38</span>                     dictationResultStr += results.getResultString() + "]"<span style="color: #000000;">;
</span><span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span>                     finalResult =<span style="color: #000000;"> DictationJsonParseUtil
</span><span style="color: #008080;">41</span> <span style="color: #000000;">                            .parseJsonData(dictationResultStr);
</span><span style="color: #008080;">42</span> 
<span style="color: #008080;">43</span> <span style="color: #000000;">                    listener.onDictationListener(finalResult);
</span><span style="color: #008080;">44</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">47</span> 
<span style="color: #008080;">48</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">49</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onError(SpeechError error) {
</span><span style="color: #008080;">50</span>                 error.getPlainDescription(<span style="color: #0000ff;">true</span><span style="color: #000000;">);
</span><span style="color: #008080;">51</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">52</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">53</span> 
<span style="color: #008080;">54</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 开始听写</span>
<span style="color: #008080;">55</span> <span style="color: #000000;">        iatDialog.show();
</span><span style="color: #008080;">56</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">57</span> 
<span style="color: #008080;">58</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> initConfig(Context context) {
</span><span style="color: #008080;">59</span>         dictationResultStr = "["<span style="color: #000000;">;
</span><span style="color: #008080;">60</span>         finalResult = ""<span style="color: #000000;">;
</span><span style="color: #008080;">61</span> 
<span style="color: #008080;">62</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 语音配置对象初始化</span>
<span style="color: #008080;">63</span>         SpeechUtility.createUtility(context, SpeechConstant.APPID + "="
<span style="color: #008080;">64</span>                 +<span style="color: #000000;"> DICTATION_APPID);
</span><span style="color: #008080;">65</span> 
<span style="color: #008080;">66</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.创建SpeechRecognizer对象，第2个参数：本地听写时传InitListener</span>
<span style="color: #008080;">67</span>         mIat = SpeechRecognizer.createRecognizer(context, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">68</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 交互动画</span>
<span style="color: #008080;">69</span>         iatDialog = <span style="color: #0000ff;">new</span> RecognizerDialog(context, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">70</span> 
<span style="color: #008080;">71</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.设置听写参数，详见《科大讯飞MSC API手册(Android)》SpeechConstant类</span>
<span style="color: #008080;">72</span>         mIat.setParameter(SpeechConstant.DOMAIN, "iat"); <span style="color: #008000;">//</span><span style="color: #008000;"> domain:域名</span>
<span style="color: #008080;">73</span>         mIat.setParameter(SpeechConstant.LANGUAGE, "zh_cn"<span style="color: #000000;">);
</span><span style="color: #008080;">74</span>         mIat.setParameter(SpeechConstant.ACCENT, "mandarin"); <span style="color: #008000;">//</span><span style="color: #008000;"> mandarin:普通话</span>
<span style="color: #008080;">75</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">76</span> }</pre>
</div>
<p>　　</p>
<p>　　<strong>（六）最后就是在需要语音听写的地方进行调用了，调用起来很简单，只需调用DictationUtil类的静态方法showDictationDialog，第一个参数传入Context，第二个参数创建DictationListener匿名内部类，重写其onDictationListener方法，在该方法中对语音听写最终结果进行处理即可（比如为EditText设置文本等）。</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.easydo.util.DictationListener;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.easydo.util.DictationUtil;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.jiayongji.easydo.R;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.EditText;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.ImageButton;
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CreateScheduleActivity <span style="color: #0000ff;">extends</span> BaseActivity <span style="color: #0000ff;">implements</span>
<span style="color: #008080;">12</span> <span style="color: #000000;">        OnClickListener {
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 日程内容et</span>
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> EditText createScheduleContentEt;
</span><span style="color: #008080;">16</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 日程内容语音听写ib</span>
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> ImageButton createScheduleContentDictationIb;
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">20</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">21</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        setContentView(R.layout.activity_create_schedule);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>         createScheduleContentEt =<span style="color: #000000;"> (EditText) findViewById(R.id.create_schedule_content_et);
</span><span style="color: #008080;">25</span>         createScheduleContentDictationIb =<span style="color: #000000;"> (ImageButton) findViewById(R.id.create_schedule_content_dictation_ib);
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>         createScheduleContentDictationIb.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">28</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">31</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">32</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.create_schedule_content_dictation_ib:
</span><span style="color: #008080;">34</span>             DictationUtil.showDictationDialog(<span style="color: #0000ff;">this</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;"> DictationListener() {
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">37</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDictationListener(String dictationResultStr) {
</span><span style="color: #008080;">38</span> <span style="color: #000000;">                    createScheduleContentEt.setText(dictationResultStr);
</span><span style="color: #008080;">39</span> <span style="color: #000000;">                    createScheduleContentEt.requestFocus();
</span><span style="color: #008080;">40</span> <span style="color: #000000;">                    createScheduleContentEt.setSelection(dictationResultStr
</span><span style="color: #008080;">41</span> <span style="color: #000000;">                            .length());
</span><span style="color: #008080;">42</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">43</span> <span style="color: #000000;">            });
</span><span style="color: #008080;">44</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">45</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">46</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">47</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">48</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">49</span> }</pre>
</div>
<p>&nbsp;</p>
<p style="text-align: right;">（欢迎转载！作者：jiayongji&nbsp;&nbsp; 分享请保留地址：<a href="http://www.cnblogs.com/jiayongji/p/5366171.html">http://www.cnblogs.com/jiayongji/p/5366171.html</a>）</p>
<p style="text-align: right;">&nbsp;</p>
<p style="text-align: right;">&nbsp;</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第13章 Android高级技巧</title><link>http://www.cnblogs.com/jiayongji/archive/2016/04/02/5347583.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sat, 02 Apr 2016 06:58:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/04/02/5347583.html</guid><description><![CDATA[<p><strong>　　（一）全局获取Context</strong></p>
<p>　　1、创建ApplicationUtil类继承自Application类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ApplicationUtil <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Application {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> Context context;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate() {
</span><span style="color: #008080;"> 7</span>         context =<span style="color: #000000;"> getApplicationContext();
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> Context getContext() {
</span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> context;
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> }</pre>
</div>
<p>　　2、在AndroidManifest.xml文件中将application标签的name属性（如果没有该属性则添加）改为：包名.ApplicationUtil。</p>
<p>　　3、在需要全局获取Context（如非Activity类中的Toast方法中）的地方使用ApplicationUtil类的静态方法getContext即可全局获取Context。</p>
<p>&nbsp;</p>
<p><strong>　　（二）使用Intent传递对象</strong></p>
<p>　　使用Intent传递对象主要有两种方式：Serializable方式和Parcelable方式。</p>
<p>&nbsp;</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第2章 Activity</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/31/5340653.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Thu, 31 Mar 2016 04:05:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/31/5340653.html</guid><description><![CDATA[<p>　　<strong>（一）创建活动</strong></p>
<p>　　1、创建活动类</p>
<p>　　创建没有Activity的项目，发现src文件夹是空的，手动创建一个包com.jyj.demo1，在包中添加一个名为MainActivity的class，该MainActivity类要继承Activity类，并重写onCreate()方法.<br />　　ps:重写onCreate方法时候要先写：super.onCreate(...);</p>
<p>　　2、创建布局</p>
<p>　　没有布局的活动是不可见的，在res-&gt;layout目录中添加一个Android XML file，比如文件名为mylayout.xml,可以在该文件中创建布局，添加TextView、Button等控件.</p>
<p>　　3、加载布局</p>
<p>　　需要将第（2）步的layout文件加载到MainActivity中，在第（1）步创建的MainActivity的onCreate()方法中，使用setContentView(R.layout.mylayout)将布局加载进来.</p>
<p>ps:这里的R文件是com.jyj.demo1包下的R文件，而不是android.R！！</p>
<p>　　4、注册活动</p>
<p>　　四大组件都要先注册才能使用，在AndroidManifest.xml文件中，在&lt;application&gt;中添加&lt;activity&gt;标签，将需要注册的activity使用下面代码注册：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> android:name=".MainActivity"</pre>
</div>
<p>　　如果该活动是主活动，即打开程序时候看到的活动，则需要添加：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.action.MAIN"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">category </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.category.LAUNCHER"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>　　总体注册代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity
</span><span style="color: #008080;">2</span>     <span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".MainActivity"</span>
<span style="color: #008080;">3</span> <span style="color: #ff0000;">    android:label</span><span style="color: #0000ff;">="MyAPP"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>     
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.action.MAIN"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">7</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">category </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.category.LAUNCHER"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">8</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">9</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activity</span></pre>
</div>
<p>&nbsp;</p>
<p><strong>　　（二）活动的使用</strong></p>
<p>　　1、隐藏标题栏</p>
<p>　　在活动的onCreate()方法中，在setContentView(...)之前，添加如下一行即可：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> requestWindowFeature(Window.FEATURE_NO_TITLE);</pre>
</div>
<p>　　2、使用Toast</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>,"Hello",Toast.LENGTH_SHORT).show();</pre>
</div>
<p>　　3、使用Menu</p>
<p>　　（1）在res目录新建一个menu文件夹，在menu中新建一个名为main.xml的Android XML File，main.xml的内容如下.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">menu </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
</span><span style="color: #008080;">3</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/ add_item"</span>
<span style="color: #008080;">4</span> <span style="color: #ff0000;">        android:title</span><span style="color: #0000ff;">="Add"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item
</span><span style="color: #008080;">6</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/ remove_item"</span>
<span style="color: #008080;">7</span> <span style="color: #ff0000;">        android:title</span><span style="color: #0000ff;">="Remove"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">8</span>         
<span style="color: #008080;">9</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">menu</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）在MainActivity中重写onCreateOptionsMenu( )方法，代码如下.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> onCreateOptionsMenu(Menu menu){
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    getMenuInflater().inflate(R.menu.main,menu);
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">4</span> }</pre>
</div>
<p>　　（3）为菜单项定义响应事件，在MainActivity中重写onOptionsItemSelected( )方法，代码如下.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> onOptionsItemSelected(MenuItem item){
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">switch</span><span style="color: #000000;">(item.getItemId()){
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.add_item:
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">        Toast...;
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.remove_item:
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">        Toast...;
</span><span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">12</span> }</pre>
</div>
<p>　　4、销毁活动</p>
<p>　　假设有一个按钮button,要为它添加点击事件，当点击它的时候退出程序，那么代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> button.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener(){
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v){
</span><span style="color: #008080;">4</span> <span style="color: #000000;">        finish();
</span><span style="color: #008080;">5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">6</span> });</pre>
</div>
<p>　　</p>
<p>　<strong>　（三）采用Intent切换活动</strong></p>
<p>　　1、显式Intent</p>
<p>　　（1）先新建另外一个活动SecondActivity,现在就有两个活动了：MainActivity和SecondActivity.<br />　　（2）假设要从MainActivity跳转到SecondActivity，那么在MainActivity中需要跳转的地方（如点击事件中）加入如下代码即可：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Intent intent = <span style="color: #0000ff;">new</span> Intent(MainActivity.<span style="color: #0000ff;">this</span>,SecondActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> startActivity(intent);</pre>
</div>
<p>　　2、隐式Intent</p>
<p>　　（1）新建活动SecondActivity,现在就有两个活动了：MainActivity和SecondActivity.假设要从MainActivity跳转到SecondActivity.<br />　　（2）注册SecondActivity时这样写：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".SecondActivity"</span>
<span style="color: #008080;">2</span> <span style="color: #ff0000;">    &lt;intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="com.jyj.demo1.SECOND_START"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">4</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">category </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.category.DEFAULT"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activity</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（3）在MainActivity需要跳转到SecondActivity的地方添加如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Intent intent = <span style="color: #0000ff;">new</span> Intent("com.jyj.demo1.SECOND_START"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> startActivity(intent);</pre>
</div>
<p>　　ps:某活动注册时intent-filter中只能有一个action,但可以有多个category（可以自定义category），其他活动在要跳转到该活动创建intent时，只需满足其中一个category即可跳转到该活动. Intent添加category的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">intent.addCategory(com.example.activitytest.MY_CATEGORY
</span><span style="color: #008080;">2</span> <span style="color: #008000;">//</span><span style="color: #008000;">注：要跳转到的活动在注册时要添加MY_CATEGORY这样一个category，否则会出错</span></pre>
</div>
<p>　　3、隐式Intent的其他用法</p>
<p>　　（1）打开系统的活动</p>
<p>　　如打开浏览器：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Intent intetn = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(Intent.ACTION_VIEW);
</span><span style="color: #008080;">2</span> intent.setData(Uri.parse("http://www.baidu.com"<span style="color: #000000;">));
</span><span style="color: #008080;">3</span> startActivity(intent);</pre>
</div>
<p>　　（2）精确指定当前的活动能响应的数据类型</p>
<p>　　在活动的intent-filter中，添加&lt;data&gt;标签，用于精确指定该活动能响应的数据类型，包括android :scheme用于指定数据的协议部分，如：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">data </span><span style="color: #ff0000;">android:scheme</span><span style="color: #0000ff;">="http"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>　　data标签可以配置以下内容：<br />　　* android: scheme<br />　　　　用于指定数据的协议部分，如http.<br />　　* android: host<br />　　　　用于指定数据的主机名部分，如www. baidu.com<br />　　* android: port<br />　　　　用于指定数据的端口部分，一般紧随主机名之后.<br />　　* android: path<br />　　　　用于指定主机名和端口之后的部分.<br />　　* android: mimeType<br />　　　　用于指定可以处理的数据类型，运行使用通配符的方式进行指定.</p>
<p>&nbsp;　　注：假如活动1要跳转到活动2，只有活动1的Intent中携带的Data和活动2的data标签中指定的内容完全一致时，才能跳转成功.</p>
<p>&nbsp;</p>
<p><strong>　　（四）Intent传递数据</strong></p>
<p>　　1、向下一个活动传递数据</p>
<p>　　（1）在第一个活动中，使用putExtra()将数据传入intent,如：&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> String data = "FirstActivity's data"<span style="color: #000000;">;
</span><span style="color: #008080;">2</span> Intent intent = <span style="color: #0000ff;">new</span> Intent(FirstActivity.<span style="color: #0000ff;">this</span>,SecondActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">3</span> intent.putExtra("extra_data"<span style="color: #000000;">,data);
</span><span style="color: #008080;">4</span> startActivity(intent);</pre>
</div>
<p>　　（2）在第二个活动中，这样接收数据：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Intent intent =<span style="color: #000000;"> getIntent();
</span><span style="color: #008080;">2</span> String data = intent.getStringExtra("extra_data"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> Log.d("data from FirstActivity",data);</pre>
</div>
<p>　　2、返回数据给上一个活动</p>
<p>　　假设活动2在finish时要返回数据给活动1,步骤如下：<br />　　（1）在活动1中button1的点击事件中加入如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Intent intent = <span style="color: #0000ff;">new</span> Intent(FirstActivity.<span style="color: #0000ff;">this</span>,SecondActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> startActivityForResult(intent,1);</pre>
</div>
<p>　　说明：这里的1为requestCode，用于之后判断是不是自己发出去的intent.</p>
<p>　　（2）在活动2中button2的点击事件中加入如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent();
</span><span style="color: #008080;">2</span> String data = "SecondActivity's data for return"<span style="color: #000000;">;
</span><span style="color: #008080;">3</span> intent.putExtra("data_return"<span style="color: #000000;">,data);
</span><span style="color: #008080;">4</span> <span style="color: #000000;">setResult(RESULT_OK,intent);
</span><span style="color: #008080;">5</span> finish();</pre>
</div>
<p>　　说明：RESULT_OK为resultCode,用于在活动1中分辨是哪一个活动返回的数据.</p>
<p>　　（3）重写活动1的onActivityResult方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">@Override
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> onActivityResult(<span style="color: #0000ff;">int</span> requestCode,<span style="color: #0000ff;">int</span><span style="color: #000000;"> resultCode,Intent data){
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">switch</span><span style="color: #000000;">(requestCode){
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">case</span> 1<span style="color: #000000;">:
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">if</span>(resultCode ==<span style="color: #000000;"> RESULT_OK){
</span><span style="color: #008080;"> 6</span>             String returnData = data.getStringExtra("data_return"<span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span>             Log.d("returnData from SecondActivity"<span style="color: #000000;">,returnData);
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">10</span>     <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> }</pre>
</div>
<p>　　（4）如果活动2是按返回键返回的，可以在活动2中重写onBackPressed方法返回数据，方法同第（2）步.</p>
<p>&nbsp;</p>
<p><strong>　　（五）活动的生命周期</strong></p>
<p>　　1、活动的状态</p>
<p>　　* 运行状态：在返回栈栈顶时<br />　　* 暂停状态：不可操作，但可见<br />　　* 停止状态：完全不可见<br />　　* 销毁状态：从栈中移除</p>
<p>　　2、活动生存周期图</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160331114934098-1886692323.png" alt="" /></p>
<p>　　3、活动的生存周期</p>
<p>&nbsp;　&nbsp; * 完整生存期：onCreate()&mdash;&gt;onDestroy()<br />　　* 可见生存期：onStart()&mdash;&gt;onStop()<br />　　* 前台生存期：onResume()&mdash;&gt;onPause()</p>
<p>　　4、活动被回收后的数据保存</p>
<p>　　（1）重写Activity的onSaveInstanceState()方法，该方法携带一个bundle参数，bundle可以保存各种信息，代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@Override
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onSaveInstanceState(Bundle outState) {
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">super</span><span style="color: #000000;">.onSaveInstanceState(outState);
</span><span style="color: #008080;">4</span>     String tempData = "Something you just typed"<span style="color: #000000;">;
</span><span style="color: #008080;">5</span>     outState.putString("data_key"<span style="color: #000000;">, tempData);
</span><span style="color: #008080;">6</span> }</pre>
</div>
<p>　　（2）如何恢复呢？在onCreate()方法，传入的参数为Bundle savedInstanceState,利用这个参数恢复数据：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span>(savedInstanceState != <span style="color: #0000ff;">null</span><span style="color: #000000;">){
</span><span style="color: #008080;">2</span>     String tempData = savedInstanceState.getString("data_key"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> }</pre>
</div>
<p>　　</p>
<p>　<strong>　（六）活动的启动模式</strong></p>
<p>　　1、standard</p>
<p>　　在启动活动时，不管它在返回栈中是不是已经存在，都会创建一个新的活动放到返回栈栈顶.这是活动的默认启动模式.<br />　　示意图：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160331115354019-1395471266.png" alt="" />　　2、singleTop</p>
<p>　　在启动活动时，如果发现返回栈的栈顶已经是该活动了，那么就直接使用它，不会再创建新的活动实例；其他情况会创建新的活动实例.<br />　　示意图：&nbsp;</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160331115538644-994971857.png" alt="" /></p>
<p style="text-align: left;">　　3、singleTask</p>
<p style="text-align: left;">　　启动活动前，先检查整改返回栈，如果栈中存在该活动的实例，则不会重新创建，否则重新创建.<br />　　示意图：</p>
<p style="text-align: left;"><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160331115647129-76885991.png" alt="" /></p>
<p style="text-align: left;">　　4、singleInstance</p>
<p style="text-align: left;">　　若某活动A被指定为singleInstance的启动模式，那么在A启动时会重新在一个新的返回栈中创建它，A与其他活动不在同一个Task中，其他程序也可以调用活动A的这个实例.<br />　　示意图：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160331115827457-143910828.png" alt="" /></p>
<p style="text-align: left;">　　5、指定活动的启动模式的方法：</p>
<p style="text-align: left;">　　在AndroidManifest.xml文件的Activity标签中：</p>
<p style="text-align: left;">　　&lt;activity</p>
<p style="text-align: left;">　　　　android:launchMode="singleTask"</p>
<p style="text-align: left;">　　　　... &gt;</p>
<p style="text-align: left;">　　　　...</p>
<p style="text-align: left;">　　&lt;/activity&gt;</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">　<strong>　（七）活动的最佳实践</strong></p>
<p style="text-align: left;">　　1、知道当前页面是哪个活动</p>
<p style="text-align: left;">　　（1）新建一个BaseActivity extends Activity.<br />　　（2）在BaseActivity中打印活动信息：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Log.i("BaseActivity",getClass().getSimpleName());  <span style="color: #008000;">//</span><span style="color: #008000;">获得类名</span></pre>
</div>
<p>　　（3）以后编写的所有活动都extends BaseActivity即可.</p>
<p>　　2、随时随地退出程序</p>
<p>　　写代码时候会遇到这样一个问题：当打开很多活动之后，退出程序需要一直按好多次Back，很麻烦.解决方法如下：<br />　　（1）新建一个活动管理类，实现所有活动的添加、删除和finish:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ActivityCollector{
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> List&lt;Activity&gt; activities = <span style="color: #0000ff;">new</span> ArrayList&lt;Activity&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 3</span>     
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> addActivity(Activity activity){
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        activities.add(activity);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span>     
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> removeActivity(Activity activity){
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        activities.remove(activity);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span>     
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> finishAll(){
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;">(Activity activity:activities){
</span><span style="color: #008080;">14</span>             <span style="color: #0000ff;">if</span>(!<span style="color: #000000;">activity.isFinishing()){
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                activity.finish();
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> }</pre>
</div>
<p>　　（2）然后修改BaseActivity，在onCreate方法中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> ActivityCollector.addActivity(<span style="color: #0000ff;">this</span>);</pre>
</div>
<p>　　在onDestroy方法中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> ActivityCollector.removeActivity(<span style="color: #0000ff;">this</span>);</pre>
</div>
<p>　　（3）如果想完全退出程序，只需调用ActivityCollector.finishAll方法即可.</p>
<p>　　3、给每个活动添加一个合适的启动方法</p>
<p>　　有时也会遇到这个问题：需要启动一个SecondActivity，可是不知道该Activity需要哪些参数，怎么办？<br />办法：<br />　　（1）在SecondActivity中添加一个启动自己的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> SecondActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity{
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    ...
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> startActivity(Context context,String data1,String data2){
</span><span style="color: #008080;">4</span>         Intent intent = <span style="color: #0000ff;">new</span> Intent(context,SecondActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">5</span>         intent.putExtra("param1"<span style="color: #000000;">,data1);
</span><span style="color: #008080;">6</span>         intent.putExtra("param2"<span style="color: #000000;">,data2);
</span><span style="color: #008080;">7</span> <span style="color: #000000;">        startActivity(intent);
</span><span style="color: #008080;">8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">9</span> }</pre>
</div>
<p>　　（2）在FirstActivity中启动SecondActivity的方法为：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> SecondActivity.startActivity(FirstActivity.<span style="color: #0000ff;">this</span>,"data1","data2");</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第1章 Android系统</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/31/5340421.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Thu, 31 Mar 2016 03:17:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/31/5340421.html</guid><description><![CDATA[<p><strong>　　（一）Android系统架构</strong></p>
<p>　　1、Linux内核层：各种底层驱动，如显示驱动、音频驱动、电源管理等。</p>
<p>　　2、系统运行库层：各种库支持，如3D绘图、浏览器内核、数据库等。</p>
<p>　　3、应用框架层：各种API,各种Manager。</p>
<p>　　4、应用层：所有的应用程序。</p>
<p>&nbsp;</p>
<p>　<strong>　（二）安卓系统级功能</strong></p>
<p>　　1、四大组件：Activity,Service,Broadcast,Content Provider。</p>
<p>　　2、系统控件：用于写界面，也可以自己定制界面。</p>
<p>　　3、SQLite数据库：轻量级、快速的嵌入式关系型数据库。</p>
<p>　　4、地理位置定位：内置GPS,基于它可以开发LBS应用。</p>
<p>　　5、多媒体：音频、视频、录音、拍照、视频等。</p>
<p>　　6、传感器：加速度传感器、方向传感器。</p>
<p>&nbsp;</p>
<p><strong>　　（三）搭建Android开发环境</strong></p>
<p>　　1、准备所需要的软件：</p>
<p>　　（1）Android SDK</p>
<p>　　（2）编译器：Eclipse</p>
<p>　　（3）ADT：是Eclipse的插件</p>
<p>　　PS：一整套工具百度网盘存放地址：<a title="Android+Eclipse开发环境搭建及环境资源打包（亲测可用）" href="http://pan.baidu.com/s/1jI6fmjO" target="_blank">http://pan.baidu.com/s/1jI6fmjO</a></p>
<p>　　2、创建手机模拟器：用ARM架构的更快一些.<br />　　PS:模拟器出问题时，先重启adb试试(在DDMS中)，再重启Eclipse</p>
<p>&nbsp;</p>
<p>　　<strong>（四）Eclipse中项目文件结构</strong></p>
<p>　　1、src：放所有Java代码的地方</p>
<p>　　2、gen：这个目录的内容都是自动生成的，主要有一个R.java文件，不要尝试手动去修改它！</p>
<p>　　　　java代码中：R.xx.xx查询<br />　　　　xml文件中：@xx/xx查询<br />　　比如：<br />　　　　R.string.hello_world<br />　　　　@string/hello_world</p>
<p>　　3、assets：存放一些随程序打包的文件</p>
<p>　　4、bin：包含一些在编译时自动产生的文件，其中会有一个apk文件，可以在手机上直接安装.</p>
<p>　　5、libs：包含第三方Jar包</p>
<p>　　6、res：图片、布局、字符串等各种资源</p>
<p>　　7、AndroidManifest.xml：项目配置文件，用到的所有四大组件都需要在这里注册.还可以添加权限声明、设置版本等.</p>
<p>　　8、project.properties：只有一行代码，指定编译程序时所使用的SDK版本.</p>
<p>&nbsp;</p>
<p><strong>　　（五）安卓项目中的资源（res目录）</strong></p>
<p>　　1、以drawable开头的文件夹：存放图片.<br />　　PS:项目的图标文件就是在AndroidManifest.xml文件中通过下面代码指定的：android:icon="@drawable/ic_launcher"</p>
<p>　　2、以values开头的文件夹：存放字符串</p>
<p>　　3、layout文件夹：存放布局文件</p>
<p>　　4、menu文件夹：存放菜单文件</p>
<p>&nbsp;</p>
<p><strong>　　（六）日志工具android.util.Log&nbsp;</strong></p>
<p>　　1、Log.v( )：打印琐碎的日志信息</p>
<p>　　2、Log.d( )：打印调试信息</p>
<p>　　3、Log.i( )：打印比较重要的数据</p>
<p>　　4、Log.w( )：打印警告信息</p>
<p>　　5、Log.e( )：打印错误信息</p>
<p>&nbsp;</p>]]></description></item><item><title>Android制作和使用Nine-Patch图片</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/30/5338245.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Wed, 30 Mar 2016 10:14:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/30/5338245.html</guid><description><![CDATA[<p>　　Nine-Patch图片是一种经过特殊处理的png图片，能够指定图片的哪些区域可以被拉伸而哪些区域不可以。</p>
<p><strong>　　（一）普通图片被拉伸时的缺陷</strong></p>
<p>　　有如下xml文件，其中子LinearLayout的背景图片设置成一个名为chat的png图片：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:background</span><span style="color: #0000ff;">="@drawable/chat"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　显示效果如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330174735863-2094615636.png" alt="" /></p>
<p style="text-align: left;">　　而chat.png的原图是这样的：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330174804394-626700614.png" alt="" /></p>
<p style="text-align: left;">　　可见严重变形，因为chat.png的宽度不足以填满整个屏幕的宽度，整张图片被均匀拉伸了，这是不能容忍的！于是我们就要把它处理成Nine-Patch图片。</p>
<p style="text-align: left;">　　</p>
<p style="text-align: left;">　　<strong>（二）Nine-Patch图片的制作方法</strong></p>
<p style="text-align: left;">　　1、在Android SDK的tools文件夹下，有一个draw9patch.bat的文件，就用它来制作Nine-Patch图片。</p>
<p style="text-align: left;">　　2、打开这个软件后，点击File&mdash;&gt;Open 9-patch将chat.png加载进来，如下：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330175457941-2102372937.png" alt="" /></p>
<p style="text-align: left;">　　3、可以在图片的四个边框绘制一个个小黑点，上边框和左边框的部分表示当图片需要拉伸时就拉伸黑点标记的区域，下边框和右边框绘制的部分则表示内容会被放置的区域，如下图：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330180827160-1859918502.png" alt="" /></p>
<p style="text-align: left;">　　4、修改好后点击File&mdash;&gt;Save 9-patch，把绘制好的图片保存成chat.9.png，然后把chat.9.png再复制到工程的drawable目录下，并删除原来的chat.png，这时再看效果就没有拉伸变形丑陋的情况了（注意：此时xml中仍然写成：android:background="@drawable/chat"<strong>而不是：</strong>android:background="@drawable/chat.9"）</p>
<p style="text-align: center;">　　<img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330181122535-1773946035.png" alt="" /></p>
<p>&nbsp;</p>
<p>　　5、注意：制作Nine-Patch图片时每条边的黑线必须是连续的，不能断开，否则图片会失效。</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第3章 UI基础</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/29/5332477.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Tue, 29 Mar 2016 06:55:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/29/5332477.html</guid><description><![CDATA[<p>　　<strong>（一）Android常用控件及简单用法</strong></p>
<p><strong>　</strong>　1、如下图：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160329120927707-1307715551.png" alt="" /></p>
<p>　　2、补充：</p>
<p>　　（1）margin：外边距；padding：内边距。</p>
<p>　　（2）gravity：子元素的位置；layout_gravity：子元素在父元素中的位置。</p>
<p>　　（3）当布局方向为横向时，不能指定子元素在横向上的对齐方式；竖向同理。</p>
<p>&nbsp;</p>
<p><strong>　　（二）四种布局</strong></p>
<p><strong>　</strong>　1、布局与控件的嵌套关系：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160329144210894-1168753202.png" alt="" /></p>
<p style="text-align: left;">　　2、四种基本布局</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160329145423301-57227584.png" alt="" /></p>
<p style="text-align: left;"><strong>　　（三）自定义控件的使用　</strong>　</p>
<p style="text-align: left;">　　1、Android中控件和布局的继承结构图：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330143223269-750766889.png" alt="" /></p>
<p style="text-align: left;">　　2、在xml文件中引入布局</p>
<p style="text-align: left;">　　假如新建了一个名为title.xml的布局文件，作为标题栏，然后在activity_main.xml中可以用&lt;include layout="@layout/title" /&gt;这样的方法引入title.xml的布局。</p>
<p style="text-align: left;">　　3、创建自定义控件并为控件中的元素添加点击事件：</p>
<p style="text-align: left;">　　（1）title_base.xml和color.xml（用于保存常用颜色）</p>
<p style="text-align: left;">　　title_base.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:background</span><span style="color: #0000ff;">="@drawable/TitleBaseBg"</span>
<span style="color: #008080;"> 6</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="horizontal"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;"> 9</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="0dp"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">11</span> <span style="color: #ff0000;">        android:layout_gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">12</span> <span style="color: #ff0000;">        android:layout_weight</span><span style="color: #0000ff;">="1"</span>
<span style="color: #008080;">13</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="left"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageButton
</span><span style="color: #008080;">17</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/title_base_left_ib"</span>
<span style="color: #008080;">18</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">19</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">            android:background</span><span style="color: #0000ff;">="@drawable/Transparent"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">            android:padding</span><span style="color: #0000ff;">="5dp"</span>
<span style="color: #008080;">22</span> <span style="color: #ff0000;">            android:src</span><span style="color: #0000ff;">="@drawable/back1_64"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">23</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;">26</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="0dp"</span>
<span style="color: #008080;">27</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">28</span> <span style="color: #ff0000;">        android:layout_gravity</span><span style="color: #0000ff;">="center_vertical"</span>
<span style="color: #008080;">29</span> <span style="color: #ff0000;">        android:layout_weight</span><span style="color: #0000ff;">="1"</span>
<span style="color: #008080;">30</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">31</span> <span style="color: #ff0000;">        android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">34</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/title_base_middle_tv"</span>
<span style="color: #008080;">35</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">36</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">37</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="我的App"</span>
<span style="color: #008080;">38</span> <span style="color: #ff0000;">            android:textColor</span><span style="color: #0000ff;">="@drawable/White"</span>
<span style="color: #008080;">39</span> <span style="color: #ff0000;">            android:textSize</span><span style="color: #0000ff;">="20sp"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">40</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">41</span> 
<span style="color: #008080;">42</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;">43</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="0dp"</span>
<span style="color: #008080;">44</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">45</span> <span style="color: #ff0000;">        android:layout_gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">46</span> <span style="color: #ff0000;">        android:layout_weight</span><span style="color: #0000ff;">="1"</span>
<span style="color: #008080;">47</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="right"</span>
<span style="color: #008080;">48</span> <span style="color: #ff0000;">        android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">49</span> 
<span style="color: #008080;">50</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageButton
</span><span style="color: #008080;">51</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/title_base_right_ib"</span>
<span style="color: #008080;">52</span> <span style="color: #ff0000;">            android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">53</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">54</span> <span style="color: #ff0000;">            android:background</span><span style="color: #0000ff;">="@drawable/Transparent"</span>
<span style="color: #008080;">55</span> <span style="color: #ff0000;">            android:padding</span><span style="color: #0000ff;">="5dp"</span>
<span style="color: #008080;">56</span> <span style="color: #ff0000;">            android:src</span><span style="color: #0000ff;">="@drawable/add4_64"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">57</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">58</span> 
<span style="color: #008080;">59</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　color.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">resources</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> 
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">drawable </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="TitleBaseBg"</span><span style="color: #0000ff;">&gt;</span>#ff272636<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">drawable</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">drawable </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Transparent"</span><span style="color: #0000ff;">&gt;</span>#00ffffff<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">drawable</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">drawable </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="White"</span><span style="color: #0000ff;">&gt;</span>#ffffffff<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">drawable</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">resources</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）BaseTitleLayout.java，是个抽象类，继承自LinearLayout：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span> BaseTitleLayout <span style="color: #0000ff;">extends</span><span style="color: #000000;"> LinearLayout {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">protected</span><span style="color: #000000;"> ImageButton titleBaseLeftIb;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">protected</span><span style="color: #000000;"> TextView titleBaseMiddleTv;
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">protected</span><span style="color: #000000;"> ImageButton titleBaseRightIb;
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> BaseTitleLayout(Context context, AttributeSet attrs) {
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);
</span><span style="color: #008080;"> 8</span>         LayoutInflater.from(context).inflate(R.layout.title_base, <span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>         titleBaseLeftIb =<span style="color: #000000;"> (ImageButton) findViewById(R.id.title_base_left_ib);
</span><span style="color: #008080;">11</span>         titleBaseMiddleTv =<span style="color: #000000;"> (TextView) findViewById(R.id.title_base_middle_tv);
</span><span style="color: #008080;">12</span>         titleBaseRightIb =<span style="color: #000000;"> (ImageButton) findViewById(R.id.title_base_right_ib);
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">        changeUI();
</span><span style="color: #008080;">15</span> <span style="color: #000000;">        onLeftClick();
</span><span style="color: #008080;">16</span> <span style="color: #000000;">        onRightClick();
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 改变标题栏按钮、文字、背景等</span>
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> changeUI();
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 标题栏左边按钮的点击事件</span>
<span style="color: #008080;">23</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onLeftClick();
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 标题栏右边按钮的点击事件</span>
<span style="color: #008080;">26</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onRightClick();
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span> }</pre>
</div>
<p>　　（3）MainActivityTitleLayout.java，继承自BaseTitleLayout：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivityTitleLayout <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BaseTitleLayout {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> MainActivityTitleLayout(Context context, AttributeSet attrs) {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> changeUI() {
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        titleBaseLeftIb.setVisibility(View.INVISIBLE);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">14</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onLeftClick() {
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">19</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onRightClick() {
</span><span style="color: #008080;">20</span>         titleBaseRightIb.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">23</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">24</span>                 Toast.makeText(getContext(), "点击了添加按钮"<span style="color: #000000;">, Toast.LENGTH_SHORT)
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                        .show();
</span><span style="color: #008080;">26</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">27</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">28</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> }</pre>
</div>
<p>　　（4）activity_main.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">com.easydo.layout.MainActivityTitleLayout
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">com.easydo.layout.MainActivityTitleLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（5）MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">5</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">6</span> <span style="color: #000000;">        requestWindowFeature(Window.FEATURE_NO_TITLE);
</span><span style="color: #008080;">7</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">9</span> }</pre>
</div>
<p>　　（6）运行效果：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330144806566-1491208887.png" alt="" />　</p>
<p><strong>　　（四）ListView的用法</strong></p>
<p>　　1、最简单的用法</p>
<p>　　（1）xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ListView
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/content_lv"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="match_parent"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ListView</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）MainActivity（详细步骤见注释）</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 1.创建数据数组</span>
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> String[] animalList = { "猫", "狗", "狐狸", "小熊", "鱼", "老虎"<span style="color: #000000;">,
</span><span style="color: #008080;"> 4</span>             "长颈鹿", "象", "龙猫"<span style="color: #000000;"> };
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">    ListView listView;
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.创建以数据列表元素类型为泛型的适配器
</span><span style="color: #008080;">14</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 构造函数：第一个参数为上下文；第二个参数为列表项的布局，这里用Android自带的布局；第三个参数为第1步中准备好的数据数组.
</span><span style="color: #008080;">15</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> simple_list_item_1:单行显示，其中只有一个TextView
</span><span style="color: #008080;">16</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> simple_list_item_2:双行显示，有两个TextView，两行字大小不一样
</span><span style="color: #008080;">17</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> two_line_list_item:双行显示，有两个TextView，两行字大小一样</span>
<span style="color: #008080;">18</span>         ArrayAdapter&lt;String&gt; adapter = <span style="color: #0000ff;">new</span> ArrayAdapter&lt;String&gt;<span style="color: #000000;">(
</span><span style="color: #008080;">19</span>                 MainActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">, android.R.layout.simple_list_item_1,
</span><span style="color: #008080;">20</span> <span style="color: #000000;">                animalList);
</span><span style="color: #008080;">21</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.获取xml中的ListView实例</span>
<span style="color: #008080;">22</span>         listView =<span style="color: #000000;"> (ListView) findViewById(R.id.content_lv);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 4.用第2步创建好的适配器来设置ListView实例的内容</span>
<span style="color: #008080;">25</span> <span style="color: #000000;">        listView.setAdapter(adapter);
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">27</span> }</pre>
</div>
<p>　　（3）运行结果：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330154511816-990066656.png" alt="" /></p>
<p style="text-align: left;">　　2、定制的ListView界面</p>
<p>　　上面的ListView每个项只能显示一个文本，太单调了，下面通过定制的方式让它丰富起来。实现左边显示一个图片，右边显示动物名字的效果。</p>
<p>　　步骤如下：</p>
<p>　　（1）创建一个实体类Animal，作为ListView适配器的类型：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Animal {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> imageId;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> Animal(String name, <span style="color: #0000ff;">int</span><span style="color: #000000;"> imageId) {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;"> 7</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 对应的图片ID</span>
<span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">this</span>.imageId =<span style="color: #000000;"> imageId;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getImageId() {
</span><span style="color: #008080;">16</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> imageId;
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> }</pre>
</div>
<p>　　（2）创建animal_item.xml文件，其中包含一个ImageView和一个TextView：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/animal_img_iv"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">13</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/animal_name_tv"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:layout_gravity</span><span style="color: #0000ff;">="center"</span>
<span style="color: #008080;">17</span> <span style="color: #ff0000;">        android:layout_marginLeft</span><span style="color: #0000ff;">="10dp"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（3）创建自定义适配器类AnimalAdapter，以Animal类为泛型，继承自ArrayAdapter&lt;Animal&gt;，重写父类的构造方法和getView方法，getView方法会在每个子项被滚动到屏幕内的时候调用：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AnimalAdapter <span style="color: #0000ff;">extends</span> ArrayAdapter&lt;Animal&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> resourceId;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> AnimalAdapter(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> textViewResourceId,
</span><span style="color: #008080;"> 6</span>             List&lt;Animal&gt;<span style="color: #000000;"> objects) {
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, textViewResourceId, objects);
</span><span style="color: #008080;"> 8</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> textViewResourceId：ListView子项布局的id;objects：数据</span>
<span style="color: #008080;"> 9</span>         resourceId =<span style="color: #000000;"> textViewResourceId;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> getView方法会在每个子项被滚动到屏幕内的时候调用</span>
<span style="color: #008080;">13</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {
</span><span style="color: #008080;">15</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.获取当前项的Animal实例</span>
<span style="color: #008080;">16</span>         Animal animal =<span style="color: #000000;"> getItem(position);
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.为这个子项加载传入的布局</span>
<span style="color: #008080;">19</span>         View view = LayoutInflater.from(getContext()).inflate(resourceId, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.用view的findViewById方法获取到子项布局控件的实例</span>
<span style="color: #008080;">22</span>         ImageView animalImage =<span style="color: #000000;"> (ImageView) view
</span><span style="color: #008080;">23</span> <span style="color: #000000;">                .findViewById(R.id.animal_img_iv);
</span><span style="color: #008080;">24</span>         TextView animalName =<span style="color: #000000;"> (TextView) view.findViewById(R.id.animal_name_tv);
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 4.设置相应控件的内容</span>
<span style="color: #008080;">27</span> <span style="color: #000000;">        animalImage.setImageResource(animal.getImageId());
</span><span style="color: #008080;">28</span> <span style="color: #000000;">        animalName.setText(animal.getName());
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 5.返回view</span>
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> view;
</span><span style="color: #008080;">32</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">33</span> }</pre>
</div>
<p>　　<strong>注：在getView方法里还可以为item的子控件添加点击事件。</strong></p>
<p>　　（4）MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 1.创建动物名字数组和动物数据列表</span>
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> String[] animalNameList = { "猫", "狗", "狐狸", "小熊", "鱼", "老虎", "长颈鹿"<span style="color: #000000;">,
</span><span style="color: #008080;"> 4</span>             "象", "龙猫"<span style="color: #000000;"> };
</span><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">private</span> List&lt;Animal&gt; animalList = <span style="color: #0000ff;">new</span> ArrayList&lt;Animal&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 6</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 为简单起见，把所有动物的图片都设置为ic_launcher</span>
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> animalImageResourceId =<span style="color: #000000;"> R.drawable.ic_launcher;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #000000;">    ListView listView;
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">12</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.初始化动物数据</span>
<span style="color: #008080;">17</span> <span style="color: #000000;">        initAnimals();
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.创建自定义的适配器实例
</span><span style="color: #008080;">20</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 构造函数：第一个参数：当前上下文；第二个参数：子项布局xml文件；第三个参数：动物数据List</span>
<span style="color: #008080;">21</span>         AnimalAdapter adapter = <span style="color: #0000ff;">new</span> AnimalAdapter(MainActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,
</span><span style="color: #008080;">22</span> <span style="color: #000000;">                R.layout.animal_item, animalList);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 4.获取ListView实例</span>
<span style="color: #008080;">25</span>         listView =<span style="color: #000000;"> (ListView) findViewById(R.id.content_lv);
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 5.设置适配器</span>
<span style="color: #008080;">28</span> <span style="color: #000000;">        listView.setAdapter(adapter);
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> initAnimals() {
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; animalNameList.length; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">34</span>             Animal animal = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Animal(animalNameList[i], animalImageResourceId);
</span><span style="color: #008080;">35</span> <span style="color: #000000;">            animalList.add(animal);
</span><span style="color: #008080;">36</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">37</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">38</span> }</pre>
</div>
<p>　　（5）运行效果：</p>
<p style="text-align: center;"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160330165127207-316646143.png" alt="" /></p>
<p>　　3、提升ListView的效率</p>
<p>　　在AnimalAdapter的getView方法中，每次都将布局重新加载一遍，当快速滚动屏幕时候就会带来性能问题，为此要做一些优化。修改如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AnimalAdapter <span style="color: #0000ff;">extends</span> ArrayAdapter&lt;Animal&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> resourceId;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> AnimalAdapter(Context context, <span style="color: #0000ff;">int</span><span style="color: #000000;"> textViewResourceId,
</span><span style="color: #008080;"> 6</span>             List&lt;Animal&gt;<span style="color: #000000;"> objects) {
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, textViewResourceId, objects);
</span><span style="color: #008080;"> 8</span>         <span style="color: #008000;">//<span style="color: #008000;"><span style="color: #008000;"> textViewResourceId：ListView子项布局的id;objects：数据<br /></span></span></span>
<span style="color: #008080;"> 9</span>         resourceId =<span style="color: #000000;"> textViewResourceId;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> getView方法会在每个子项被滚动到屏幕内的时候调用</span>
<span style="color: #008080;">13</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {
</span><span style="color: #008080;">15</span>         Animal animal =<span style="color: #000000;"> getItem(position);
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 用于提升性能</span>
<span style="color: #008080;">18</span> <span style="color: #000000;">        View view;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">        ViewHolder viewHolder;
</span><span style="color: #008080;">20</span>         <span style="color: #0000ff;">if</span> (convertView == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">21</span>             view = LayoutInflater.from(getContext()).inflate(resourceId, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">22</span>             viewHolder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ViewHolder();
</span><span style="color: #008080;">23</span>             viewHolder.animalImage =<span style="color: #000000;"> (ImageView) view
</span><span style="color: #008080;">24</span> <span style="color: #000000;">                    .findViewById(R.id.animal_img_iv);
</span><span style="color: #008080;">25</span>             viewHolder.animalName =<span style="color: #000000;"> (TextView) view
</span><span style="color: #008080;">26</span> <span style="color: #000000;">                    .findViewById(R.id.animal_name_tv);
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 将viewHolder存储在View中</span>
<span style="color: #008080;">29</span> <span style="color: #000000;">            view.setTag(viewHolder);
</span><span style="color: #008080;">30</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">31</span>             view =<span style="color: #000000;"> convertView;
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 重新获取viewHolder</span>
<span style="color: #008080;">34</span>             viewHolder =<span style="color: #000000;"> (ViewHolder) view.getTag();
</span><span style="color: #008080;">35</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">36</span> 
<span style="color: #008080;">37</span> <span style="color: #000000;">        viewHolder.animalImage.setImageResource(animal.getImageId());
</span><span style="color: #008080;">38</span> <span style="color: #000000;">        viewHolder.animalName.setText(animal.getName());
</span><span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> view;
</span><span style="color: #008080;">41</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">42</span> 
<span style="color: #008080;">43</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 创建内部类用于缓存，优化性能</span>
<span style="color: #008080;">44</span>     <span style="color: #0000ff;">class</span><span style="color: #000000;"> ViewHolder {
</span><span style="color: #008080;">45</span> <span style="color: #000000;">        ImageView animalImage;
</span><span style="color: #008080;">46</span> <span style="color: #000000;">        TextView animalName;
</span><span style="color: #008080;">47</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">48</span> }</pre>
</div>
<p>　　4、为ListView的子项添加点击事件</p>
<p>　　使用ListView对象的setOnItemClickListener方法，如：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　 <span style="color: #000000;">...
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">        listView.setAdapter(adapter);
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>         listView.setOnItemClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnItemClickListener() {
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onItemClick(AdapterView&lt;?&gt;<span style="color: #000000;"> parent, View view,
</span><span style="color: #008080;"> 8</span>                     <span style="color: #0000ff;">int</span> position, <span style="color: #0000ff;">long</span><span style="color: #000000;"> id) {
</span><span style="color: #008080;"> 9</span>                 Animal animal =<span style="color: #000000;"> animalList.get(position);
</span><span style="color: #008080;">10</span>                 Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">, animal.getName(),
</span><span style="color: #008080;">11</span> <span style="color: #000000;">                        Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">12</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>         });</pre>
</div>
<p>&nbsp;　　5、补充：</p>
<p>　　（1）xml中设置ListView的分割线颜色：android:divider="#000"</p>
<p>　　（2）将ListView定位到最后一行：listView.setSelection(dataList.size());</p>
<p>&nbsp;</p>
<p><strong>　　（五）单位和尺寸</strong></p>
<p><strong>　　</strong>1、像素密度：每英寸所包含的像素数，单位为dpi.</p>
<p>　　x方向像素密度值的获取方法：float xdpi = getResources().getDisplayMetrics().xdpi;</p>
<p>　　y方向像素密度值的获取方法：float ydpi = getResources().getDisplayMetrics().ydpi;</p>
<p>　　2、使用dp为单位来设置控件的宽和高，就可以保证控件在不同像素密度的屏幕上显示的比例是一致的。使用sp来设置字体大小同理。</p>
<p>　　</p>
<p>　　<strong>（六）制作Nine-Patch图片</strong></p>
<p>&nbsp;　　详见另一篇博文：<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/jiayongji/p/5338245.html">Android制作和使用Nine-Patch图片</a></p>
<p>&nbsp;</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第5章 Broadcast</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/28/5329265.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Mon, 28 Mar 2016 14:35:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/28/5329265.html</guid><description><![CDATA[<p><strong>　　（一）广播机制简介</strong></p>
<p>　　1、Android广播的分类：</p>
<p>　　如图所示：</p>
<p style="text-align: center;">　　<img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160328145800191-771404754.png" alt="" /></p>
<p style="text-align: left;">　　2、发送广播：使用Intent；接收广播：Broadcast Receiver。</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">　<strong>　（二）接收系统广播</strong></p>
<p style="text-align: left;">　　1、动态注册监听网络变化</p>
<p style="text-align: left;">　　示例程序：</p>
<p style="text-align: left;">　　（1）MainActivity（注：以下代码中的ToastUtil是自己简单封装的Toast显示功能的类）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.broadcasttest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.BroadcastReceiver;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.IntentFilter;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.net.ConnectivityManager;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.net.NetworkInfo;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> IntentFilter intentFilter;
</span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> NetworkChangeReceiver networkChangeReceiver;
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">20</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">21</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.创建IntentFilter实例</span>
<span style="color: #008080;">25</span>         intentFilter = <span style="color: #0000ff;">new</span><span style="color: #000000;"> IntentFilter();
</span><span style="color: #008080;">26</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.用addAction方法添加action</span>
<span style="color: #008080;">27</span>         intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE"<span style="color: #000000;">);
</span><span style="color: #008080;">28</span> 
<span style="color: #008080;">29</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.创建内部类NetworkChangeReceiver实例</span>
<span style="color: #008080;">30</span>         networkChangeReceiver = <span style="color: #0000ff;">new</span><span style="color: #000000;"> NetworkChangeReceiver();
</span><span style="color: #008080;">31</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 4.注册</span>
<span style="color: #008080;">32</span> <span style="color: #000000;">        registerReceiver(networkChangeReceiver, intentFilter);
</span><span style="color: #008080;">33</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">34</span> 
<span style="color: #008080;">35</span>     <span style="color: #0000ff;">class</span> NetworkChangeReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;">36</span> 
<span style="color: #008080;">37</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;">38</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">39</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 创建ConnectivityManager实例</span>
<span style="color: #008080;">40</span>             ConnectivityManager connectivityManager =<span style="color: #000000;"> (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
</span><span style="color: #008080;">41</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 创建NetworkInfo对象（需要申请权限ACCESS_NETWORK_STATE）</span>
<span style="color: #008080;">42</span>             NetworkInfo networkInfo =<span style="color: #000000;"> connectivityManager
</span><span style="color: #008080;">43</span> <span style="color: #000000;">                    .getActiveNetworkInfo();
</span><span style="color: #008080;">44</span> 
<span style="color: #008080;">45</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 判断NetworkInfo的状态，即网络是否可用</span>
<span style="color: #008080;">46</span>             <span style="color: #0000ff;">if</span> (networkInfo != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> networkInfo.isAvailable()) {
</span><span style="color: #008080;">47</span>                 ToastUtil.showShort(MainActivity.<span style="color: #0000ff;">this</span>, "网络可用！"<span style="color: #000000;">);
</span><span style="color: #008080;">48</span>             } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">49</span>                 ToastUtil.showShort(MainActivity.<span style="color: #0000ff;">this</span>, "网络不可用！"<span style="color: #000000;">);
</span><span style="color: #008080;">50</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">51</span> 
<span style="color: #008080;">52</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">53</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">54</span> 
<span style="color: #008080;">55</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">56</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">57</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">58</span> <span style="color: #000000;">        unregisterReceiver(networkChangeReceiver);
</span><span style="color: #008080;">59</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">60</span> 
<span style="color: #008080;">61</span> }</pre>
</div>
<p>　　（2）申请权限</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.ACCESS_NETWORK_STATE"</span><span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>　　（3）xml文件：不需要添加什么内容。</p>
<p>　　2、静态注册实现开机启动</p>
<p>　　动态注册的一个缺点就是，必须要在程序启动之后才能接收到广播，而静态注册就可以在程序还未启动时就能接收到广播，利用这一点就可以实现诸如开机启动程序的功能。</p>
<p>　　示例程序：</p>
<p>　　（1）新建类BootCompleteReceiver继承自BroadcastReceiver（注：onReceive方法中红不能放过于耗时的逻辑，因为其中不允许使用线程）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.broadcasttest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.BroadcastReceiver;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> BootCompleteReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">11</span>         ToastUtil.showShort(context, "BroadcastTest开机启动"<span style="color: #000000;">);
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> }</pre>
</div>
<p>　　（2）在AndroidManifest.xml静态注册广播：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">application
</span><span style="color: #008080;"> 2</span>         <span style="color: #ff0000;">android:allowBackup</span><span style="color: #0000ff;">="true"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">        android:icon</span><span style="color: #0000ff;">="@drawable/ic_launcher"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">        android:label</span><span style="color: #0000ff;">="@string/app_name"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">        android:theme</span><span style="color: #0000ff;">="@style/AppTheme"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> <span style="color: #000000;">        ...
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".BootCompleteReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 8</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.action.BOOT_COMPLETED"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">10</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">application</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（3）申请权限：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.RECEIVE_BOOT_COMPLETED"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>&nbsp;</p>
<p>　　<strong>（三）发送自定义广播</strong></p>
<p>　　1、发送标准广播</p>
<p>　　（1）在BroadcastTest项目中：</p>
<p>　　①创建MyBroadcastReceiver：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyBroadcastReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">5</span>         ToastUtil.showShort(context, "在MyBroadcastReceiver中接收到了自定义广播！"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span> }</pre>
</div>
<p>　　②在AndroidManifest.xml中注册广播接收器：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".MyBroadcastReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="com.example.broadcasttest.MY_BROADCAST"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">4</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　③activity_main.xml:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/send_broadcast_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="发送自定义广播"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　④MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.broadcasttest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.BroadcastReceiver;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.IntentFilter;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.net.ConnectivityManager;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.net.NetworkInfo;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;">13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;">14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button sendBroadcast;
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">23</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span>         sendBroadcast =<span style="color: #000000;"> (Button) findViewById(R.id.send_broadcast_btn);
</span><span style="color: #008080;">27</span>         sendBroadcast.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">28</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">31</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">32</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.send_broadcast_btn:
</span><span style="color: #008080;">34</span>             Intent intent = <span style="color: #0000ff;">new</span> Intent("com.example.broadcasttest.MY_BROADCAST"<span style="color: #000000;">);
</span><span style="color: #008080;">35</span> <span style="color: #000000;">            sendBroadcast(intent);
</span><span style="color: #008080;">36</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">37</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">38</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">39</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">40</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">41</span> }</pre>
</div>
<p>　　（2）创建BroadcastTest2项目，在其中：</p>
<p>　　①创建AnotherBroadcastReceiver：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AnotherBroadcastReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">5</span>         ToastUtil.showShort(context, "在AnotherBroadcastReceiver中接收到了自定义广播！"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span> }</pre>
</div>
<p>　　②在AndroidManifest.xml中注册广播接收器：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".AnotherBroadcastReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="com.example.broadcasttest.MY_BROADCAST"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">4</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（3）同时运行BroadcastTest和BroadcastTest2程序，然后在BroadcastTest中点击&ldquo;发送自定义广播&rdquo;按钮，然后就会发现弹出两次Toast显示接收到了广播。</p>
<p>　　2、发送有序广播</p>
<p>　　在1中BroadcastTest项目的基础上，做以下修改即可（红色加下划线的代码为新增或修改的代码）：</p>
<p>　　（1）MainActivity中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　<span style="color: #000000;">@Override
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.send_broadcast_btn:
</span><span style="color: #008080;"> 5</span>             Intent intent = <span style="color: #0000ff;">new</span> Intent("com.example.broadcasttest.MY_BROADCAST"<span style="color: #000000;">);
</span><span style="color: #008080;"> 6</span>             <span style="color: #ff0000; text-decoration: underline;"><strong>sendOrderedBroadcast(intent, null);
</strong></span><span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;"> 9</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">11</span>     }</pre>
</div>
<p>　　（2）AndroidManifest.xml中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".MyBroadcastReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter </span><span style="color: #ff0000; text-decoration: underline;"><strong>android:priority="100"</strong></span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="com.example.broadcasttest.MY_BROADCAST"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">4</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（3）MyBroadcastReceiver类中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyBroadcastReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;">5</span>         ToastUtil.showShort(context, "在MyBroadcastReceiver中接收到了自定义广播！"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span> <span style="text-decoration: underline;"><strong><span style="color: #ff0000; text-decoration: underline;"> abortBroadcast();
</span></strong></span><span style="color: #008080;">7</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">8</span> 
<span style="color: #008080;">9</span> }</pre>
</div>
<p>　　（4）再运行两个程序，点击发送广播按钮后，发现只看到了一个Toast提示，因为另一个广播接收被截断了。　</p>
<p>&nbsp;</p>
<p>　　<strong>（四）使用本地广播</strong></p>
<p>　　以上的广播都是全局广播，也就是任何应用程序都能接收到。而这会引发安全性问题，如果只希望在当前应用程序内部传递广播，就要使用本地广播了。</p>
<p>　　本地广播的关键是使用LocalBroadcastManager来发送广播。示例程序：</p>
<p>　　1、xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/send_broadcast_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="发送自定义广播"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.broadcasttest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.BroadcastReceiver;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.IntentFilter;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.net.ConnectivityManager;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.net.NetworkInfo;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.support.v4.content.LocalBroadcastManager;
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;">13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;">14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;">16</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button sendBroadcast;
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> IntentFilter intentFilter;
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> LocalReceiver localReceiver;
</span><span style="color: #008080;">25</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> LocalBroadcastManager localBroadcastManager;
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">28</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">29</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.获取localBroadcastManager实例</span>
<span style="color: #008080;">33</span>         localBroadcastManager = LocalBroadcastManager.getInstance(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">34</span> 
<span style="color: #008080;">35</span>         sendBroadcast =<span style="color: #000000;"> (Button) findViewById(R.id.send_broadcast_btn);
</span><span style="color: #008080;">36</span> 
<span style="color: #008080;">37</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.在点击事件中用LocalBroadcastManager的sendBroadcast方法发送广播</span>
<span style="color: #008080;">38</span>         sendBroadcast.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.注册IntentFilter</span>
<span style="color: #008080;">41</span>         intentFilter = <span style="color: #0000ff;">new</span><span style="color: #000000;"> IntentFilter();
</span><span style="color: #008080;">42</span>         intentFilter.addAction("com.example.broadcasttest.LOCAL_BROADCAST"<span style="color: #000000;">);
</span><span style="color: #008080;">43</span>         localReceiver = <span style="color: #0000ff;">new</span><span style="color: #000000;"> LocalReceiver();
</span><span style="color: #008080;">44</span> <span style="color: #000000;">        localBroadcastManager.registerReceiver(localReceiver, intentFilter);
</span><span style="color: #008080;">45</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">46</span> 
<span style="color: #008080;">47</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">48</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">49</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;">50</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.send_broadcast_btn:
</span><span style="color: #008080;">51</span>             Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(
</span><span style="color: #008080;">52</span>                     "com.example.broadcasttest.LOCAL_BROADCAST"<span style="color: #000000;">);
</span><span style="color: #008080;">53</span> <span style="color: #000000;">            localBroadcastManager.sendBroadcast(intent);
</span><span style="color: #008080;">54</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">55</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">56</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">57</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">58</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">59</span> 
<span style="color: #008080;">60</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">61</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">62</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">63</span> <span style="color: #000000;">        localBroadcastManager.unregisterReceiver(localReceiver);
</span><span style="color: #008080;">64</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">65</span> }</pre>
</div>
<p>　　3、注册广播接收器：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">receiver </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".LocalReceiver"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="com.example.broadcasttest.LOCAL_BROADCAST"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">4</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">receiver</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　4、这时如果也让另一个程序接收LOCAL_BROADCAST这个广播，会发现是接收不到的。</p>
<p>　　5、本地广播的优点：</p>
<p>　　（1）不用担心机密数据泄露。</p>
<p>　　（2）其他程序无法将广播发送到我们程序的内容，不用担心安全漏洞的问题。</p>
<p>　　（3）比全局广播更高效。</p>
<p>&nbsp;</p>
<p>　 <strong>（五）最佳实践&mdash;&mdash;实现强制下线功能</strong></p>
<p>　　在登录页面输入账号密码进入主界面后，点击强制下线按钮会弹出强制下线Dialog，并且该Dialog不能被取消，当用户点击确定后会发出强制下线广播，再次跳转到登录界面。</p>
<p>　　1、login.xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TableLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:stretchColumns</span><span style="color: #0000ff;">="1"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TableRow</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">10</span>             <span style="color: #ff0000;">android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">11</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="用户名:"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">14</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/user_name_et"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">            android:hint</span><span style="color: #0000ff;">="请输入用户名"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">TableRow</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TableRow</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">22</span>             <span style="color: #ff0000;">android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">23</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="密码:"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">26</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/password_et"</span>
<span style="color: #008080;">27</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">28</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">EditText</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">29</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">TableRow</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TableRow</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">34</span>             <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/login_bt"</span>
<span style="color: #008080;">35</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">36</span> <span style="color: #ff0000;">            android:layout_span</span><span style="color: #0000ff;">="2"</span>
<span style="color: #008080;">37</span> <span style="color: #ff0000;">            android:text</span><span style="color: #0000ff;">="登录"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">38</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">TableRow</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">TableLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、ActivityCollector类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ActivityCollector {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> List&lt;Activity&gt; activities = <span style="color: #0000ff;">new</span> ArrayList&lt;Activity&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> addActivity(Activity activity) {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        activities.add(activity);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> removeActivity(Activity activity) {
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        activities.remove(activity);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> finishAll() {
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Activity activity : activities) {
</span><span style="color: #008080;">14</span>             <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">activity.isFinishing()) {
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                activity.finish();
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> }</pre>
</div>
<p>　　3、BaseActivity类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> BaseActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>         ActivityCollector.addActivity(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">10</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">12</span>         ActivityCollector.removeActivity(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> }</pre>
</div>
<p>　　4、LoginActivity类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> LoginActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BaseActivity {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> EditText userNameEt;
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> EditText passwordEt;
</span><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button loginBt;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        setContentView(R.layout.login);
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>         userNameEt =<span style="color: #000000;"> (EditText) findViewById(R.id.user_name_et);
</span><span style="color: #008080;">13</span>         passwordEt =<span style="color: #000000;"> (EditText) findViewById(R.id.password_et);
</span><span style="color: #008080;">14</span>         loginBt =<span style="color: #000000;"> (Button) findViewById(R.id.login_bt);
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>         loginBt.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">19</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">20</span>                 String userName =<span style="color: #000000;"> userNameEt.getText().toString();
</span><span style="color: #008080;">21</span>                 String password =<span style="color: #000000;"> passwordEt.getText().toString();
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 如果用户名是admin且密码是123456,就认为登录成功</span>
<span style="color: #008080;">24</span>                 <span style="color: #0000ff;">if</span> (userName.equals("110") &amp;&amp; password.equals("123456"<span style="color: #000000;">)) {
</span><span style="color: #008080;">25</span>                     Intent intent = <span style="color: #0000ff;">new</span> Intent(LoginActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,
</span><span style="color: #008080;">26</span>                             MainActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">27</span> <span style="color: #000000;">                    startActivity(intent);
</span><span style="color: #008080;">28</span> <span style="color: #000000;">                    finish();
</span><span style="color: #008080;">29</span>                 } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">30</span>                     Toast.makeText(LoginActivity.<span style="color: #0000ff;">this</span>, "用户名或密码错误!"<span style="color: #000000;">,
</span><span style="color: #008080;">31</span> <span style="color: #000000;">                            Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">32</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">33</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">34</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">35</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">36</span> }</pre>
</div>
<p>　　5、activity_main.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">RelativeLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    xmlns:tools</span><span style="color: #0000ff;">="http://schemas.android.com/tools"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:paddingBottom</span><span style="color: #0000ff;">="@dimen/activity_vertical_margin"</span>
<span style="color: #008080;"> 6</span> <span style="color: #ff0000;">    android:paddingLeft</span><span style="color: #0000ff;">="@dimen/activity_horizontal_margin"</span>
<span style="color: #008080;"> 7</span> <span style="color: #ff0000;">    android:paddingRight</span><span style="color: #0000ff;">="@dimen/activity_horizontal_margin"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">    android:paddingTop</span><span style="color: #0000ff;">="@dimen/activity_vertical_margin"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">    tools:context</span><span style="color: #0000ff;">="com.example.broadcastbestpractice.MainActivity"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">12</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">13</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="这里是主界面"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">17</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/force_offline_bt"</span>
<span style="color: #008080;">18</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">19</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">        android:layout_margin</span><span style="color: #0000ff;">="40dp"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="发送一个强制下线广播"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">RelativeLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　6、MainActivity类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>         Button forceOfflineBt =<span style="color: #000000;"> (Button) findViewById(R.id.force_offline_bt);
</span><span style="color: #008080;"> 9</span>         forceOfflineBt.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnClickListener() {
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">12</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">13</span>                 Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(
</span><span style="color: #008080;">14</span>                         "com.example.broadcastbestpractice.FORCE_OFFLINE"<span style="color: #000000;">);
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                sendBroadcast(intent);
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> }</pre>
</div>
<p>　　7、ForceOfflineReceiver：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ForceOfflineReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onReceive(<span style="color: #0000ff;">final</span><span style="color: #000000;"> Context context, Intent intent) {
</span><span style="color: #008080;"> 5</span>         AlertDialog.Builder dialogBuilder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AlertDialog.Builder(context);
</span><span style="color: #008080;"> 6</span>         dialogBuilder.setTitle("警告"<span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span>         dialogBuilder.setMessage("你将要被强制下线!请重新登录!"<span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span>         dialogBuilder.setCancelable(<span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span>         dialogBuilder.setPositiveButton("确定"<span style="color: #000000;">,
</span><span style="color: #008080;">10</span>                 <span style="color: #0000ff;">new</span><span style="color: #000000;"> DialogInterface.OnClickListener() {
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #000000;">                    @Override
</span><span style="color: #008080;">13</span>                     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onClick(DialogInterface dialog, <span style="color: #0000ff;">int</span><span style="color: #000000;"> which) {
</span><span style="color: #008080;">14</span> <span style="color: #000000;">                        ActivityCollector.finishAll();
</span><span style="color: #008080;">15</span>                         Intent intent = <span style="color: #0000ff;">new</span> Intent(context, LoginActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">16</span> <span style="color: #000000;">                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
</span><span style="color: #008080;">17</span> <span style="color: #000000;">                        context.startActivity(intent);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">19</span> <span style="color: #000000;">                });
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>         AlertDialog alertDialog =<span style="color: #000000;"> dialogBuilder.create();
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        alertDialog.getWindow().setType(
</span><span style="color: #008080;">23</span> <span style="color: #000000;">                WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        alertDialog.show();
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> }</pre>
</div>
<p>　　8、AndroidManifest.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">...
</span><span style="color: #008080;"> 2</span> 　　　　 &lt;<span style="color: #000000;">activity
</span><span style="color: #008080;"> 3</span>             android:name=<span style="color: #800000;">"</span><span style="color: #800000;">.LoginActivity</span><span style="color: #800000;">"</span>
<span style="color: #008080;"> 4</span>             android:<span style="color: #0000ff;">label</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@string/app_name</span><span style="color: #800000;">"</span> &gt;
<span style="color: #008080;"> 5</span>             &lt;intent-filter&gt;
<span style="color: #008080;"> 6</span>                 &lt;action android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.intent.action.MAIN</span><span style="color: #800000;">"</span> /&gt;
<span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>                 &lt;category android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.intent.category.LAUNCHER</span><span style="color: #800000;">"</span> /&gt;
<span style="color: #008080;"> 9</span>             &lt;/intent-filter&gt;
<span style="color: #008080;">10</span>         &lt;/activity&gt;
<span style="color: #008080;">11</span>         &lt;activity android:name=<span style="color: #800000;">"</span><span style="color: #800000;">.MainActivity</span><span style="color: #800000;">"</span> &gt;
<span style="color: #008080;">12</span>         &lt;/activity&gt;
<span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>         &lt;<span style="color: #000000;">receiver
</span><span style="color: #008080;">15</span>             android:name=<span style="color: #800000;">"</span><span style="color: #800000;">.ForceOfflineReceiver</span><span style="color: #800000;">"</span>
<span style="color: #008080;">16</span>             android:exported=<span style="color: #800000;">"</span><span style="color: #800000;">false</span><span style="color: #800000;">"</span> &gt;
<span style="color: #008080;">17</span>             &lt;intent-filter&gt;
<span style="color: #008080;">18</span>                 &lt;action android:name=<span style="color: #800000;">"</span><span style="color: #800000;">com.example.broadcastbestpractice.FORCE_OFFLINE</span><span style="color: #800000;">"</span> /&gt;
<span style="color: #008080;">19</span>             &lt;/intent-filter&gt;
<span style="color: #008080;">20</span>         &lt;/receiver&gt;
<span style="color: #008080;">21</span> ...</pre>
</div>
<p>&nbsp;</p>
<p>　</p>
<p>　</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">&nbsp;</p>]]></description></item><item><title>Android启动界面（Splash）的两种实现方法</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/27/5325282.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 27 Mar 2016 05:49:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/27/5325282.html</guid><description><![CDATA[<p><strong>　　（一）用2个Activity实现</strong></p>
<p>　　用Handler对象的postDelayed方法来实现延迟跳转的目的。</p>
<p>　　补充：Handler的常用方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #008000;">//</span><span style="color: #008000;">  立即执行Runnable对象  </span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> post(Runnable r);  
</span><span style="color: #008080;">3</span> <span style="color: #008000;">//</span><span style="color: #008000;">  在指定的时间（uptimeMillis）执行Runnable对象  </span>
<span style="color: #008080;">4</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">boolean</span> postAtTime(Runnable r, <span style="color: #0000ff;">long</span><span style="color: #000000;"> uptimeMillis);  
</span><span style="color: #008080;">5</span> <span style="color: #008000;">//</span><span style="color: #008000;">  在指定的时间间隔（delayMillis）执行Runnable对象  </span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">boolean</span> postDelayed(Runnable r, <span style="color: #0000ff;">long</span> delayMillis);</pre>
</div>
<p>　　1、activity_splash.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:src</span><span style="color: #0000ff;">="@drawable/ic_launcher"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、activity_main.xml：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="这里是主界面"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　3、SplashActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.splashtest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Handler;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Window;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> SplashActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> SPLASH_DISPLAY_LENGHT = 3000<span style="color: #000000;">;
</span><span style="color: #008080;">12</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Handler handler;
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">15</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">16</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        getWindow().requestFeature(Window.FEATURE_NO_TITLE);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        setContentView(R.layout.activity_splash);
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>         handler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Handler();
</span><span style="color: #008080;">21</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 延迟SPLASH_DISPLAY_LENGHT时间然后跳转到MainActivity</span>
<span style="color: #008080;">22</span>         handler.postDelayed(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">25</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
</span><span style="color: #008080;">26</span>                 Intent intent = <span style="color: #0000ff;">new</span> Intent(SplashActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,
</span><span style="color: #008080;">27</span>                         MainActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">28</span> <span style="color: #000000;">                startActivity(intent);
</span><span style="color: #008080;">29</span>                 SplashActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">.finish();
</span><span style="color: #008080;">30</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">31</span> <span style="color: #000000;">        }, SPLASH_DISPLAY_LENGHT);
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">34</span> }</pre>
</div>
<p>　　4、MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.splashtest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span> }</pre>
</div>
<p>　　6、修改AndroidManifest.xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　 <span style="color: #000000;">...
</span><span style="color: #008080;"> 2</span> 　　　　 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity
</span><span style="color: #008080;"> 3</span>             <span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".SplashActivity"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">            android:label</span><span style="color: #0000ff;">="splash"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">action </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.action.MAIN"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">category </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.intent.category.LAUNCHER"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;"> 9</span>             <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">intent-filter</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activity</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">activity
</span><span style="color: #008080;">12</span>             <span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".MainActivity"</span>
<span style="color: #008080;">13</span> <span style="color: #ff0000;">            android:label</span><span style="color: #0000ff;">="@string/app_name"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">14</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">activity</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">15</span> 　　　　　...</pre>
</div>
<p>&nbsp;　　7、在SplashActivity中禁用返回键：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@Override    
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span> onKeyDown(<span style="color: #0000ff;">int</span><span style="color: #000000;"> keyCode, KeyEvent event) {  
</span><span style="color: #008080;">3</span> 　　<span style="color: #0000ff;">if</span>(keyCode ==<span style="color: #000000;"> KeyEvent.KEYCODE_BACK){      
</span><span style="color: #008080;">4</span> 　　　　<span style="color: #0000ff;">return</span>  <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">5</span> 　　<span style="color: #000000;">}  
</span><span style="color: #008080;">6</span> 　　<span style="color: #0000ff;">return</span>  <span style="color: #0000ff;">super</span><span style="color: #000000;">.onKeyDown(keyCode, event);     
</span><span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span> } </pre>
</div>
<p><strong>　　</strong></p>
<p><strong>　　（二）用一个Activity实现</strong></p>
<p>　　主要利用控件的隐藏来实现。</p>
<p>　　1、xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/splash_lt"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="match_parent"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ImageView
</span><span style="color: #008080;">12</span>             <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">13</span> <span style="color: #ff0000;">            android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">            android:src</span><span style="color: #0000ff;">="@drawable/ic_launcher"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">18</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/main_tv"</span>
<span style="color: #008080;">19</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="这是主界面"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、MainActivity</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.splashtest2;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Handler;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Message;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.SystemClock;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Window;
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.LinearLayout;
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> STOP_SPLASH = 0<span style="color: #000000;">;
</span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> SPLASH_TIME = 3000<span style="color: #000000;">;
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> LinearLayout splashLt;
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>     <span style="color: #0000ff;">private</span> Handler splashHandler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Handler() {
</span><span style="color: #008080;">22</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleMessage(Message msg) {
</span><span style="color: #008080;">23</span>             <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (msg.what) {
</span><span style="color: #008080;">24</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> STOP_SPLASH:
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                splashLt.setVisibility(View.GONE);
</span><span style="color: #008080;">26</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">27</span>             <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">28</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">29</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.handleMessage(msg);
</span><span style="color: #008080;">32</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">33</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">34</span> 
<span style="color: #008080;">35</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">36</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">37</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">38</span> <span style="color: #000000;">        getWindow().requestFeature(Window.FEATURE_NO_TITLE);
</span><span style="color: #008080;">39</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">40</span> 
<span style="color: #008080;">41</span>         splashLt =<span style="color: #000000;"> (LinearLayout) findViewById(R.id.splash_lt);
</span><span style="color: #008080;">42</span> 
<span style="color: #008080;">43</span>         Message msg = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Message();
</span><span style="color: #008080;">44</span>         msg.what =<span style="color: #000000;"> STOP_SPLASH;
</span><span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 注：这里必须用延迟发送消息的方法，否则ImageView不会显示出来</span>
<span style="color: #008080;">47</span> <span style="color: #000000;">        splashHandler.sendMessageDelayed(msg, SPLASH_TIME);
</span><span style="color: #008080;">48</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">49</span> 
<span style="color: #008080;">50</span> }</pre>
</div>
<p>&nbsp;</p>
<p>　<strong>　（三）小结</strong></p>
<p>　　建议使用第一种方法，用两个Activity实现，因为MainActivity中的代码不宜过多。</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第6章 数据持久化</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/25/5319485.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Fri, 25 Mar 2016 06:51:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/25/5319485.html</guid><description><![CDATA[<p>　　主要讲述了Android数据持久化的三种方式：文件存储、SharedPreference存储、SQLite数据库存储。</p>
<p><strong>（一）文件存储</strong></p>
<p><strong>　　</strong>其实Android中文件存储方式和Java的文件操作类似，就是用IO流进行操作。文件存储只能保存简单的字符串或二进制数据，不适合保存结构较为复杂的数据。</p>
<p>　　1、示例程序（代码中有详细注释）：</p>
<p>　　（1）xml文件：</p>
<p>　　其中有一个EditText，可以在里面输入字符，还有两个Button，一个用于保存输入的内容到一个文件中，另一个用于载入相应的文件内容到EditText中。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/input_et"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">12</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/save_btn"</span>
<span style="color: #008080;">13</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="保存"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">19</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/load_btn"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">22</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="载入文件内容"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.BufferedReader;
</span><span style="color: #008080;">  2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.BufferedWriter;
</span><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.FileInputStream;
</span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.FileOutputStream;
</span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.InputStreamReader;
</span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.OutputStreamWriter;
</span><span style="color: #008080;">  7</span> 
<span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.text.TextUtils;
</span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;"> 16</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.EditText;
</span><span style="color: #008080;"> 18</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;"> 19</span> 
<span style="color: #008080;"> 20</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;"> 21</span> 
<span style="color: #008080;"> 22</span>     <span style="color: #0000ff;">private</span> String dataFileName = "MyDataFile"<span style="color: #000000;">;
</span><span style="color: #008080;"> 23</span> 
<span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> EditText inputEt;
</span><span style="color: #008080;"> 25</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button saveBtn;
</span><span style="color: #008080;"> 26</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button loadBtn;
</span><span style="color: #008080;"> 27</span> 
<span style="color: #008080;"> 28</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 29</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 30</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;"> 31</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;"> 32</span> 
<span style="color: #008080;"> 33</span>         inputEt =<span style="color: #000000;"> (EditText) findViewById(R.id.input_et);
</span><span style="color: #008080;"> 34</span>         saveBtn =<span style="color: #000000;"> (Button) findViewById(R.id.save_btn);
</span><span style="color: #008080;"> 35</span>         loadBtn =<span style="color: #000000;"> (Button) findViewById(R.id.load_btn);
</span><span style="color: #008080;"> 36</span> 
<span style="color: #008080;"> 37</span>         saveBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 38</span>         loadBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 39</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 40</span> 
<span style="color: #008080;"> 41</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 42</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 43</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;"> 44</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.save_btn:
</span><span style="color: #008080;"> 45</span>             String inputText =<span style="color: #000000;"> inputEt.getText().toString();
</span><span style="color: #008080;"> 46</span>             <span style="color: #0000ff;">if</span> (inputText.length() == 0<span style="color: #000000;">) {
</span><span style="color: #008080;"> 47</span>                 Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>, "未输入任何内容！"<span style="color: #000000;">,
</span><span style="color: #008080;"> 48</span> <span style="color: #000000;">                        Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;"> 49</span>             } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 50</span> <span style="color: #000000;">                save(dataFileName, inputText);
</span><span style="color: #008080;"> 51</span>                 Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>, "保存成功！"<span style="color: #000000;">, Toast.LENGTH_SHORT)
</span><span style="color: #008080;"> 52</span> <span style="color: #000000;">                        .show();
</span><span style="color: #008080;"> 53</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 54</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 55</span> 
<span style="color: #008080;"> 56</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.load_btn:
</span><span style="color: #008080;"> 57</span>             String fileContent =<span style="color: #000000;"> load(dataFileName);
</span><span style="color: #008080;"> 58</span> 
<span style="color: #008080;"> 59</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 用于判断一个字符串是否是null或者空内容的工具方法</span>
<span style="color: #008080;"> 60</span>             <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">TextUtils.isEmpty(fileContent)) {
</span><span style="color: #008080;"> 61</span> <span style="color: #000000;">                inputEt.setText(fileContent);
</span><span style="color: #008080;"> 62</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 让光标移到文字最后</span>
<span style="color: #008080;"> 63</span> <span style="color: #000000;">                inputEt.setSelection(fileContent.length());
</span><span style="color: #008080;"> 64</span>                 Toast.makeText(<span style="color: #0000ff;">this</span>, "载入文件内容成功！"<span style="color: #000000;">, Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;"> 65</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 66</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 67</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;"> 68</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 69</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 70</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 71</span> 
<span style="color: #008080;"> 72</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 保存输入内容到文件的方法</span>
<span style="color: #008080;"> 73</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> save(String fileName, String inputText) {
</span><span style="color: #008080;"> 74</span>         FileOutputStream out = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 75</span>         BufferedWriter writer = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 76</span> 
<span style="color: #008080;"> 77</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 78</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 1.用Context类的openFileOutput方法创建FileOutputStream实例
</span><span style="color: #008080;"> 79</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> MODE_PRIVATE模式是默认操作模式，表示当指定同样文件名时，所写入的内容将会覆盖原来的内容
</span><span style="color: #008080;"> 80</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> MODE_APPEND表示如果该文件已经存在就往文件里面追加内容，不存在就创建新文件
</span><span style="color: #008080;"> 81</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 注：这里的文件名不可以包含路径，因为所有的文件都是默认存储到/data/data/包名/files目录的</span>
<span style="color: #008080;"> 82</span>             out =<span style="color: #000000;"> openFileOutput(fileName, Context.MODE_PRIVATE);
</span><span style="color: #008080;"> 83</span> 
<span style="color: #008080;"> 84</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2.用FileOutputStream实例创建OutputStreamWriter实例，再用OutputStreamWriter实例创建BufferedWriter实例</span>
<span style="color: #008080;"> 85</span>             writer = <span style="color: #0000ff;">new</span> BufferedWriter(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OutputStreamWriter(out));
</span><span style="color: #008080;"> 86</span> 
<span style="color: #008080;"> 87</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3.写入内容到文件</span>
<span style="color: #008080;"> 88</span> <span style="color: #000000;">            writer.write(inputText);
</span><span style="color: #008080;"> 89</span> 
<span style="color: #008080;"> 90</span>             <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 91</span> <span style="color: #008000;">             * 注:查看该文件的方法： DDMS&mdash;&gt;File
</span><span style="color: #008080;"> 92</span> <span style="color: #008000;">             * Explorer&mdash;&gt;/data/data/com.example.filepersistencetest(包名)/files/
</span><span style="color: #008080;"> 93</span> <span style="color: #008000;">             * 该目录下即可看到刚刚保存的文件，DDMS按钮下方有一个导出文件，即可把文件导出到电脑上用记事本查看
</span><span style="color: #008080;"> 94</span>              <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 95</span> 
<span style="color: #008080;"> 96</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;"> 98</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 99</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">100</span>                 <span style="color: #0000ff;">if</span> (writer != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">101</span> <span style="color: #000000;">                    writer.close();
</span><span style="color: #008080;">102</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">103</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">104</span> <span style="color: #000000;">                e.printStackTrace();
</span><span style="color: #008080;">105</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">106</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">107</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">108</span> 
<span style="color: #008080;">109</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 载入并读取文件内容的方法</span>
<span style="color: #008080;">110</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String load(String fileName) {
</span><span style="color: #008080;">111</span>         FileInputStream in = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">112</span>         BufferedReader reader = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">113</span>         StringBuilder content = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
</span><span style="color: #008080;">114</span> 
<span style="color: #008080;">115</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">116</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 1.用Context类的openFileInput方法创建FileInputStream实例</span>
<span style="color: #008080;">117</span>             in =<span style="color: #000000;"> openFileInput(fileName);
</span><span style="color: #008080;">118</span> 
<span style="color: #008080;">119</span>             <span style="color: #0000ff;">if</span> (in == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">120</span>                 Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>, "数据文件不存在！"<span style="color: #000000;">,
</span><span style="color: #008080;">121</span> <span style="color: #000000;">                        Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">122</span>                 <span style="color: #0000ff;">return</span> ""<span style="color: #000000;">;
</span><span style="color: #008080;">123</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">124</span> 
<span style="color: #008080;">125</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2.创建BufferedReader实例</span>
<span style="color: #008080;">126</span>             reader = <span style="color: #0000ff;">new</span> BufferedReader(<span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(in));
</span><span style="color: #008080;">127</span> 
<span style="color: #008080;">128</span>             String line = ""<span style="color: #000000;">;
</span><span style="color: #008080;">129</span> 
<span style="color: #008080;">130</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3.读取每一行</span>
<span style="color: #008080;">131</span>             <span style="color: #0000ff;">while</span> ((line = reader.readLine()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">132</span> <span style="color: #000000;">                content.append(line);
</span><span style="color: #008080;">133</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">134</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">135</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">136</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">137</span>             <span style="color: #0000ff;">if</span> (reader != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">138</span>                 <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">139</span> <span style="color: #000000;">                    reader.close();
</span><span style="color: #008080;">140</span>                 } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">141</span> <span style="color: #000000;">                    e.printStackTrace();
</span><span style="color: #008080;">142</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">143</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">144</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">145</span> 
<span style="color: #008080;">146</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> content.toString();
</span><span style="color: #008080;">147</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">148</span> 
<span style="color: #008080;">149</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">150</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">151</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">152</span>         String inputText =<span style="color: #000000;"> inputEt.getText().toString();
</span><span style="color: #008080;">153</span>         <span style="color: #0000ff;">if</span> (inputText.length() != 0<span style="color: #000000;">) {
</span><span style="color: #008080;">154</span> <span style="color: #000000;">            save(dataFileName, inputText);
</span><span style="color: #008080;">155</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">156</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">157</span> 
<span style="color: #008080;">158</span> }</pre>
</div>
<p>　　2、用openFileOutput和openFileInput创建文件时，参数中的文件名不可以包含路径，因为所有的文件都是默认存储到/data/data/包名/files目录的。</p>
<p>　　3、查看该文件的方法： DDMS&mdash;&gt;File<span style="color: #000000;">&nbsp;Explorer&mdash;&gt;/data/data/com.example.filepersistencetest(包名)/files/，该目录下即可看到刚刚保存的文件，DDMS按钮下方有一个导出文件按钮，即可把文件导出到电脑上用记事本查看。<br /></span></p>
<p><strong><span style="color: #000000;">（二）SharedPreferences</span></strong></p>
<p><strong><span style="color: #000000;">　</span></strong><span style="color: #000000;">　</span><span style="color: #000000;">SharedPreferences用键值对形式存储数据，适合保存程序的一些偏好设置等。SharedPreferences文件会自动存放在/data/data/包名/shared_prefs目录下，是xml格式的文件。</span></p>
<p><span style="color: #000000;">　　1、获取<span style="color: #000000;">SharedPreferences对象的三种方法：</span></span></p>
<p><span style="color: #000000;"><span style="color: #000000;">　　（1）Activity类的getPreferences方法，只接收一个模式参数，这个方法会自动把当前活动类名作为SharedPreferences文件名。<br />　　（2）PreferencesManager类中的getDefaultSharedPreferences方法，这是一个静态方法，接收一个Context参数，并自动使用当前&nbsp;应用程序的包名作为前缀来命名SharedPreferences文件。</span></span></p>
<p><span style="color: #000000;"><span style="color: #000000;">　　（3）Context类的getSharedPreferences方法，接受两个参数，第一个为文件名字符串（不要带路径！），第二个是文件操作模式。</span></span></p>
<p><span style="color: #000000;"><span style="color: #000000;">　　2、向<span style="color: #000000;">SharedPreferences文件写入数据的步骤：</span></span></span></p>
<p><span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;">　　（1）用SharedPreferences对象的edit方法获取SharedPreferences.Editor实例：</span></span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> SharedPreferences.Editor editor = getSharedPreferences("dataFile"<span style="color: #000000;">,
</span><span style="color: #008080;">2</span>                 MODE_PRIVATE).edit();</pre>
</div>
<p>&nbsp;</p>
<p>　　（2）写入数据到SharedPreferences中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> editor.putString("name", "贾永基"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> editor.putInt("age", 23<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> editor.putBoolean("married", <span style="color: #0000ff;">false</span>);</pre>
</div>
<p>　　（3）用commit方法提交：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> editor.commit();</pre>
</div>
<p>　　3、从SharedPreferences文件读数据的步骤：</p>
<p>　　（1）创建SharedPreferences实例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> SharedPreferences pref = getSharedPreferences("dataFile", MODE_PRIVATE);</pre>
</div>
<p>　　（2）用getXXX方法读取数据：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数表示键名，第二个参数表示如果找不到数据时候返回的默认值</span>
<span style="color: #008080;">2</span>         String name = pref.getString("name", ""<span style="color: #000000;">);
</span><span style="color: #008080;">3</span>         <span style="color: #0000ff;">int</span> age = pref.getInt("age", 0<span style="color: #000000;">);
</span><span style="color: #008080;">4</span>         <span style="color: #0000ff;">boolean</span> married = pref.getBoolean("married", <span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span>         Log.d("MainActivity", "name is " +<span style="color: #000000;"> name);
</span><span style="color: #008080;">7</span>         Log.d("MainActivity", "age is " +<span style="color: #000000;"> age);
</span><span style="color: #008080;">8</span>         Log.d("MainActivity", "married is " + married);</pre>
</div>
<p>　　4、示例程序：</p>
<p>　　（1）XML文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/save_data_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="保存数据"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">13</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/load_data_btn"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="载入数据"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.sharedpreferencestest;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.SharedPreferences;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button saveDataBtn;
</span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button loadDataBtn;
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">20</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">21</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>         saveDataBtn =<span style="color: #000000;"> (Button) findViewById(R.id.save_data_btn);
</span><span style="color: #008080;">25</span>         loadDataBtn =<span style="color: #000000;"> (Button) findViewById(R.id.load_data_btn);
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>         saveDataBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">28</span>         loadDataBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">29</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">32</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;">34</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.save_data_btn:
</span><span style="color: #008080;">35</span> <span style="color: #000000;">            saveData();
</span><span style="color: #008080;">36</span>             Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>, "保存数据成功"<span style="color: #000000;">, Toast.LENGTH_SHORT)
</span><span style="color: #008080;">37</span> <span style="color: #000000;">                    .show();
</span><span style="color: #008080;">38</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">39</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.load_data_btn:
</span><span style="color: #008080;">40</span> <span style="color: #000000;">            loadData();
</span><span style="color: #008080;">41</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">42</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">43</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">44</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">45</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">46</span> 
<span style="color: #008080;">47</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 保存数据到SharedPreferences</span>
<span style="color: #008080;">48</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> saveData() {
</span><span style="color: #008080;">49</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.用SharedPreferences对象的edit方法获取SharedPreferences.Editor实例</span>
<span style="color: #008080;">50</span>         SharedPreferences.Editor editor = getSharedPreferences("dataFile"<span style="color: #000000;">,
</span><span style="color: #008080;">51</span> <span style="color: #000000;">                MODE_PRIVATE).edit();
</span><span style="color: #008080;">52</span> 
<span style="color: #008080;">53</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 注：获取SharedPreferences对象还有两种方法：
</span><span style="color: #008080;">54</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> （1）Activity类的getPreferences方法，只接收一个模式参数，这个方法会自动把当前活动类名作为SharedPreferences文件名
</span><span style="color: #008080;">55</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> （2）PreferencesManager类中的getDefaultSharedPreferences方法，这是一个静态方法，接收一个Context参数，并自动使用当前
</span><span style="color: #008080;">56</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 应用程序的包名作为前缀来命名SharedPreferences文件
</span><span style="color: #008080;">57</span> 
<span style="color: #008080;">58</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.写入数据到SharedPreferences中</span>
<span style="color: #008080;">59</span>         editor.putString("name", "贾永基"<span style="color: #000000;">);
</span><span style="color: #008080;">60</span>         editor.putInt("age", 23<span style="color: #000000;">);
</span><span style="color: #008080;">61</span>         editor.putBoolean("married", <span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #008080;">62</span> 
<span style="color: #008080;">63</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 3.用commit方法提交
</span><span style="color: #008080;">64</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 注：SharedPreferences文件会自动存放在/data/data/包名/shared_prefs目录下，是xml格式的文件</span>
<span style="color: #008080;">65</span> <span style="color: #000000;">        editor.commit();
</span><span style="color: #008080;">66</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">67</span> 
<span style="color: #008080;">68</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 从SharedPreferences读数据</span>
<span style="color: #008080;">69</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> loadData() {
</span><span style="color: #008080;">70</span>         SharedPreferences pref = getSharedPreferences("dataFile"<span style="color: #000000;">, MODE_PRIVATE);
</span><span style="color: #008080;">71</span> 
<span style="color: #008080;">72</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数表示键名，第二个参数表示如果找不到数据时候返回的默认值</span>
<span style="color: #008080;">73</span>         String name = pref.getString("name", ""<span style="color: #000000;">);
</span><span style="color: #008080;">74</span>         <span style="color: #0000ff;">int</span> age = pref.getInt("age", 0<span style="color: #000000;">);
</span><span style="color: #008080;">75</span>         <span style="color: #0000ff;">boolean</span> married = pref.getBoolean("married", <span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #008080;">76</span> 
<span style="color: #008080;">77</span>         Log.d("MainActivity", "name is " +<span style="color: #000000;"> name);
</span><span style="color: #008080;">78</span>         Log.d("MainActivity", "age is " +<span style="color: #000000;"> age);
</span><span style="color: #008080;">79</span>         Log.d("MainActivity", "married is " +<span style="color: #000000;"> married);
</span><span style="color: #008080;">80</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">81</span> 
<span style="color: #008080;">82</span> }</pre>
</div>
<p><strong>&nbsp;（三）SQLite</strong></p>
<p>　　SQLite是Android内嵌的轻量级关系型数据库，速度很快，支持标准的SQL语法，还支持ACID事务。</p>
<p>　　1、创建数据库：</p>
<p>　　继承SQLiteOpenHelper类创建自己的类MyDatabaseHelper，并实现onCreate和onUpgrade两个抽象方法，在onCreate方法中建表，在onUpgrade中升级数据库。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteDatabase;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteDatabase.CursorFactory;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteOpenHelper;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyDatabaseHelper <span style="color: #0000ff;">extends</span><span style="color: #000000;"> SQLiteOpenHelper {
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 1.将建表语句定义成字符串常量</span>
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String CREATE_BOOK = "create table book(" <span style="color: #008000;">//</span><span style="color: #008000;"> 注：表名和字段名称不区分大小写</span>
<span style="color: #008080;">11</span>             + "id integer primary key autoincrement,"
<span style="color: #008080;">12</span>             + "author text,"
<span style="color: #008080;">13</span>             + "price real," + "pages integer," + "name text,"<span style="background-color: #f5f5f5; font-family: Courier New;">+ "category_id integer)";</span><span style="color: #000000;">;
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String CREATE_CATEGORY = "create table category("
<span style="color: #008080;">16</span>             + "id integer primary key autoincrement," + "category_name text,"
<span style="color: #008080;">17</span>             + "category_code integer)"<span style="color: #000000;">;
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Context mContext;
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> MyDatabaseHelper(Context context, String name,
</span><span style="color: #008080;">22</span>             CursorFactory factory, <span style="color: #0000ff;">int</span><span style="color: #000000;"> version) {
</span><span style="color: #008080;">23</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, name, factory, version);
</span><span style="color: #008080;">24</span>         mContext =<span style="color: #000000;"> context;
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">28</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(SQLiteDatabase db) {
</span><span style="color: #008080;">29</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 2.用SQLiteDatabase的execSQL方法执行建表语句</span>
<span style="color: #008080;">30</span> <span style="color: #000000;">        db.execSQL(CREATE_BOOK);
</span><span style="color: #008080;">31</span> <span style="color: #000000;">        db.execSQL(CREATE_CATEGORY);
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span>         Toast.makeText(mContext, "创建数据库成功！"<span style="color: #000000;">, Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">34</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">37</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onUpgrade(SQLiteDatabase db, <span style="color: #0000ff;">int</span> oldVersion, <span style="color: #0000ff;">int</span><span style="color: #000000;"> newVersion) {
</span><span style="color: #008080;">38</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (oldVersion) {
</span><span style="color: #008080;">39</span>         <span style="color: #0000ff;">case</span> 1<span style="color: #000000;">:
</span><span style="color: #008080;">40</span> <span style="color: #000000;">            db.execSQL(CREATE_CATEGORY);
</span><span style="color: #008080;">41</span>         <span style="color: #0000ff;">case</span> 2: <span style="color: #008000;">//</span><span style="color: #008000;"> 注意这里case的最后是不写break的，以应对跨版本升级的情况</span>
<span style="color: #008080;">42</span>             db.execSQL("alter table book add column category_id integer"<span style="color: #000000;">);
</span><span style="color: #008080;">43</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">44</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">45</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">46</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">47</span> 
<span style="color: #008080;">48</span> }</pre>
</div>
<p>　　2、创建数据库后，在adb shell中可以用命令行方式查看数据库的具体数据，方法如下：</p>
<p>　　（1）打开控制台窗口，输入adb shell，然后cd到路径：/data/data/当前包名/databases/，使用ls查看当前目录里的文件。</p>
<p>　　（2）假设提前创建的数据库名叫BookStore.db，那么接着就用sqlite3 BookStore.db命令打开数据库，然后可以输入各种SQL语句进行操作。</p>
<p>　　（3）输入.table命令可以查看当前数据库的表，.schema命令可以查看所有表的建表语句。.exit或.quit命令可以退出数据库编辑，exit命令可以退出adb shell。</p>
<p>　　（4）在数据库中查询结果出现乱码的情况的解决（Win7环境）：</p>
<p>　　在控制台里输入命令：chcp 65001 确定&mdash;&gt;在命令行标题栏上点击右键，选择【属性】 -【字体】，将字体修改为【Lucida Console】 确定<br />　　完成后再通过 adb shell 进入sqlite3，乱码解决.<br />　　注：恢复cmd的默认设置：Win+R -&gt; 输入regedit -&gt; 找到HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe -&gt; 右键删除文件夹%SystemRoot%_system32_cmd.exe -&gt; 重启cmd即可。</p>
<p>　　3、示例程序：</p>
<p>　　（1）xml文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/create_database_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="创建数据库"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">13</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/add_data_btn"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="添加数据"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">19</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/update_data_btn"</span>
<span style="color: #008080;">20</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">22</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="更新数据"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">25</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/delete_data_btn"</span>
<span style="color: #008080;">26</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">27</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">28</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="删除数据"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;">31</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/query_data_btn"</span>
<span style="color: #008080;">32</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">33</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">34</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="查询数据"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">37</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">38</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">39</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="查询结果："</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">40</span> 
<span style="color: #008080;">41</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">42</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/query_result_tv"</span>
<span style="color: #008080;">43</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">44</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.databasetest2;
</span><span style="color: #008080;">  2</span> 
<span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;
</span><span style="color: #008080;">  4</span> 
<span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.Cursor;
</span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteDatabase;
</span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.EditText;
</span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.TextView;
</span><span style="color: #008080;"> 16</span> 
<span style="color: #008080;"> 17</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;"> 18</span> 
<span style="color: #008080;"> 19</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button createDatabaseBtn;
</span><span style="color: #008080;"> 20</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button addDataBtn;
</span><span style="color: #008080;"> 21</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button updateDataBtn;
</span><span style="color: #008080;"> 22</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button deleteDataBtn;
</span><span style="color: #008080;"> 23</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button queryDataBtn;
</span><span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> TextView queryResultTv;
</span><span style="color: #008080;"> 25</span> 
<span style="color: #008080;"> 26</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> MyDatabaseHelper dbHelper;
</span><span style="color: #008080;"> 27</span> 
<span style="color: #008080;"> 28</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 29</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 30</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;"> 31</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;"> 32</span> 
<span style="color: #008080;"> 33</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 1.创建MyDatabaseHelper实例</span>
<span style="color: #008080;"> 34</span>         dbHelper = <span style="color: #0000ff;">new</span> MyDatabaseHelper(<span style="color: #0000ff;">this</span>, "BookStore.db", <span style="color: #0000ff;">null</span>, 3); <span style="color: #008000;">//</span><span style="color: #008000;"> 这里的3为数据库版本号</span>
<span style="color: #008080;"> 35</span> 
<span style="color: #008080;"> 36</span>         createDatabaseBtn =<span style="color: #000000;"> (Button) findViewById(R.id.create_database_btn);
</span><span style="color: #008080;"> 37</span>         addDataBtn =<span style="color: #000000;"> (Button) findViewById(R.id.add_data_btn);
</span><span style="color: #008080;"> 38</span>         updateDataBtn =<span style="color: #000000;"> (Button) findViewById(R.id.update_data_btn);
</span><span style="color: #008080;"> 39</span>         deleteDataBtn =<span style="color: #000000;"> (Button) findViewById(R.id.delete_data_btn);
</span><span style="color: #008080;"> 40</span>         queryDataBtn =<span style="color: #000000;"> (Button) findViewById(R.id.query_data_btn);
</span><span style="color: #008080;"> 41</span>         queryResultTv =<span style="color: #000000;"> (TextView) findViewById(R.id.query_result_tv);
</span><span style="color: #008080;"> 42</span> 
<span style="color: #008080;"> 43</span>         createDatabaseBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 44</span>         addDataBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 45</span>         updateDataBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 46</span>         deleteDataBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 47</span>         queryDataBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 48</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 49</span> 
<span style="color: #008080;"> 50</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 51</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 52</span> <span style="color: #000000;">        SQLiteDatabase db;
</span><span style="color: #008080;"> 53</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;"> 54</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.create_database_btn:
</span><span style="color: #008080;"> 55</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2.调用MyDatabaseHelper的getWritableDatabase方法打开数据库</span>
<span style="color: #008080;"> 56</span> <span style="color: #000000;">            dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 57</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 58</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.add_data_btn:
</span><span style="color: #008080;"> 59</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 先获取SQLiteDatabase实例，然后直接用execSQL方法执行SQL语句的方式往表中插入数据</span>
<span style="color: #008080;"> 60</span>             db =<span style="color: #000000;"> dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 61</span> <span style="color: #000000;">            db.execSQL(
</span><span style="color: #008080;"> 62</span>                     "insert into book (name,author,pages,price,category_id) values (?,?,?,?,?)"<span style="color: #000000;">,
</span><span style="color: #008080;"> 63</span>                     <span style="color: #0000ff;">new</span> String[] { "三体", "刘慈欣", "567", "49.9", "1" }); <span style="color: #008000;">//</span><span style="color: #008000;"> 注：所有类型的占位符数据都要是字符串，若语句中无占位符参数，则第二个函数参数可为null</span>
<span style="color: #008080;"> 64</span> <span style="color: #000000;">            db.execSQL(
</span><span style="color: #008080;"> 65</span>                     "insert into book (name,author,pages,price,category_id) values (?,?,?,?,?)"<span style="color: #000000;">,
</span><span style="color: #008080;"> 66</span>                     <span style="color: #0000ff;">new</span> String[] { "第一行代码&mdash;&mdash;Android", "郭霖", "401", "25.9", "3"<span style="color: #000000;"> });
</span><span style="color: #008080;"> 67</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 68</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.update_data_btn:
</span><span style="color: #008080;"> 69</span>             db =<span style="color: #000000;"> dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 70</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 更新数据</span>
<span style="color: #008080;"> 71</span>             db.execSQL("update book set price = ? where name = ?"<span style="color: #000000;">,
</span><span style="color: #008080;"> 72</span>                     <span style="color: #0000ff;">new</span> String[] { "10.99", "三体"<span style="color: #000000;"> });
</span><span style="color: #008080;"> 73</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 74</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.delete_data_btn:
</span><span style="color: #008080;"> 75</span>             db =<span style="color: #000000;"> dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 76</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 删除数据</span>
<span style="color: #008080;"> 77</span>             db.execSQL("delete from book where pages &gt; ?", <span style="color: #0000ff;">new</span> String[] { "1"<span style="color: #000000;"> });
</span><span style="color: #008080;"> 78</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 79</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.query_data_btn:
</span><span style="color: #008080;"> 80</span>             db =<span style="color: #000000;"> dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 81</span>             Cursor cursor = db.rawQuery("select * from book where id &lt; ?"<span style="color: #000000;">,
</span><span style="color: #008080;"> 82</span>                     <span style="color: #0000ff;">new</span> String[] { "100"<span style="color: #000000;"> });
</span><span style="color: #008080;"> 83</span>             <span style="color: #0000ff;">int</span> idIndex = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 84</span>             <span style="color: #0000ff;">int</span> authorIndex = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 85</span>             <span style="color: #0000ff;">int</span> priceIndex = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 86</span>             <span style="color: #0000ff;">int</span> pagesIndex = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 87</span>             <span style="color: #0000ff;">int</span> nameIndex = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 88</span>             <span style="color: #0000ff;">int</span> categoryIdIndex = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 89</span> 
<span style="color: #008080;"> 90</span>             ArrayList&lt;Book&gt; bookQueryList = <span style="color: #0000ff;">new</span> ArrayList&lt;Book&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 91</span> 
<span style="color: #008080;"> 92</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 获取每个字段的ColumnIndex</span>
<span style="color: #008080;"> 93</span>             <span style="color: #0000ff;">if</span> (cursor.getCount() &gt;= 0<span style="color: #000000;">) {
</span><span style="color: #008080;"> 94</span>                 idIndex = cursor.getColumnIndex("id"<span style="color: #000000;">);
</span><span style="color: #008080;"> 95</span>                 authorIndex = cursor.getColumnIndex("author"<span style="color: #000000;">);
</span><span style="color: #008080;"> 96</span>                 priceIndex = cursor.getColumnIndex("price"<span style="color: #000000;">);
</span><span style="color: #008080;"> 97</span>                 pagesIndex = cursor.getColumnIndex("pages"<span style="color: #000000;">);
</span><span style="color: #008080;"> 98</span>                 nameIndex = cursor.getColumnIndex("name"<span style="color: #000000;">);
</span><span style="color: #008080;"> 99</span>                 categoryIdIndex = cursor.getColumnIndex("category_id"<span style="color: #000000;">);
</span><span style="color: #008080;">100</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">101</span>             <span style="color: #0000ff;">while</span><span style="color: #000000;"> (cursor.moveToNext()) {
</span><span style="color: #008080;">102</span>                 Book book = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Book();
</span><span style="color: #008080;">103</span> <span style="color: #000000;">                book.setId(cursor.getInt(idIndex));
</span><span style="color: #008080;">104</span> <span style="color: #000000;">                book.setAuthor(cursor.getString(authorIndex));
</span><span style="color: #008080;">105</span> <span style="color: #000000;">                book.setPrice(cursor.getDouble(priceIndex));
</span><span style="color: #008080;">106</span> <span style="color: #000000;">                book.setPages(cursor.getInt(pagesIndex));
</span><span style="color: #008080;">107</span> <span style="color: #000000;">                book.setName(cursor.getString(nameIndex));
</span><span style="color: #008080;">108</span> <span style="color: #000000;">                book.setCategoryId(cursor.getInt(categoryIdIndex));
</span><span style="color: #008080;">109</span> 
<span style="color: #008080;">110</span> <span style="color: #000000;">                bookQueryList.add(book);
</span><span style="color: #008080;">111</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">112</span> 
<span style="color: #008080;">113</span> <span style="color: #000000;">            queryResultTv.setText(bookQueryList.toString());
</span><span style="color: #008080;">114</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">115</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">116</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">117</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">118</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">119</span> <span style="color: #000000;">}
</span><span style="color: #008080;">120</span> 
<span style="color: #008080;">121</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Book类</span>
<span style="color: #008080;">122</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Book {
</span><span style="color: #008080;">123</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> id;
</span><span style="color: #008080;">124</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String author;
</span><span style="color: #008080;">125</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> price;
</span><span style="color: #008080;">126</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> pages;
</span><span style="color: #008080;">127</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;">128</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> categoryId;
</span><span style="color: #008080;">129</span> 
<span style="color: #008080;">130</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getCategoryId() {
</span><span style="color: #008080;">131</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> categoryId;
</span><span style="color: #008080;">132</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">133</span> 
<span style="color: #008080;">134</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setCategoryId(<span style="color: #0000ff;">int</span><span style="color: #000000;"> categoryId) {
</span><span style="color: #008080;">135</span>         <span style="color: #0000ff;">this</span>.categoryId =<span style="color: #000000;"> categoryId;
</span><span style="color: #008080;">136</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">137</span> 
<span style="color: #008080;">138</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getId() {
</span><span style="color: #008080;">139</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> id;
</span><span style="color: #008080;">140</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">141</span> 
<span style="color: #008080;">142</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setId(<span style="color: #0000ff;">int</span><span style="color: #000000;"> id) {
</span><span style="color: #008080;">143</span>         <span style="color: #0000ff;">this</span>.id =<span style="color: #000000;"> id;
</span><span style="color: #008080;">144</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">145</span> 
<span style="color: #008080;">146</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getAuthor() {
</span><span style="color: #008080;">147</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> author;
</span><span style="color: #008080;">148</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">149</span> 
<span style="color: #008080;">150</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setAuthor(String author) {
</span><span style="color: #008080;">151</span>         <span style="color: #0000ff;">this</span>.author =<span style="color: #000000;"> author;
</span><span style="color: #008080;">152</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">153</span> 
<span style="color: #008080;">154</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> getPrice() {
</span><span style="color: #008080;">155</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> price;
</span><span style="color: #008080;">156</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">157</span> 
<span style="color: #008080;">158</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setPrice(<span style="color: #0000ff;">double</span><span style="color: #000000;"> price) {
</span><span style="color: #008080;">159</span>         <span style="color: #0000ff;">this</span>.price =<span style="color: #000000;"> price;
</span><span style="color: #008080;">160</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">161</span> 
<span style="color: #008080;">162</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getPages() {
</span><span style="color: #008080;">163</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> pages;
</span><span style="color: #008080;">164</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">165</span> 
<span style="color: #008080;">166</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setPages(<span style="color: #0000ff;">int</span><span style="color: #000000;"> pages) {
</span><span style="color: #008080;">167</span>         <span style="color: #0000ff;">this</span>.pages =<span style="color: #000000;"> pages;
</span><span style="color: #008080;">168</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">169</span> 
<span style="color: #008080;">170</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
</span><span style="color: #008080;">171</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
</span><span style="color: #008080;">172</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">173</span> 
<span style="color: #008080;">174</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
</span><span style="color: #008080;">175</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;">176</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">177</span> 
<span style="color: #008080;">178</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">179</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">180</span>         <span style="color: #0000ff;">return</span> "Book [ id = " + id + ", author = " + author + ", price = "
<span style="color: #008080;">181</span>                 + price + ", pages = " + pages + ", name = " +<span style="color: #000000;"> name
</span><span style="color: #008080;">182</span>                 + ", category_id = " + categoryId + " ]"<span style="color: #000000;">;
</span><span style="color: #008080;">183</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">184</span> }</pre>
</div>
<p>程序运行效果：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160327013820542-1077790291.png" alt="" /></p>
<p>　　4、使用事务　</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 删除旧数据并添加新数据，两个操作为一个原子操作</span>
<span style="color: #008080;"> 2</span>             SQLiteDatabase db =<span style="color: #000000;"> dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 3</span>             db.beginTransaction(); <span style="color: #008000;">//</span><span style="color: #008000;"> 开启事务</span>
<span style="color: #008080;"> 4</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 5</span>                 db.delete("book", <span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 6</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> if (true) {
</span><span style="color: #008080;"> 7</span>                 <span style="color: #008000;">//</span> <span style="color: #008000;">//</span><span style="color: #008000;"> 在这里手动抛出一个异常，让事务失败
</span><span style="color: #008080;"> 8</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> throw new NullPointerException();
</span><span style="color: #008080;"> 9</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> }</span>
<span style="color: #008080;">10</span>                 ContentValues values = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ContentValues();
</span><span style="color: #008080;">11</span>                 values.put("name", "这是本新书"<span style="color: #000000;">);
</span><span style="color: #008080;">12</span>                 values.put("author", "贾永基"<span style="color: #000000;">);
</span><span style="color: #008080;">13</span>                 values.put("pages", 123<span style="color: #000000;">);
</span><span style="color: #008080;">14</span>                 values.put("price", 13.4<span style="color: #000000;">);
</span><span style="color: #008080;">15</span>                 db.insert("book", <span style="color: #0000ff;">null</span><span style="color: #000000;">, values);
</span><span style="color: #008080;">16</span>                 db.setTransactionSuccessful();<span style="color: #008000;">//</span><span style="color: #008000;"> 事务已经执行成功</span>
<span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">19</span> <span style="color: #000000;">                e.printStackTrace();
</span><span style="color: #008080;">20</span>             } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">21</span>                 db.endTransaction(); <span style="color: #008000;">//</span><span style="color: #008000;"> 结束事务</span>
<span style="color: #008080;">22</span>             }</pre>
</div>
<p>&nbsp;　　5、补充：使用SQLiteDataBase类自带的方法进行数据库的增、删、改操作（因为使用自带的方法进行查询的操作过于复杂不做介绍，直接使用SQL语句即可）：</p>
<p>　　（1）插入数据：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">...
</span><span style="color: #008080;"> 2</span> SQLiteDatabase db =<span style="color: #000000;"> dbHelper.getWritableDatabase();
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #008000;">//</span><span style="color: #008000;"> 使用ContentValues对象组装数据</span>
<span style="color: #008080;"> 5</span> ContentValues values = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ContentValues();
</span><span style="color: #008080;"> 6</span> values.put("name","三体"<span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span> values.put("pages",565<span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span> values.put("price",23.99<span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #008000;">//</span><span style="color: #008000;"> 插入数据到数据库中
</span><span style="color: #008080;">11</span> <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数：表名；第二个参数：用于在未指定添加数据的情况下为某些可为空的字段自动赋值为NULL，一般用不到这个功能，把这个参数传入null即可；第三个参数：携带数据的ContentValues对象</span>
<span style="color: #008080;">12</span> db.insert("Book",<span style="color: #0000ff;">null</span><span style="color: #000000;">,values);
</span><span style="color: #008080;">13</span> ...</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第8章  通知和手机多媒体</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/24/5315398.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Thu, 24 Mar 2016 06:26:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/24/5315398.html</guid><description><![CDATA[<p>　　本章主要介绍了通知、短信、调用摄像头和相册、播放多媒体文件等内容。　　</p>
<p><strong>（一）通知的用法</strong></p>
<p>　　1、通知的基本用法</p>
<p>　　见如下代码（详细操作步骤在代码注释中）：</p>
<p>　　（1）先创建一个布局文件，其中只有一个名为&ldquo;发送通知&rdquo;的Button，当点击这个按钮的时候发送一条通知：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/sent_notice_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="发送通知"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）MainActivity：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Notification;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.NotificationManager;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button sendNoticeBtn;
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">16</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;">17</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>         Button sendNoticeBtn =<span style="color: #000000;"> (Button) findViewById(R.id.sent_notice_btn);
</span><span style="color: #008080;">21</span>         sendNoticeBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">25</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;">26</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;">27</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.sent_notice_btn:
</span><span style="color: #008080;">28</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 1.通过getSystemService方法创建NotificationManager实例</span>
<span style="color: #008080;">29</span>             NotificationManager mgr =<span style="color: #000000;"> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
</span><span style="color: #008080;">30</span>             
<span style="color: #008080;">31</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2.创建Notification实例，它是在屏幕上方一闪而过的那种通知信息
</span><span style="color: #008080;">32</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数表示图标，第二个参数表示通知内容，第三个参数用于指定通知被创建的时间，当下拉状态时，这个时间会显示在对应的通知上</span>
<span style="color: #008080;">33</span>             Notification notification = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Notification(
</span><span style="color: #008080;">34</span>                     R.drawable.ic_launcher, "您有一条通知"<span style="color: #000000;">,
</span><span style="color: #008080;">35</span> <span style="color: #000000;">                    System.currentTimeMillis());
</span><span style="color: #008080;">36</span>             
<span style="color: #008080;">37</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3.对下拉状态栏后显示的通知的布局进行设定
</span><span style="color: #008080;">38</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数表示context上下文，第二个参数表示通知的标题，第三个参数表示通知的内容，第四个参数表示点击通知后的行为，这里先传入null</span>
<span style="color: #008080;">39</span>             notification.setLatestEventInfo(<span style="color: #0000ff;">this</span>, "这是通知标题", "这是通知内容", <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">40</span>             
<span style="color: #008080;">41</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 4.使用NotificationManager的notify方法让通知显示出来
</span><span style="color: #008080;">42</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数：通知的id，具有唯一性；第二个参数：Notification对象</span>
<span style="color: #008080;">43</span>             mgr.notify(1<span style="color: #000000;">, notification);
</span><span style="color: #008080;">44</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">47</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">48</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">49</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">50</span> }</pre>
</div>
<p>　　2、为通知加上点击跳转功能（使用PendingIntent）</p>
<p>　　（1）在以上代码的基础上，再创建另一个xml文件，作为点击通知后跳转到的页面：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8"</span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;"> 8</span>         <span style="color: #ff0000;">android:layout_width</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="这是通知跳转的页面"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　（2）创建活动NotificationActivity，在其中调用NotificationManager的cancel方法让状态栏的通知消失：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.NotificationManager;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> NotificationActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        setContentView(R.layout.activity_notification);
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 用于让状态栏上的通知消失,这里的1就是在MainActivity中创建通知时为通知设置的id</span>
<span style="color: #008080;">12</span>         NotificationManager mgr =<span style="color: #000000;"> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
</span><span style="color: #008080;">13</span>         mgr.cancel(1<span style="color: #000000;">);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span> }</pre>
</div>
<p>　　（3）修改MainActivity活动的按钮点击事件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　<span style="color: #000000;">@Override
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.sent_notice_btn:
</span><span style="color: #008080;"> 5</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 1.通过getSystemService方法创建NotificationManager实例</span>
<span style="color: #008080;"> 6</span>             NotificationManager mgr =<span style="color: #000000;"> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2.创建Notification实例，它是在屏幕上方一闪而过的那种通知信息
</span><span style="color: #008080;"> 9</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数表示图标，第二个参数表示通知内容，第三个参数用于指定通知被创建的时间，当下拉状态时，这个时间会显示在对应的通知上</span>
<span style="color: #008080;">10</span>             Notification notification = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Notification(
</span><span style="color: #008080;">11</span>                     R.drawable.ic_launcher, "您有一条通知"<span style="color: #000000;">,
</span><span style="color: #008080;">12</span> <span style="color: #000000;">                    System.currentTimeMillis());
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3.对下拉状态栏后显示的通知的布局和点击行为进行设定
</span><span style="color: #008080;">15</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数表示context上下文，第二个参数表示通知的标题，第三个参数表示通知的内容，第四个参数表示点击通知后的行为，这里先传入null
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3.1 创建Intent，用于在点击通知时跳转到NotificationActivity页面：</span>
<span style="color: #008080;">18</span>             Intent intent = <span style="color: #0000ff;">new</span> Intent(MainActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,
</span><span style="color: #008080;">19</span>                     NotificationActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">20</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 3.2 创建PendingIntent</span>
<span style="color: #008080;">21</span>             PendingIntent pi = PendingIntent.getActivity(MainActivity.<span style="color: #0000ff;">this</span>, 0<span style="color: #000000;">,
</span><span style="color: #008080;">22</span> <span style="color: #000000;">                    intent, PendingIntent.FLAG_CANCEL_CURRENT);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>             notification.setLatestEventInfo(<span style="color: #0000ff;">this</span>, "这是通知标题", "这是通知内容"<span style="color: #000000;">, pi);
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 4.使用NotificationManager的notify方法让通知显示出来
</span><span style="color: #008080;">27</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数：通知的id，具有唯一性；第二个参数：Notification对象</span>
<span style="color: #008080;">28</span>             mgr.notify(1<span style="color: #000000;">, notification);
</span><span style="color: #008080;">29</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">32</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">33</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">34</span>     }</pre>
</div>
<p>　　（4）最后注册NotificationActivity活动。</p>
<p>　　3、通知的高级技巧</p>
<p>　　（1）在发送通知的时候同时播放一段音频：只用在发送通知按钮的点击事件中加入如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　　　　　　　<span style="color: #000000;">...
</span><span style="color: #008080;">2</span> 　　　　　　　<span style="color: #008000;">//</span><span style="color: #008000;"> +.在发送通知的时候播放一段音频,这里的路径是手机默认来电铃声</span>
<span style="color: #008080;">3</span>             Uri soundUri = Uri.fromFile(<span style="color: #0000ff;">new</span><span style="color: #000000;"> File(
</span><span style="color: #008080;">4</span>                     "/system/media/audio/ringtones/Basic_tone.ogg"<span style="color: #000000;">));
</span><span style="color: #008080;">5</span>             notification.sound =<span style="color: #000000;"> soundUri;
</span><span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 4.使用NotificationManager的notify方法让通知显示出来
</span><span style="color: #008080;">8</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数：通知的id，具有唯一性；第二个参数：Notification对象</span>
<span style="color: #008080;">9</span>             mgr.notify(1, notification);<br />　　　　　　　　...</pre>
</div>
<p>　　　Tips：用R.E管理器进入/system/media/audio，里面有四个文件夹，分别是alarms（闹钟铃声），notifications（通知即短信铃声），ringtones（来电铃声），ui(一些应用程序操作的效果声音比如拍照等）。</p>
<p>　　（2）发送通知时让手机振动：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　　<span style="color: #000000;">...
</span><span style="color: #008080;"> 2</span> 　　　　　　　<span style="color: #008000;">//</span><span style="color: #008000;"> +.发送通知时让手机振动：
</span><span style="color: #008080;"> 3</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 说明：这个数组下标为0的值表示手机静止的时长（毫秒），下标为1的表示振动的时长，下标为2的表示静止的时长,...以此类推
</span><span style="color: #008080;"> 4</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 让手机振动需要申请权限：&lt;uses-permission
</span><span style="color: #008080;"> 5</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> android:name="android.permission.VIBRATE" /&gt;</span>
<span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">long</span>[] vibrates = { 0, 1000, 1000, 1000<span style="color: #000000;"> };
</span><span style="color: #008080;"> 7</span>             notification.vibrate =<span style="color: #000000;"> vibrates;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 4.使用NotificationManager的notify方法让通知显示出来
</span><span style="color: #008080;">10</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数：通知的id，具有唯一性；第二个参数：Notification对象</span>
<span style="color: #008080;">11</span>             mgr.notify(1<span style="color: #000000;">, notification);
</span><span style="color: #008080;">12</span> 　　　　　　　...</pre>
</div>
<p>　　（3）控制LED灯亮</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">            ...
</span><span style="color: #008080;"> 2</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> +.发送通知的时候让LED灯亮</span>
<span style="color: #008080;"> 3</span>             notification.ledARGB = Color.GREEN; <span style="color: #008000;">//</span><span style="color: #008000;"> 控制亮灯的颜色，一般可以选红绿蓝三种颜色</span>
<span style="color: #008080;"> 4</span>             notification.ledOnMS = 1000; <span style="color: #008000;">//</span><span style="color: #008000;"> 灯亮的时长（毫秒）</span>
<span style="color: #008080;"> 5</span>             notification.ledOffMS = 2000; <span style="color: #008000;">//</span><span style="color: #008000;"> 灯暗去的时长,在手机在锁屏状态且用户查看通知之前，灯会交替亮、暗下去</span>
<span style="color: #008080;"> 6</span>             notification.flags = Notification.FLAG_SHOW_LIGHTS; <span style="color: #008000;">//</span><span style="color: #008000;"> 指定通知的行为，这里是亮灯<br />
</span><span style="color: #008080;"> 7</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 4.使用NotificationManager的notify方法让通知显示出来
</span><span style="color: #008080;"> 8</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 第一个参数：通知的id，具有唯一性；第二个参数：Notification对象</span>
<span style="color: #008080;"> 9</span>             mgr.notify(1<span style="color: #000000;">, notification);
</span><span style="color: #008080;">10</span>             ...</pre>
</div>
<p>　　（4）通知的铃声、振动、灯光的设置使用系统默认值：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> +.铃声、振动、通知的设置使用系统默认值</span>
<span style="color: #008080;">2</span>             notification.defaults = Notification.DEFAULT_ALL;</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>Android Toast封装</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/24/5314990.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Thu, 24 Mar 2016 04:10:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/24/5314990.html</guid><description><![CDATA[<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * Android Toast封装
</span><span style="color: #008080;"> 3</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ToastUtil {
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 短时间显示Toast信息</span>
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> showShort(Context context, String info) {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">        Toast.makeText(context, info, Toast.LENGTH_SHORT).show();
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 长时间显示Toast信息</span>
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> showLong(Context context, String info) {
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        Toast.makeText(context, info, Toast.LENGTH_LONG).show();
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> }</pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>《第一行代码：Android》读书笔记——第10章  Android网络编程</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/23/5310462.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Wed, 23 Mar 2016 03:50:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/23/5310462.html</guid><description><![CDATA[<div><span style="font-size: 16px;"><strong>（一）WebView的用法</strong></span></div>
<div><span style="font-size: 16px;">1、WebView也是一个普通的控件。</span></div>
<div><span style="font-size: 16px;">2、常用用法：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> WebView webView =<span style="color: #000000;"> (WebView)findViewById(R.id.web_view);
</span><span style="color: #008080;"> 2</span> webView.getSettings( ).setJavaScriptEnabled(<span style="color: #0000ff;">true</span>);    <span style="color: #008000;">//</span><span style="color: #008000;">让webView支持javascript脚本</span>
<span style="color: #008080;"> 3</span> webView.setWebViewClient(<span style="color: #0000ff;">new</span><span style="color: #000000;"> WebViewClient( ){
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> shouldOverrideUrlLoading(WebView view, String url){
</span><span style="color: #008080;"> 6</span>            view.loadUrl(url);    <span style="color: #008000;">//</span><span style="color: #008000;">根据传入的参数再去加载新的网页</span>
<span style="color: #008080;"> 7</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span>;    <span style="color: #008000;">//</span><span style="color: #008000;">表示当前WebView可以处理打开新网页的请求，不用借助系统浏览器</span>
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">});
</span><span style="color: #008080;">10</span> webView.loadUrl("http://www.baidu.com");</span></pre>
</div>
<p><span style="font-size: 16px;">3、使用任何网络功能的程序都要申请权限：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.INTERNET"</span> <span style="color: #0000ff;">/&gt;</span></span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px;"><strong>（二）使用HttpURLConnection访问网络</strong></span></p>
<div><span style="font-size: 16px;">1、步骤如下：</span></div>
<div><span style="font-size: 16px;">（1）创建一个URL对象，然后使用其openConnection创建一个HttpURLConnection对象：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> URL url = <span style="color: #0000ff;">new</span> URL("http://www.baidu.com"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> connection = (HttpURLConnection) url.openConnection();</span></pre>
</div>
<p><span style="font-size: 16px;">（2）设置HttpURLConnection是GET方法还是POST方法：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> connection.setRequestMethod("GET");</span></pre>
</div>
<p><span style="font-size: 16px;">（3）对HttpURLConnection进行其他的设置：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> connection.setConnectTimeout(8000);    <span style="color: #008000;">//</span><span style="color: #008000;">设置连接超时的毫秒数</span>
<span style="color: #008080;">2</span> connection.setReadTimeout(8000);    <span style="color: #008000;">//</span><span style="color: #008000;">设置读取超时的毫秒数</span></span></pre>
</div>
<p><span style="font-size: 16px;">（4）用HttpURLConnection对象的getInputStream方法获取服务器的返回输入流InputStream对象：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> InputStream in = connection.getInputStream();</span></pre>
</div>
<p><span style="font-size: 16px;">（5）对输入流进行读取：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> BufferedReader reader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(in));
</span><span style="color: #008080;">3</span> StringBuilder response = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
</span><span style="color: #008080;">4</span> <span style="color: #000000;">String line;
</span><span style="color: #008080;">5</span> <span style="color: #0000ff;">while</span> ((line = reader.readLine()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">6</span> <span style="color: #000000;">    response.append(line);
</span><span style="color: #008080;">7</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">（6）用disconnect方法关闭这个HTTP连接：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> connection.disconnect();</span></pre>
</div>
<p><span style="font-size: 16px;">2、注意：</span></p>
<div><span style="font-size: 16px;">（1）网络请求要放在子线程里。</span></div>
<div><span style="font-size: 16px;">（2）在子线程里网络请求获取返回数据后，如果要进行UI操作，则要采用异步消息处理方法。</span></div>
<div><span style="font-size: 16px;">（3）要申请网络权限。</span></div>
<div><span style="font-size: 16px;">&nbsp;</span></div>
<div><span style="font-size: 16px;"><strong>（三）使用HttpClient访问网络</strong></span></div>
<div>
<div><span style="font-size: 16px;">1、HttpClient是一个接口类，是Apache提供的HTTP网络访问接口，从一开始就被引入到了Android API中。</span></div>
<div><span style="font-size: 16px;">2、使用步骤：</span></div>
<div><span style="font-size: 16px;">（1）创建HttpClient实例：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> HttpClient httpClient = <span style="color: #0000ff;">new</span> DefaultHttpClient();</span></pre>
</div>
<div><span style="font-size: 16px;">（2）根据发起请求的类型不同，下面的第（2）步的步骤也不同：</span></div>
<div><span style="font-size: 16px;">①GET请求：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> HttpGet httpGet = <span style="color: #0000ff;">new</span> HttpGet("http://10.0.2.2:8081/get_data.xml");</span></pre>
</div>
<p><span style="font-size: 16px;">②POST请求：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> HttpPost httpPost = <span style="color: #0000ff;">new</span> HttpPost("http://www.baidu.com"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> List&lt;NameValuePair&gt; params = <span style="color: #0000ff;">new</span> ArrayList&lt;NameValuePair&gt;<span style="color: #000000;">();
</span><span style="color: #008080;">3</span> params.add(<span style="color: #0000ff;">new</span> BasicNameValuePair("username","admin"<span style="color: #000000;">));
</span><span style="color: #008080;">4</span> params.add(<span style="color: #0000ff;">new</span> BasicNameValuePair("password","123456"<span style="color: #000000;">));
</span><span style="color: #008080;">5</span> UrlEncodedFormEntity entity = <span style="color: #0000ff;">new</span> UrlEncodedFormEntity(params, "utf-8"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span> httpPost.setEntity(entity);</span></pre>
</div>
<p><span style="font-size: 16px;">（3）获取服务器返回值：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> HttpResponse httpResponse = httpClient.execute(httpGet);</span></pre>
</div>
<p><span style="font-size: 16px;">（4）判断返回状态码，如果等于200就表示请求和响应都成功了：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span> (httpResponse.getStatusLine().getStatusCode() == 200<span style="color: #000000;">) {
</span><span style="color: #008080;">2</span>     HttpEntity entity =<span style="color: #000000;"> httpResponse.getEntity();
</span><span style="color: #008080;">3</span>     String response = EntityUtils.toString(entity, "utf-8"<span style="color: #000000;">);
</span><span style="color: #008080;">4</span>     ...    <span style="color: #008000;">//</span><span style="color: #008000;">其他操作</span>
<span style="color: #008080;">5</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">3、注意：HttpClient访问网络同样要放在子线程里、申请网络权限。</span></p>
</div>
</div>
</div>
</div>
<p><span style="font-size: 16px;">&nbsp;</span></p>
<div><span style="font-size: 16px;"><strong>（四）使用回调机制封装HttpURLConnection操作来创建HttpUtil类</strong></span></div>
<div><span style="font-size: 16px;">1、创建HttpCallbackListener接口：</span></div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> HttpCallbackListener {
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">void</span> onFinish(String response);    <span style="color: #008000;">//</span><span style="color: #008000;">在服务器成功响应请求时调用</span>
<span style="color: #008080;">3</span>     <span style="color: #0000ff;">void</span> onError(Exception e);    <span style="color: #008000;">//</span><span style="color: #008000;">进行网络操作出错时调用</span>
<span style="color: #008080;">4</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">2、创建HttpUtil类：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.BufferedReader;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.InputStream;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.InputStreamReader;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.net.HttpURLConnection;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.net.URL;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> HttpUtil {
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> sendHttpRequest(<span style="color: #0000ff;">final</span> String address,<span style="color: #0000ff;">final</span><span style="color: #000000;"> HttpCallbackListener listener) {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {
</span><span style="color: #008080;">10</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">11</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
</span><span style="color: #008080;">12</span>                 HttpURLConnection connection = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>                 <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">15</span>                     URL url = <span style="color: #0000ff;">new</span><span style="color: #000000;"> URL(address);
</span><span style="color: #008080;">16</span>                     connection =<span style="color: #000000;"> (HttpURLConnection) url.openConnection();
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>                     connection.setRequestMethod("GET"<span style="color: #000000;">);
</span><span style="color: #008080;">19</span>                     connection.setConnectTimeout(8000<span style="color: #000000;">);
</span><span style="color: #008080;">20</span>                     connection.setReadTimeout(8000<span style="color: #000000;">);
</span><span style="color: #008080;">21</span>                     connection.setDoInput(<span style="color: #0000ff;">true</span><span style="color: #000000;">);
</span><span style="color: #008080;">22</span>                     connection.setDoOutput(<span style="color: #0000ff;">true</span><span style="color: #000000;">);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>                     InputStream in =<span style="color: #000000;"> connection.getInputStream();
</span><span style="color: #008080;">25</span>                     BufferedReader reader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
</span><span style="color: #008080;">26</span>                             <span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(in));
</span><span style="color: #008080;">27</span>                     StringBuilder response = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
</span><span style="color: #008080;">28</span> <span style="color: #000000;">                    String line;
</span><span style="color: #008080;">29</span> 
<span style="color: #008080;">30</span>                     <span style="color: #0000ff;">while</span> ((line = reader.readLine()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">31</span> <span style="color: #000000;">                        response.append(line);
</span><span style="color: #008080;">32</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">33</span> 
<span style="color: #008080;">34</span>                     <span style="color: #0000ff;">if</span> (listener != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">35</span>                         <span style="color: #008000;">//</span><span style="color: #008000;"> 回调onFinish方法</span>
<span style="color: #008080;">36</span> <span style="color: #000000;">                        listener.onFinish(response.toString());
</span><span style="color: #008080;">37</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span>                 } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">40</span>                     <span style="color: #0000ff;">if</span> (listener != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">41</span> <span style="color: #000000;">                        listener.onError(e);
</span><span style="color: #008080;">42</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">43</span>                 } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">44</span>                     <span style="color: #0000ff;">if</span> (connection != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">45</span> <span style="color: #000000;">                        connection.disconnect();
</span><span style="color: #008080;">46</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">47</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">48</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">49</span> <span style="color: #000000;">        }).start();
</span><span style="color: #008080;">50</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">51</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">3、使用时这样使用：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> HttpUtil.sendHttpRequest("http://www.baidu.com",<span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpCallBackListener(){
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onFinish(String response){
</span><span style="color: #008080;"> 4</span>         <span style="color: #008000;">//</span><span style="color: #008000;">在这里根据返回内容执行具体的逻辑</span>
<span style="color: #008080;"> 5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onError(Exception e){
</span><span style="color: #008080;"> 9</span>         <span style="color: #008000;">//</span><span style="color: #008000;">在这里对异常情况进行处理</span>
<span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> });</span></pre>
</div>
<p><span style="font-size: 16px;">&nbsp;</span></p>
<p><span style="font-size: 16px;"><strong>（五）解析XML数据</strong></span></p>
<div><span style="font-size: 16px;">1、安装Apache服务器：下载安装包，然后安装成功后启动服务器，在浏览器里输入127.0.0.1，会看到Apache的字样。</span></div>
<div><span style="font-size: 16px;">2、在Apache安装目录：...\Apache\htdocs目录下，可以新建一个xml文件，命名为get_data.xml，加入内容，然后在浏览器里输入：127.0.0.1/get_data.xml（在手机模拟器里要输入：10.0.2.2/get_data.xml），就会显示出该文件的内容。</span></div>
<div><span style="font-size: 16px;">3、编写的XML数据的格式如下：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">apps</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">app</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>1<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">name</span><span style="color: #0000ff;">&gt;</span>Google Maps<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">version</span><span style="color: #0000ff;">&gt;</span>1.0<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">version</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">app</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">app</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>2<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">name</span><span style="color: #0000ff;">&gt;</span>Chrome<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">version</span><span style="color: #0000ff;">&gt;</span>1.8<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">version</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">app</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">app</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">13</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>3<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">14</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">name</span><span style="color: #0000ff;">&gt;</span>Google Play<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">name</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">15</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">version</span><span style="color: #0000ff;">&gt;</span>3.2<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">version</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">app</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">17</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">apps</span><span style="color: #0000ff;">&gt;</span></span></pre>
</div>
<p><span style="font-size: 16px;">4、用Pull方式解析XML数据：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> parseXMLWithPull(String xmlData) {
</span><span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 3</span>             XmlPullParserFactory factory =<span style="color: #000000;"> XmlPullParserFactory.newInstance();
</span><span style="color: #008080;"> 4</span>             XmlPullParser xmlPullParse =<span style="color: #000000;"> factory.newPullParser();
</span><span style="color: #008080;"> 5</span>             xmlPullParse.setInput(<span style="color: #0000ff;">new</span><span style="color: #000000;"> StringReader(xmlData));
</span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">int</span> eventType =<span style="color: #000000;"> xmlPullParse.getEventType();
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>             String id = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span>             String name = ""<span style="color: #000000;">;
</span><span style="color: #008080;">10</span>             String version = ""<span style="color: #000000;">;
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>             <span style="color: #0000ff;">while</span> (eventType !=<span style="color: #000000;"> XmlPullParser.END_DOCUMENT) {
</span><span style="color: #008080;">13</span>                 String nodeName =<span style="color: #000000;"> xmlPullParse.getName();
</span><span style="color: #008080;">14</span>                 <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (eventType) {
</span><span style="color: #008080;">15</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 开始解析某个结点</span>
<span style="color: #008080;">16</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> XmlPullParser.START_TAG: {
</span><span style="color: #008080;">17</span>                     <span style="color: #0000ff;">if</span> ("id"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">18</span>                         id =<span style="color: #000000;"> xmlPullParse.nextText();
</span><span style="color: #008080;">19</span>                     } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ("name"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">20</span>                         name =<span style="color: #000000;"> xmlPullParse.nextText();
</span><span style="color: #008080;">21</span>                     } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ("version"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">22</span>                         version =<span style="color: #000000;"> xmlPullParse.nextText();
</span><span style="color: #008080;">23</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">24</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">25</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">26</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 完成解析某个结点</span>
<span style="color: #008080;">27</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> XmlPullParser.END_TAG: {
</span><span style="color: #008080;">28</span>                     <span style="color: #0000ff;">if</span> ("app"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">29</span>                         Log.d("MainActivity", "id is " +<span style="color: #000000;"> id);
</span><span style="color: #008080;">30</span>                         Log.d("MainActivity", "name is " +<span style="color: #000000;"> name);
</span><span style="color: #008080;">31</span>                         Log.d("MainActivity", "version is " +<span style="color: #000000;"> version);
</span><span style="color: #008080;">32</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">33</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">34</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">35</span>                 <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">36</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">37</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span>                 eventType =<span style="color: #000000;"> xmlPullParse.next();
</span><span style="color: #008080;">40</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">41</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">42</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">43</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">44</span>     }</span></pre>
</div>
<div><span style="font-size: 16px;">5、用SAX方式解析XML数据步骤：</span></div>
<div><span style="font-size: 16px;">（1）创建ContentHandler 类继承自DefaultHandler并重写5个方法：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.xml.sax.Attributes;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.xml.sax.SAXException;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.xml.sax.helpers.DefaultHandler;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ContentHandler <span style="color: #0000ff;">extends</span><span style="color: #000000;"> DefaultHandler {
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String nodeName;
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> StringBuilder id;
</span><span style="color: #008080;">10</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> StringBuilder name;
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> StringBuilder version;
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> startDocument() <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SAXException {
</span><span style="color: #008080;">15</span>         id = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
</span><span style="color: #008080;">16</span>         name = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
</span><span style="color: #008080;">17</span>         version = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> startElement(String uri, String localName, String qName,
</span><span style="color: #008080;">22</span>             Attributes attributes) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SAXException {
</span><span style="color: #008080;">23</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 记录当前结点名</span>
<span style="color: #008080;">24</span>         nodeName =<span style="color: #000000;"> localName;
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">28</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> characters(<span style="color: #0000ff;">char</span>[] ch, <span style="color: #0000ff;">int</span> start, <span style="color: #0000ff;">int</span><span style="color: #000000;"> length)
</span><span style="color: #008080;">29</span>             <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SAXException {
</span><span style="color: #008080;">30</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 根据当前结点名判断将内容添加到哪一个StringBuilder对象中</span>
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">if</span> ("id"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">32</span> <span style="color: #000000;">            id.append(ch, start, length);
</span><span style="color: #008080;">33</span>         } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ("name"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">34</span> <span style="color: #000000;">            name.append(ch, start, length);
</span><span style="color: #008080;">35</span>         } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ("version"<span style="color: #000000;">.equals(nodeName)) {
</span><span style="color: #008080;">36</span> <span style="color: #000000;">            version.append(ch, start, length);
</span><span style="color: #008080;">37</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">38</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">41</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> endElement(String uri, String localName, String qName)
</span><span style="color: #008080;">42</span>             <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SAXException {
</span><span style="color: #008080;">43</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 用trim方法去掉空白字符</span>
<span style="color: #008080;">44</span>         <span style="color: #0000ff;">if</span> ("app"<span style="color: #000000;">.equals(localName)) {
</span><span style="color: #008080;">45</span>             Log.d("MainActivity", "id is " +<span style="color: #000000;"> id.toString().trim());
</span><span style="color: #008080;">46</span>             Log.d("MainActivity", "name is " +<span style="color: #000000;"> name.toString().trim());
</span><span style="color: #008080;">47</span>             Log.d("MainActivity", "version is " +<span style="color: #000000;"> version.toString().trim());
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 将StringBuilder清空</span>
<span style="color: #008080;">50</span>             id.setLength(0<span style="color: #000000;">);
</span><span style="color: #008080;">51</span>             name.setLength(0<span style="color: #000000;">);
</span><span style="color: #008080;">52</span>             version.setLength(0<span style="color: #000000;">);
</span><span style="color: #008080;">53</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">54</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">55</span> 
<span style="color: #008080;">56</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">57</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> endDocument() <span style="color: #0000ff;">throws</span><span style="color: #000000;"> SAXException {
</span><span style="color: #008080;">58</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">59</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">（2）写具体方法：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> parseXMLWithSAX(String xmlData) {
</span><span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 3</span>             SAXParserFactory factory =<span style="color: #000000;"> SAXParserFactory.newInstance();
</span><span style="color: #008080;"> 4</span>             XMLReader xmlReader =<span style="color: #000000;"> factory.newSAXParser().getXMLReader();
</span><span style="color: #008080;"> 5</span>             ContentHandler handler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ContentHandler();
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">            xmlReader.setContentHandler(handler);
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 开始执行解析</span>
<span style="color: #008080;">10</span>             xmlReader.parse(<span style="color: #0000ff;">new</span> InputSource(<span style="color: #0000ff;">new</span><span style="color: #000000;"> StringReader(xmlData)));
</span><span style="color: #008080;">11</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">14</span> }</span></pre>
</div>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">&nbsp;</p>
<div><span style="font-size: medium;"><strong>（六）解析Json数据</strong><br /></span></div>
<p style="text-align: left;">&nbsp;</p>
<div><span style="font-size: medium;">　　见我的博客园文章：</span><span style="font-size: medium;"><a href="http://www.cnblogs.com/jiayongji/p/5297187.html">用GSON解析Json格式数据</a>，这里不再详写。</span></div>
<p style="text-align: left;"><span style="font-size: 16px;">&nbsp;<strong><span class="Apple-converted-space">&nbsp;</span></strong></span></p>
<p style="text-align: center;"><span style="font-size: 16px;"><strong><span class="Apple-converted-space">&nbsp; 【本章结束】</span></strong></span></p>
</div>
</div>
</div>]]></description></item><item><title>《第一行代码：Android》读书笔记——第9章 服务</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/23/5310395.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Wed, 23 Mar 2016 03:34:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/23/5310395.html</guid><description><![CDATA[<div><span style="font-size: 16px;"><strong>（一）Service简介</strong></span></div>
<div><span style="font-size: 16px;">　　服务适合执行那种不需要和用户交互而且还要长期运行的任务。所有的服务代码都是默认运行在主线程中，需要在服务内部手动添加子线程，在子线程中执行耗时任务。</span></div>
<div><span style="font-size: 16px;">&nbsp;</span></div>
<div>
<div><span style="font-size: 16px;"><strong>（二）线程</strong></span></div>
<div><span style="font-size: 16px;">1、线程的3种用法：</span></div>
<div><span style="font-size: 16px;">（1）继承Thread：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">class</span> MyThread <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Thread{
</span><span style="color: #008080;">2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run( ){
</span><span style="color: #008080;">3</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">执行耗时操作</span>
<span style="color: #008080;">4</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">5</span> <span style="color: #000000;">}
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">new</span> MyThread( ).start( );</span></pre>
</div>
<p><span style="font-size: 16px;">（2）实现Runnable接口：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">class</span> MyRunnable <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Runnable{   
</span><span style="color: #008080;">2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run( ){
</span><span style="color: #008080;">3</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">执行耗时操作</span>
<span style="color: #008080;">4</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">5</span> <span style="color: #000000;">}
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span> MyRunnable).start( );</span></pre>
</div>
<p><span style="font-size: 16px;">（3）使用匿名类：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable( ){
</span><span style="color: #008080;">2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run( ){
</span><span style="color: #008080;">3</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">执行耗时操作</span>
<span style="color: #008080;">4</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">5</span> }).start( );</span></pre>
</div>
<p><span style="font-size: 16px;">2、Android不允许在子线程中更新UI，只能在主线程中更新。</span></p>
<p>&nbsp;</p>
<div><span style="font-size: 16px;"><strong>（三）异步消息处理</strong></span></div>
<div><span style="font-size: 16px;">1、不直接在子线程中进行UI操作，而是在子线程中通过Handler将Message传送给主线程，主线程中的Handler接收这个message，然后进行UI操作，这叫异步消息处理。</span></div>
<div><span style="font-size: 16px;">2、异步消息处理四步曲：</span></div>
<div><span style="font-size: 16px;">（1）在主线程中创建一个Handler类型的类成员变量对象，并重写handleMessage方法，用于处理相应事件：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">private</span> Handler handler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Handler( ){
</span><span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleMessage(Message msg){
</span><span style="color: #008080;"> 3</span>                 <span style="color: #0000ff;">switch</span>(msg.what){        <span style="color: #008000;">//</span><span style="color: #008000;">msg的what字段是一个标志字段，整型</span>
<span style="color: #008080;"> 4</span>                         <span style="color: #0000ff;">case</span><span style="color: #000000;"> xxx:
</span><span style="color: #008080;"> 5</span>                                 <span style="color: #008000;">//</span><span style="color: #008000;">在这里可以进行UI操作</span>
<span style="color: #008080;"> 6</span>                                 textView.setText("Change text succeed!")        <span style="color: #008000;">//</span><span style="color: #008000;">改变textView的字符</span>
<span style="color: #008080;"> 7</span>                                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 8</span>                         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;"> 9</span>                                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">12</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">（2）在子线程中需要进行UI操作时（如按钮点击事件中），创建一个Message对象，并通过Handler对象的sendMessage方法将该消息发送出去，比如：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> UPDATE_TEXT = 1;        <span style="color: #008000;">//</span><span style="color: #008000;">修改UI的标志值</span>
<span style="color: #008080;"> 2</span> <span style="color: #000000;">......
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">@Override
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v){
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;">(v.getId( )){
</span><span style="color: #008080;"> 6</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.chage_text_btn:
</span><span style="color: #008080;"> 7</span>                         <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable( ){
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">                                @Override
</span><span style="color: #008080;"> 9</span>                                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run( ){
</span><span style="color: #008080;">10</span>                                         Message msg = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Message( );
</span><span style="color: #008080;">11</span>                                         msg.what =<span style="color: #000000;"> UPDATE_TEXT ;
</span><span style="color: #008080;">12</span> <span style="color: #000000;">                                        handler.sendMessage(msg);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">                                }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">                        }).start( );
</span><span style="color: #008080;">15</span>                         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">16</span>                 
<span style="color: #008080;">17</span>                 <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">18</span>                         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">20</span> }</span></pre>
</div>
<div><span style="font-size: 16px;">（3）发出的Message进入MessageQueue队列等待处理。</span></div>
<div><span style="font-size: 16px;">（4）Looper一直尝试从MessageQueue中取出等待处理的消息，最后分发回handleMessage方法。</span></div>
<div><span style="font-size: 16px;">注：Message有一个what字段，可以携带标志识别信息（整型），还有arg1和arg2字段，可以携带整型数据，还有一个obj字段可以带一个Object对象。</span></div>
<div><span style="font-size: 16px;">3、异步消息处理机制示意图：</span></div>
<div><span style="font-size: 16px;"><img style="display: block; margin-left: auto; margin-right: auto;" src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160323111828745-1240913088.png" alt="" /></span></div>
<p><span style="font-size: 16px;">&nbsp;</span></p>
<div><span style="font-size: 16px;"><strong>（四）AsyncTask</strong></span></div>
<div><span style="font-size: 16px;">1、AsyncTask类是Android对异步消息处理的封装。</span></div>
<div><span style="font-size: 16px;">2、使用AsyncTask需要自定义一个类去继承它：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">class</span> MyAsyncTask <span style="color: #0000ff;">extends</span> AsyncTask&lt;Params, Progress, Result&gt;</span></pre>
</div>
<div><span style="font-size: 16px;">三个泛型的含义：</span></div>
<div><span style="font-size: 16px;">（1）Params：如果在执行AsyncTask时需要传递信息给后台，则传入此参数，如果不需要则为Void。</span></div>
<div><span style="font-size: 16px;">（2）Progress：如果在后台执行任务过程中，需要在界面上显示进程，则使用这个参数作为进程的单位，一般为Integer。</span></div>
<div><span style="font-size: 16px;">（3）Result：后台任务执行完后，如果需要对结果进行返回，则使用这个参数作为返回值的类型，如Boolean。</span></div>
<div>
<div><span style="font-size: 16px;">3、继承时需要实现的几个方法：</span></div>
<div><span style="font-size: 16px;">（1）void onPreExecute( );</span></div>
<div><span style="font-size: 16px;">该方法运行在UI线程中，可以进行UI的初始化等操作。</span></div>
<div><span style="font-size: 16px;">（2）boolean doInBackground(Void... params);</span></div>
<div><span style="font-size: 16px;">该方法的所有代码都在子线程中运行，在该方法中处理耗时任务，需要调用publicProgress(Progress)方法传递进度。</span></div>
<div><span style="font-size: 16px;">（3）void onProgressUpdate(Integer... values);</span></div>
<div><span style="font-size: 16px;">当在doInBackground中调用publicProgress方法时，会自动调用此方法，在这里进行UI操作。</span></div>
<div><span style="font-size: 16px;">（4）void onPostExecute(Boolean result);</span></div>
<div><span style="font-size: 16px;">执行收尾工作。</span></div>
<div><span style="font-size: 16px;">4、要启用MyAsyncTask，在主线程中这样用：new&nbsp;MyAsyncTask.execute( );</span></div>
<div><span style="font-size: 16px;">&nbsp;</span></div>
</div>
</div>
</div>
<p><span style="font-size: 16px;"><strong>（五）Service</strong></span></p>
<p><span style="font-size: 16px;">1、定义Service：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyService <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Service {
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> IBinder onBind(Intent intent) {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate() {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate();
</span><span style="color: #008080;">10</span>         Log.d("MyService", "onCreate executed"<span style="color: #000000;">);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> onStartCommand(Intent intent, <span style="color: #0000ff;">int</span> flags, <span style="color: #0000ff;">int</span><span style="color: #000000;"> startId) {
</span><span style="color: #008080;">15</span>         Log.d("MyService", "onStartCommand executed"<span style="color: #000000;">);
</span><span style="color: #008080;">16</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">super</span><span style="color: #000000;">.onStartCommand(intent, flags, startId);
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">20</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">21</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">22</span>         Log.d("MyService", "onDestroy executed"<span style="color: #000000;">);
</span><span style="color: #008080;">23</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">24</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">2、Service类中有一个抽象方法onBind，还有三个常用方法：</span></p>
<div><span style="font-size: 16px;">（1）onCreate( )：会在Service创建时调用。</span></div>
<div><span style="font-size: 16px;">（2）onStartCommand( )：会在Service启动时调用。</span></div>
<div><span style="font-size: 16px;">（3）onDestory( )：在Service销毁时调用。</span></div>
<div><span style="font-size: 16px;">3、Service需要在AndroidManifest.xml中注册。</span></div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">application
</span><span style="color: #008080;">2</span>         <span style="color: #ff0000;">... </span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">service </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">=".MyService"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">service</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> <span style="color: #000000;">        ...
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">application</span><span style="color: #0000ff;">&gt;</span></span></pre>
</div>
<div><span style="font-size: 16px;">4、启动和停止Service：</span></div>
<div><span style="font-size: 16px;">（1）启动：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> Intent startIntent = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, MyService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> startService(startIntent);</span></pre>
</div>
<p><span style="font-size: 16px;">（2）停止：</span></p>
</div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> Intent stopIntent = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, MyService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> stopService(stopIntent);</span></pre>
</div>
<p><span style="font-size: 16px;">5、Activity和Service通信：</span></p>
<p><span style="font-size: 16px;">（1）在Service中安插内线Binder，并在onBind方法中发送这个内线：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyService <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Service {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> DownloadBinder mBinder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadBinder();
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">class</span> DownloadBinder <span style="color: #0000ff;">extends</span> Binder {    <span style="color: #008000;">//</span><span style="color: #008000;">自定义Binder，模拟下载功能</span>
<span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> startDownload() {
</span><span style="color: #008080;"> 7</span>             Log.d("MyService", "startDownload executed"<span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getProgress() {
</span><span style="color: #008080;">11</span>             Log.d("MyService", "getProgress executed"<span style="color: #000000;">);
</span><span style="color: #008080;">12</span>             <span style="color: #0000ff;">return</span> 0<span style="color: #000000;">;
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span>     
<span style="color: #008080;">16</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> IBinder onBind(Intent intent) {
</span><span style="color: #008080;">18</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> mBinder;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span>     ...    <span style="color: #008000;">//</span><span style="color: #008000;">其他方法</span>
<span style="color: #008080;">21</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">（2）在Activity中创建内线及ServiceConnection，其中的onServiceConnected方法即可接收内线IBinder并通过向下转型获取Binder：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #000000;">  ...
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> MyService.DownloadBinder downloadBinder;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> ServiceConnection connection = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServiceConnection() {
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onServiceConnected(ComponentName name, IBinder service) {
</span><span style="color: #008080;"> 6</span>             downloadBinder =<span style="color: #000000;"> (MyService.DownloadBinder) service;
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">            downloadBinder.startDownload();
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">            downloadBinder.getProgress();
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onServiceDisconnected(ComponentName name) {
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">        };
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">16</span>     ...</span></pre>
</div>
<p><span style="font-size: 16px;">（3）在合适的时候（如按钮的点击事件等）绑定Activity与Service：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> Intent bindIntent = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, MyService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> bindService(bindIntent, connection, BIND_AUTO_CREATE);    <span style="color: #008000;">//</span><span style="color: #008000;">BIND_AUTO_CREATE指当绑定后，自动创建Service</span></span></pre>
</div>
<p><span style="font-size: 16px;">（4）解除绑定：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span>(connection != <span style="color: #0000ff;">null</span><span style="color: #000000;">){
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    unbindService(connection);
</span><span style="color: #008080;">3</span> }</span></pre>
</div>
<div><span style="font-size: 16px;">6、Service的生命周期：</span></div>
<div><span style="font-size: 16px;">（1）每个Service都只会存在一个实例。</span></div>
<div>
<div><span style="font-size: 16px;">（2）方法：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #000000;">startService( )
</span><span style="color: #008080;">2</span> <span style="color: #000000;">onCreate( )
</span><span style="color: #008080;">3</span> <span style="color: #000000;">onStartCommand( )
</span><span style="color: #008080;">4</span> <span style="color: #000000;">onDestory( )
</span><span style="color: #008080;">5</span> <span style="color: #000000;">bindService( )
</span><span style="color: #008080;">6</span> <span style="color: #000000;">unbindService( )
</span><span style="color: #008080;">7</span> <span style="color: #000000;">stopService( )
</span><span style="color: #008080;">8</span> stopSelf( )    <span style="color: #008000;">//</span><span style="color: #008000;">在Service中任何地方都可以用这个方法结束服务本身</span>
<span style="color: #008080;">9</span> onBind( )</span></pre>
</div>
<p><span style="font-size: 16px;">（3）如果startService( )和bindService( )都调用了，那么必须同时满足unbindService( )和stopService( )都被调用才会执行onDestory( )方法。</span></p>
<p><span style="font-size: 16px;">7、前台Service：在系统状态栏中一直显示的可见Service，只需在Service的onCreate方法中添加如下代码即可（其实是通知的用法）：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> 　　<span style="color: #000000;">@Override
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate() {
</span><span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate();
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">        ...
</span><span style="color: #008080;"> 5</span>         Notification notification = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Notification(R.drawable.ic_launcher,
</span><span style="color: #008080;"> 6</span>                 "Notification comes"<span style="color: #000000;">, System.currentTimeMillis());
</span><span style="color: #008080;"> 7</span>         Intent notificationIntent = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, MainActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span>         PendingIntent pendingIntent = PendingIntent.getActivity(<span style="color: #0000ff;">this</span>, 0<span style="color: #000000;">,
</span><span style="color: #008080;"> 9</span>                 notificationIntent, 0<span style="color: #000000;">);
</span><span style="color: #008080;">10</span>         notification.setLatestEventInfo(<span style="color: #0000ff;">this</span>, "This is title"<span style="color: #000000;">,
</span><span style="color: #008080;">11</span>                 "This is content"<span style="color: #000000;">, pendingIntent);
</span><span style="color: #008080;">12</span>         startForeground(1<span style="color: #000000;">, notification);
</span><span style="color: #008080;">13</span>     }</span></pre>
</div>
<p><span style="font-size: 16px;">8、IntentService：</span></p>
<p><span style="font-size: 16px;">　　服务的代码默认都是在主线程中的，如果直接在服务里去处理一些耗时逻辑，就很容易出现ANR(Application Not Responding)的情况。这时就可以方便的使用已经把多线程封装好的IntentService类：</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyIntentService <span style="color: #0000ff;">extends</span><span style="color: #000000;"> IntentService {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> MyIntentService() {        <span style="color: #008000;">//</span><span style="color: #008000;">需要一个无参的构造方法，调用父类的有参构造方法</span>
<span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">super</span>("MyIntentService"<span style="color: #000000;">);
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> onHandleIntent(Intent intent) {    <span style="color: #008000;">//</span><span style="color: #008000;">这个方法默认在子线程中运行
</span><span style="color: #008080;"> 9</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 打印当前线程ID</span>
<span style="color: #008080;">10</span>         Log.d("MyIntentService", "Thread id is "
<span style="color: #008080;">11</span>                 +<span style="color: #000000;"> Thread.currentThread().getId());
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 在这里已经是在子线程中运行了，可以执行一些耗时操作，但不能执行UI操作</span>
<span style="color: #008080;">14</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">15</span>             Thread.sleep(1000<span style="color: #000000;">);
</span><span style="color: #008080;">16</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
</span><span style="color: #008080;">17</span> <span style="color: #000000;">            e.printStackTrace();
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {
</span><span style="color: #008080;">23</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();
</span><span style="color: #008080;">24</span>         Log.d("MyIntentService", "onDestroy executed"<span style="color: #000000;">);
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">　　IntentService在任务处理完后，会自动调用onDestory方法，不用再去人工调用unbindService或stopService方法。其他用法和普通Service一样。</span></p>
</div>
</div>
<p><span style="font-size: 16px;">&nbsp;</span></p>
<span style="font-size: 16px;">&nbsp;</span><span style="font-size: 16px;"><strong>（六）Service最佳实践：后台定时任务</strong></span>
<div><span style="font-size: 16px;">1、Android中的定时任务实现方式有两种：Java API的Timer类和Android的Alarm机制。前者会受CPU休眠的影响，后者会唤醒CPU。</span></div>
<div><span style="font-size: 16px;">2、首先创建一个LongRunningService服务，重写其onStartCommand方法，在这里面执行定时任务：</span></div>
</div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Date;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.AlarmManager;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.PendingIntent;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Service;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.IBinder;
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.SystemClock;
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> LongRunningService <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Service {
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> IBinder onBind(Intent intent) {
</span><span style="color: #008080;">15</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">19</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> onStartCommand(Intent intent, <span style="color: #0000ff;">int</span> flags, <span style="color: #0000ff;">int</span><span style="color: #000000;"> startId) {
</span><span style="color: #008080;">20</span>         <span style="color: #008000;">//</span><span style="color: #008000;">创建子线程打印当前时间，模拟定时任务</span>
<span style="color: #008080;">21</span>         <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {
</span><span style="color: #008080;">22</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">23</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
</span><span style="color: #008080;">24</span>                 Log.d("LongRunningService"<span style="color: #000000;">,
</span><span style="color: #008080;">25</span>                         "executed at " + <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date().toString());
</span><span style="color: #008080;">26</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">27</span> <span style="color: #000000;">        }).start();
</span><span style="color: #008080;">28</span>         <span style="color: #008000;">//</span><span style="color: #008000;">1.创建AlarmManager </span>
<span style="color: #008080;">29</span>         AlarmManager manager =<span style="color: #000000;"> (AlarmManager) getSystemService(ALARM_SERVICE);
</span><span style="color: #008080;">30</span>         <span style="color: #0000ff;">int</span> aMinute = 60 * 1000; <span style="color: #008000;">//</span><span style="color: #008000;"> 一分钟的毫秒数</span>
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">long</span> triggerAtTime = SystemClock.elapsedRealtime() +<span style="color: #000000;"> aMinute;
</span><span style="color: #008080;">32</span>         <span style="color: #008000;">//</span><span style="color: #008000;">2.创建跳到广播接收器的Intent</span>
<span style="color: #008080;">33</span>         Intent i = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, AlarmReceiver.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">34</span>         <span style="color: #008000;">//</span><span style="color: #008000;">3.创建PendingIntent </span>
<span style="color: #008080;">35</span>         PendingIntent pi = PendingIntent.getBroadcast(<span style="color: #0000ff;">this</span>, 0, i, 0<span style="color: #000000;">);
</span><span style="color: #008080;">36</span>         <span style="color: #008000;">//</span><span style="color: #008000;">4.使用AlarmManager的set方法
</span><span style="color: #008080;">37</span>         <span style="color: #008000;">//</span><span style="color: #008000;">第一个参数：指定工作类型，有四种：ELAPSED_REALTIME_WAKEUP表示定时任务触发时间从
</span><span style="color: #008080;">38</span>         <span style="color: #008000;">//</span><span style="color: #008000;">系统开机算起，会唤醒CPU；ELAPSED_REALTIME，同ELAPSED_REALTIME_WAKEUP，但不会唤醒CPU；
</span><span style="color: #008080;">39</span>         <span style="color: #008000;">//</span><span style="color: #008000;">RTC表示从1970-1-1 00:00算起，不会唤醒CPU，RTC_WAKEUP同RTC，但会唤醒CPU。
</span><span style="color: #008080;">40</span>         <span style="color: #008000;">//</span><span style="color: #008000;">注：唤醒CPU和唤醒屏幕是不同的概念。</span>
<span style="color: #008080;">41</span> <span style="color: #000000;">        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime, pi);
</span><span style="color: #008080;">42</span>         
<span style="color: #008080;">43</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">super</span><span style="color: #000000;">.onStartCommand(intent, flags, startId);
</span><span style="color: #008080;">44</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">45</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">3、创建AlarmReceiver类：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.BroadcastReceiver;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AlarmReceiver <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BroadcastReceiver {
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {
</span><span style="color: #008080;"> 9</span>         Intent i = <span style="color: #0000ff;">new</span> Intent(context, LongRunningService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">10</span>         context.startService(i);    <span style="color: #008000;">//</span><span style="color: #008000;">反过来再启动服务，交替循环进行下去</span>
<span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">4、在活动中启动服务：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px;"><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 4</span>  
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {
</span><span style="color: #008080;"> 6</span>  
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;">11</span>  
<span style="color: #008080;">12</span>         Intent i = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, LongRunningService.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        startService(i);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span> }</span></pre>
</div>
<p><span style="font-size: 16px;">5、在AndroidManifest.xml中注册服务和广播接收器。</span></p>
<div><span style="font-size: 16px;">6、分析：刚刚创建的这个定时任务，会每隔一分钟执行一次。</span></div>
<p style="text-align: center;"><span style="font-size: 16px;">&nbsp;<strong>【本章结束】</strong></span></p>
</div>
</div>]]></description></item><item><title>科大讯飞开放平台——语音听写接口的使用</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/21/5300563.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Mon, 21 Mar 2016 01:11:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/21/5300563.html</guid><description><![CDATA[<p>　　最近在做毕设项目中，要用到一个语音识别的功能，主要目的是把用户说的话转换成文字，然后再做其他处理。找了多个语音识别的第三方SDK，比如百度语音识别、微信语音识别、科大讯飞语音识别，发现科大讯飞的比较好用。做了一个Demo程序，有详细的注释，在这里整理一下。</p>
<p>　　<strong>（一）准备工作</strong></p>
<p>　　0、创建一个空的Android项目，比如项目名叫：SpeechRecognitionDemoJYJ。</p>
<p>　　1、首先要在科大讯飞开放平台（<a href="http://www.xfyun.cn/">http://www.xfyun.cn/</a>）上注册，或者用QQ等第三方登录也行。</p>
<p>　　2、点击网站首页右上角的&ldquo;控制台&rdquo;，进入控制台。</p>
<p>　　3、按照说明创建一个应用，该应用名就叫SpeechRecognitionDemoJYJ，创建成功后会有一个AppID，记下来，编程的时候要用到。</p>
<p>　　4、点击SpeechRecognitionDemoJYJ后面的&ldquo;开通服务&rdquo;按钮，开通服务&mdash;&gt;语音听写，进入语音听写&mdash;&gt;下载当前应用对应的SDK。</p>
<p>　　5、下载Android版的SDK，将SDK包中<span lang="EN-US">libs目录下的<span lang="EN-US">Msc.jar和<span lang="EN-US">armeabi复制到<span lang="EN-US">Android工程的<span lang="EN-US">libs目录（如果工程无<span lang="EN-US">libs目录，请自行创建）中，并且因为还要用到语音听写Dialog，所以还要把SDK包中assets目录下的iflytek文件夹复制到工程的assets目录下，如下图所示。还要注意，每个不同的应用都要申请不同的AppID，并且要分别下载不同AppID对应的SDK，否则会出错。</span></span></span></span></span></span></p>
<p style="text-align: center;"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160328100957644-1501954520.png" alt="" /></span></span></span></span></span></span></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: left;">　　6、其他更详细的说明和资料可以参看讯飞开放平台的资料库（<a href="http://www.xfyun.cn/doccenter">http://www.xfyun.cn/doccenter</a>）。</p>
<p>&nbsp;</p>
<p>　　<strong>（二）开发</strong></p>
<p>　　Demo实现的功能很简单，就是点击一个按钮，弹出语音识别Dialog窗口，说话，说完了点击Dialog窗口后会把自动识别的文字结果显示在下方的EditText中。服务器返回的语音听写的结果是Json格式数据，最后还要对Json数据进行解析（具体解析方法参看我的这篇文章：<a href="http://www.cnblogs.com/jiayongji/p/5297187.html">用GSON解析Json格式数据</a>），解析出语音字符串。</p>
<p>　　1、XML代码：</p>
<p>　　界面中有一个按钮，一个TextView和一个EditText，EditText用于显示语音识别的结果。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">LinearLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">="http://schemas.android.com/apk/res/android"</span>
<span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:orientation</span><span style="color: #0000ff;">="vertical"</span> <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Button
</span><span style="color: #008080;"> 7</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/listen_btn"</span>
<span style="color: #008080;"> 8</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;"> 9</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">10</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="开始说话"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextView
</span><span style="color: #008080;">13</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/task_tv"</span>
<span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">15</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">16</span> <span style="color: #ff0000;">        android:layout_margin</span><span style="color: #0000ff;">="20dp"</span>
<span style="color: #008080;">17</span> <span style="color: #ff0000;">        android:text</span><span style="color: #0000ff;">="日程安排："</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">EditText
</span><span style="color: #008080;">20</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">="@+id/content_et"</span>
<span style="color: #008080;">21</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">="match_parent"</span>
<span style="color: #008080;">22</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">="wrap_content"</span>
<span style="color: #008080;">23</span> <span style="color: #ff0000;">        android:background</span><span style="color: #0000ff;">="@android:drawable/editbox_dropdown_light_frame"</span>
<span style="color: #008080;">24</span> <span style="color: #ff0000;">        android:cursorVisible</span><span style="color: #0000ff;">="true"</span>
<span style="color: #008080;">25</span> <span style="color: #ff0000;">        android:enabled</span><span style="color: #0000ff;">="true"</span>
<span style="color: #008080;">26</span> <span style="color: #ff0000;">        android:gravity</span><span style="color: #0000ff;">="top"</span>
<span style="color: #008080;">27</span> <span style="color: #ff0000;">        android:visibility</span><span style="color: #0000ff;">="visible"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">28</span> 
<span style="color: #008080;">29</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">LinearLayout</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、MainActivity</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.lang.reflect.Type;
</span><span style="color: #008080;">  2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;
</span><span style="color: #008080;">  3</span> 
<span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.example.speechrecognition.DictationResult;
</span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.Gson;
</span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.reflect.TypeToken;
</span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.RecognizerListener;
</span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.RecognizerResult;
</span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechConstant;
</span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechError;
</span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechRecognizer;
</span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.SpeechUtility;
</span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.ui.RecognizerDialog;
</span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.iflytek.cloud.ui.RecognizerDialogListener;
</span><span style="color: #008080;"> 15</span> 
<span style="color: #008080;"> 16</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;
</span><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;
</span><span style="color: #008080;"> 18</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;
</span><span style="color: #008080;"> 19</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Handler;
</span><span style="color: #008080;"> 20</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Message;
</span><span style="color: #008080;"> 21</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;
</span><span style="color: #008080;"> 22</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.Menu;
</span><span style="color: #008080;"> 23</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MenuItem;
</span><span style="color: #008080;"> 24</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;
</span><span style="color: #008080;"> 25</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View.OnClickListener;
</span><span style="color: #008080;"> 26</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.inputmethod.InputMethodManager;
</span><span style="color: #008080;"> 27</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Button;
</span><span style="color: #008080;"> 28</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.EditText;
</span><span style="color: #008080;"> 29</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.TextView;
</span><span style="color: #008080;"> 30</span> 
<span style="color: #008080;"> 31</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> OnClickListener {
</span><span style="color: #008080;"> 32</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> String APPID = "569e39a1"<span style="color: #000000;">;
</span><span style="color: #008080;"> 33</span> 
<span style="color: #008080;"> 34</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Button listenBtn;
</span><span style="color: #008080;"> 35</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> EditText contentEt;
</span><span style="color: #008080;"> 36</span> 
<span style="color: #008080;"> 37</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 听写结果字符串（多个Json的列表字符串）</span>
<span style="color: #008080;"> 38</span>     <span style="color: #0000ff;">private</span> String dictationResultStr = "["<span style="color: #000000;">;
</span><span style="color: #008080;"> 39</span> 
<span style="color: #008080;"> 40</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 41</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {
</span><span style="color: #008080;"> 42</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);
</span><span style="color: #008080;"> 43</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);
</span><span style="color: #008080;"> 44</span> 
<span style="color: #008080;"> 45</span>         listenBtn =<span style="color: #000000;"> (Button) findViewById(R.id.listen_btn);
</span><span style="color: #008080;"> 46</span>         contentEt =<span style="color: #000000;"> (EditText) findViewById(R.id.content_et);
</span><span style="color: #008080;"> 47</span> 
<span style="color: #008080;"> 48</span>         listenBtn.setOnClickListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 49</span> 
<span style="color: #008080;"> 50</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 51</span> 
<span style="color: #008080;"> 52</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;"> 53</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {
</span><span style="color: #008080;"> 54</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (v.getId()) {
</span><span style="color: #008080;"> 55</span>         <span style="color: #0000ff;">case</span><span style="color: #000000;"> R.id.listen_btn:
</span><span style="color: #008080;"> 56</span> 
<span style="color: #008080;"> 57</span>             dictationResultStr = "["<span style="color: #000000;">;
</span><span style="color: #008080;"> 58</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 语音配置对象初始化</span>
<span style="color: #008080;"> 59</span>             SpeechUtility.createUtility(MainActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">, SpeechConstant.APPID
</span><span style="color: #008080;"> 60</span>                     + "=" +<span style="color: #000000;"> APPID);
</span><span style="color: #008080;"> 61</span> 
<span style="color: #008080;"> 62</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 1.创建SpeechRecognizer对象，第2个参数：本地听写时传InitListener</span>
<span style="color: #008080;"> 63</span>             SpeechRecognizer mIat =<span style="color: #000000;"> SpeechRecognizer.createRecognizer(
</span><span style="color: #008080;"> 64</span>                     MainActivity.<span style="color: #0000ff;">this</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 65</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 交互动画</span>
<span style="color: #008080;"> 66</span>             RecognizerDialog iatDialog = <span style="color: #0000ff;">new</span><span style="color: #000000;"> RecognizerDialog(
</span><span style="color: #008080;"> 67</span>                     MainActivity.<span style="color: #0000ff;">this</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 68</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 2.设置听写参数，详见《科大讯飞MSC API手册(Android)》SpeechConstant类</span>
<span style="color: #008080;"> 69</span>             mIat.setParameter(SpeechConstant.DOMAIN, "iat"); <span style="color: #008000;">//</span><span style="color: #008000;"> domain:域名</span>
<span style="color: #008080;"> 70</span>             mIat.setParameter(SpeechConstant.LANGUAGE, "zh_cn"<span style="color: #000000;">);
</span><span style="color: #008080;"> 71</span>             mIat.setParameter(SpeechConstant.ACCENT, "mandarin"); <span style="color: #008000;">//</span><span style="color: #008000;"> mandarin:普通话
</span><span style="color: #008080;"> 72</span>             
<span style="color: #008080;"> 73</span>             <span style="color: #008000;">//</span><span style="color: #008000;">3.开始听写</span>
<span style="color: #008080;"> 74</span>             iatDialog.setListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> RecognizerDialogListener() {
</span><span style="color: #008080;"> 75</span> 
<span style="color: #008080;"> 76</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;"> 77</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onResult(RecognizerResult results, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> isLast) {
</span><span style="color: #008080;"> 78</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> TODO 自动生成的方法存根
</span><span style="color: #008080;"> 79</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> Log.d("Result", results.getResultString());
</span><span style="color: #008080;"> 80</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> contentTv.setText(results.getResultString());</span>
<span style="color: #008080;"> 81</span>                     <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">isLast) {
</span><span style="color: #008080;"> 82</span>                         dictationResultStr += results.getResultString() + ","<span style="color: #000000;">;
</span><span style="color: #008080;"> 83</span>                     } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 84</span>                         dictationResultStr += results.getResultString() + "]"<span style="color: #000000;">;
</span><span style="color: #008080;"> 85</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;"> 86</span>                     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isLast) {
</span><span style="color: #008080;"> 87</span>                         <span style="color: #008000;">//</span><span style="color: #008000;"> 解析Json列表字符串</span>
<span style="color: #008080;"> 88</span>                         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;"> 89</span>                         List&lt;DictationResult&gt; dictationResultList =<span style="color: #000000;"> gson
</span><span style="color: #008080;"> 90</span> <span style="color: #000000;">                                .fromJson(dictationResultStr,
</span><span style="color: #008080;"> 91</span>                                         <span style="color: #0000ff;">new</span> TypeToken&lt;List&lt;DictationResult&gt;&gt;<span style="color: #000000;">() {
</span><span style="color: #008080;"> 92</span> <span style="color: #000000;">                                        }.getType());
</span><span style="color: #008080;"> 93</span>                         String finalResult = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 94</span>                         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; dictationResultList.size() - 1; i++<span style="color: #000000;">) {
</span><span style="color: #008080;"> 95</span>                             finalResult +=<span style="color: #000000;"> dictationResultList.get(i)
</span><span style="color: #008080;"> 96</span> <span style="color: #000000;">                                    .toString();
</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 98</span> <span style="color: #000000;">                        contentEt.setText(finalResult);
</span><span style="color: #008080;"> 99</span>                         
<span style="color: #008080;">100</span>                         <span style="color: #008000;">//</span><span style="color: #008000;">获取焦点</span>
<span style="color: #008080;">101</span> <span style="color: #000000;">                        contentEt.requestFocus();
</span><span style="color: #008080;">102</span>                         
<span style="color: #008080;">103</span>                         <span style="color: #008000;">//</span><span style="color: #008000;">将光标定位到文字最后，以便修改</span>
<span style="color: #008080;">104</span> <span style="color: #000000;">                        contentEt.setSelection(finalResult.length());
</span><span style="color: #008080;">105</span>                         
<span style="color: #008080;">106</span>                         Log.d("From reall phone"<span style="color: #000000;">, finalResult);
</span><span style="color: #008080;">107</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">108</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">109</span> 
<span style="color: #008080;">110</span> <span style="color: #000000;">                @Override
</span><span style="color: #008080;">111</span>                 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onError(SpeechError error) {
</span><span style="color: #008080;">112</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> TODO 自动生成的方法存根</span>
<span style="color: #008080;">113</span>                     error.getPlainDescription(<span style="color: #0000ff;">true</span><span style="color: #000000;">);
</span><span style="color: #008080;">114</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">115</span> <span style="color: #000000;">            });
</span><span style="color: #008080;">116</span> 
<span style="color: #008080;">117</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 开始听写</span>
<span style="color: #008080;">118</span> <span style="color: #000000;">            iatDialog.show();
</span><span style="color: #008080;">119</span> 
<span style="color: #008080;">120</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">121</span>         <span style="color: #0000ff;">default</span><span style="color: #000000;">:
</span><span style="color: #008080;">122</span>             <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">123</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">124</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">125</span> }</pre>
</div>
<p>　　3、自定义的com.example.speechrecognition.DictationResult类的代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;
</span><span style="color: #008080;">  2</span> 
<span style="color: #008080;">  3</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;">  4</span> <span style="color: #008000;"> * 解析语音听写返回结果Json格式字符串的模板类（多重嵌套Json）
</span><span style="color: #008080;">  5</span> <span style="color: #008000;"> * 
</span><span style="color: #008080;">  6</span> <span style="color: #008000;"> * 语音识别结果Json数据格式（单条数据）：
</span><span style="color: #008080;">  7</span> <span style="color: #008000;"> * {"sn":1,"ls":true,"bg":0,"ed":0,"ws":[{"bg":0,"cw":[{"w":"今天","sc":0}]},
</span><span style="color: #008080;">  8</span> <span style="color: #008000;"> * {"bg":0,"cw":{"w":"的","sc":0}]},{"bg":0,"cw":[{"w":"天气","sc":0}]},
</span><span style="color: #008080;">  9</span> <span style="color: #008000;"> * {"bg":0,"cw":[{"w":"怎么样","sc":0}]},{"bg":0,"cw":[{"w":"。","sc":0}]}]}
</span><span style="color: #008080;"> 10</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DictationResult {
</span><span style="color: #008080;"> 12</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String sn;
</span><span style="color: #008080;"> 13</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String ls;
</span><span style="color: #008080;"> 14</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String bg;
</span><span style="color: #008080;"> 15</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String ed;
</span><span style="color: #008080;"> 16</span> 
<span style="color: #008080;"> 17</span>     <span style="color: #0000ff;">private</span> List&lt;Words&gt;<span style="color: #000000;"> ws;
</span><span style="color: #008080;"> 18</span> 
<span style="color: #008080;"> 19</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Words {
</span><span style="color: #008080;"> 20</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String bg;
</span><span style="color: #008080;"> 21</span>         <span style="color: #0000ff;">private</span> List&lt;Cw&gt;<span style="color: #000000;"> cw;
</span><span style="color: #008080;"> 22</span> 
<span style="color: #008080;"> 23</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Cw {
</span><span style="color: #008080;"> 24</span>             <span style="color: #0000ff;">private</span><span style="color: #000000;"> String w;
</span><span style="color: #008080;"> 25</span>             <span style="color: #0000ff;">private</span><span style="color: #000000;"> String sc;
</span><span style="color: #008080;"> 26</span> 
<span style="color: #008080;"> 27</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getW() {
</span><span style="color: #008080;"> 28</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> w;
</span><span style="color: #008080;"> 29</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 30</span> 
<span style="color: #008080;"> 31</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setW(String w) {
</span><span style="color: #008080;"> 32</span>                 <span style="color: #0000ff;">this</span>.w =<span style="color: #000000;"> w;
</span><span style="color: #008080;"> 33</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 34</span> 
<span style="color: #008080;"> 35</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getSc() {
</span><span style="color: #008080;"> 36</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> sc;
</span><span style="color: #008080;"> 37</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 38</span> 
<span style="color: #008080;"> 39</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setSc(String sc) {
</span><span style="color: #008080;"> 40</span>                 <span style="color: #0000ff;">this</span>.sc =<span style="color: #000000;"> sc;
</span><span style="color: #008080;"> 41</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 42</span> 
<span style="color: #008080;"> 43</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;"> 44</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;"> 45</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> w;
</span><span style="color: #008080;"> 46</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 47</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 48</span> 
<span style="color: #008080;"> 49</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getBg() {
</span><span style="color: #008080;"> 50</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> bg;
</span><span style="color: #008080;"> 51</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 52</span> 
<span style="color: #008080;"> 53</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setBg(String bg) {
</span><span style="color: #008080;"> 54</span>             <span style="color: #0000ff;">this</span>.bg =<span style="color: #000000;"> bg;
</span><span style="color: #008080;"> 55</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 56</span> 
<span style="color: #008080;"> 57</span>         <span style="color: #0000ff;">public</span> List&lt;Cw&gt;<span style="color: #000000;"> getCw() {
</span><span style="color: #008080;"> 58</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> cw;
</span><span style="color: #008080;"> 59</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 60</span> 
<span style="color: #008080;"> 61</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setCw(List&lt;Cw&gt;<span style="color: #000000;"> cw) {
</span><span style="color: #008080;"> 62</span>             <span style="color: #0000ff;">this</span>.cw =<span style="color: #000000;"> cw;
</span><span style="color: #008080;"> 63</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 64</span> 
<span style="color: #008080;"> 65</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;"> 66</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;"> 67</span>             String result = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 68</span>             <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Cw cwTmp : cw) {
</span><span style="color: #008080;"> 69</span>                 result +=<span style="color: #000000;"> cwTmp.toString();
</span><span style="color: #008080;"> 70</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 71</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;"> 72</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 73</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 74</span> 
<span style="color: #008080;"> 75</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getSn() {
</span><span style="color: #008080;"> 76</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> sn;
</span><span style="color: #008080;"> 77</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 78</span> 
<span style="color: #008080;"> 79</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setSn(String sn) {
</span><span style="color: #008080;"> 80</span>         <span style="color: #0000ff;">this</span>.sn =<span style="color: #000000;"> sn;
</span><span style="color: #008080;"> 81</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 82</span> 
<span style="color: #008080;"> 83</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getLs() {
</span><span style="color: #008080;"> 84</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> ls;
</span><span style="color: #008080;"> 85</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 86</span> 
<span style="color: #008080;"> 87</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setLs(String ls) {
</span><span style="color: #008080;"> 88</span>         <span style="color: #0000ff;">this</span>.ls =<span style="color: #000000;"> ls;
</span><span style="color: #008080;"> 89</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 90</span> 
<span style="color: #008080;"> 91</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getBg() {
</span><span style="color: #008080;"> 92</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> bg;
</span><span style="color: #008080;"> 93</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 94</span> 
<span style="color: #008080;"> 95</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setBg(String bg) {
</span><span style="color: #008080;"> 96</span>         <span style="color: #0000ff;">this</span>.bg =<span style="color: #000000;"> bg;
</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 98</span> 
<span style="color: #008080;"> 99</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getEd() {
</span><span style="color: #008080;">100</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> ed;
</span><span style="color: #008080;">101</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">102</span> 
<span style="color: #008080;">103</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setEd(String ed) {
</span><span style="color: #008080;">104</span>         <span style="color: #0000ff;">this</span>.ed =<span style="color: #000000;"> ed;
</span><span style="color: #008080;">105</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">106</span> 
<span style="color: #008080;">107</span>     <span style="color: #0000ff;">public</span> List&lt;Words&gt;<span style="color: #000000;"> getWs() {
</span><span style="color: #008080;">108</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> ws;
</span><span style="color: #008080;">109</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">110</span> 
<span style="color: #008080;">111</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setWs(List&lt;Words&gt;<span style="color: #000000;"> ws) {
</span><span style="color: #008080;">112</span>         <span style="color: #0000ff;">this</span>.ws =<span style="color: #000000;"> ws;
</span><span style="color: #008080;">113</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">114</span> 
<span style="color: #008080;">115</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">116</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">117</span>         String result = ""<span style="color: #000000;">;
</span><span style="color: #008080;">118</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Words wsTmp : ws) {
</span><span style="color: #008080;">119</span>             result +=<span style="color: #000000;"> wsTmp.toString();
</span><span style="color: #008080;">120</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">121</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">122</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">123</span> }</pre>
</div>
<p>　　4、AndroidManifest.xml中申请权限：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　<span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 连接网络权限，用于执行云端语音能力 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.INTERNET"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;"> 3</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 获取手机录音机使用权限，听写、识别、语义理解需要用到此权限  </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.RECORD_AUDIO"</span><span style="color: #0000ff;">/&gt;</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">读取网络信息状态 </span><span style="color: #008000;">--&gt;</span>  
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.ACCESS_NETWORK_STATE"</span><span style="color: #0000ff;">/&gt;</span>  
<span style="color: #008080;"> 7</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">获取当前wifi状态 </span><span style="color: #008000;">--&gt;</span>  
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.ACCESS_WIFI_STATE"</span><span style="color: #0000ff;">/&gt;</span>  
<span style="color: #008080;"> 9</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">允许程序改变网络连接状态 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.CHANGE_NETWORK_STATE"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">11</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">读取手机信息权限 </span><span style="color: #008000;">--&gt;</span>  
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.READ_PHONE_STATE"</span><span style="color: #0000ff;">/&gt;</span>  
<span style="color: #008080;">13</span>     <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">读取联系人权限，上传联系人需要用到此权限 </span><span style="color: #008000;">--&gt;</span>  
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">uses-permission </span><span style="color: #ff0000;">android:name</span><span style="color: #0000ff;">="android.permission.READ_CONTACTS"</span><span style="color: #0000ff;">/&gt;</span>  </pre>
</div>
<p>　　5、测试：模拟器无法打开录音机，是不能在上面测试的，要用真机测试。测试结果如下图：</p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: center;">　<img src="http://images2015.cnblogs.com/blog/760572/201603/760572-20160321090430979-1993941402.png" alt="" /></p>
<p>　</p>
<p>&nbsp;</p>]]></description></item><item><title>Java-json系列（一）：用GSON解析Json格式数据</title><link>http://www.cnblogs.com/jiayongji/archive/2016/03/20/5297187.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sun, 20 Mar 2016 05:15:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2016/03/20/5297187.html</guid><description><![CDATA[<p>　　GSON是谷歌提供的开源库，用来解析Json格式的数据，非常好用。如果要使用GSON的话，则要先下载gson-2.2.4.jar这个文件，如果是在Android项目中使用，则在Android项目的libs目录下添加这个文件即可；如果是在Java项目中，则把gson-2.2.4.jar先添加到当前项目的任意一个包中，然后右键点击这个jar包 -&gt; 构建路径 -&gt; 添加至构建路径。这样准备工作就做好了。</p>
<p>　　<strong>（一）单条无嵌套Json数据的解析</strong></p>
<p>　　比如有如下Json数据：{"name":"John", "age":20}　　//也可以用单引号，写成：{'name':'John', 'age':20}</p>
<p>　　解析该数据步骤如下：</p>
<p>　　1、定义Person类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Person{
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> 　　　　<span style="color: #0000ff;">private</span> String name;  <span style="color: #008000;">//</span><span style="color: #008000;">属性都定义成String类型，并且属性名要和Json数据中的键值对的键名完全一样</span>
<span style="color: #008080;">4</span> 
<span style="color: #008080;">5</span> 　　　　<span style="color: #0000ff;">private</span><span style="color: #000000;"> String age;
</span><span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span> 　　　　...<span style="color: #008000;">//</span><span style="color: #008000;">提供所有属性的getter和setter方法</span>
<span style="color: #008080;">8</span> 
<span style="color: #008080;">9</span> }</pre>
</div>
<p>　　2、创建GSON对象并解析：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> String jsonData = "{\"name\":\"John\", \"age\":20}"<span style="color: #000000;">;　　//注：这里也可以不使用转义字符，而用单引号：<span style="background-color: #f5f5f5; font-family: Courier New;">String jsonData = "{'name':'John', 'age':20}";</span>
</span><span style="color: #008080;">2</span> Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">3</span> Person person = gson.fromJson(jsonData,Person.<span style="color: #0000ff;">class</span>);</pre>
</div>
<p>　　3、然后使用Person对象的getter方法就可以获取到数据了。&nbsp;</p>
<p>　　4、扩展：考虑到Json数据的不同，那么解析Json的时候所用的类也可能不同，比如这里用的是Person，如果解析其他数据可能用的又是Dog、Cat...所以考虑将用GSON解析的步骤封装，并提供泛型参数，示例程序如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.Gson;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 4</span> <span style="color: #008000;"> * 用GSON解析单条Json数据
</span><span style="color: #008080;"> 5</span> <span style="color: #008000;"> *
</span><span style="color: #008080;"> 6</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonTest1 {
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;"> 9</span>         String jsonData = "{'name':'John', 'age':20}"<span style="color: #000000;">;
</span><span style="color: #008080;">10</span>         Person person = GsonUtil.parseJsonWithGson(jsonData, Person.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">11</span>         System.out.println(person.getName() + "," +<span style="color: #000000;"> person.getAge());
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> <span style="color: #000000;">}
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">16</span> <span style="color: #008000;"> * 封装的GSON解析工具类，提供泛型参数
</span><span style="color: #008080;">17</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">18</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonUtil {
</span><span style="color: #008080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;">将Json数据解析成相应的映射对象</span>
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> &lt;T&gt; T parseJsonWithGson(String jsonData, Class&lt;T&gt;<span style="color: #000000;"> type) {
</span><span style="color: #008080;">21</span>         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">22</span>         T result =<span style="color: #000000;"> gson.fromJson(jsonData, type);
</span><span style="color: #008080;">23</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">24</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">25</span> 
<span style="color: #008080;">26</span> <span style="color: #000000;">}
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Person {
</span><span style="color: #008080;">29</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;">30</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String age;
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
</span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
</span><span style="color: #008080;">34</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
</span><span style="color: #008080;">37</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;">38</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getAge() {
</span><span style="color: #008080;">41</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> age;
</span><span style="color: #008080;">42</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">43</span> 
<span style="color: #008080;">44</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setAge(String age) {
</span><span style="color: #008080;">45</span>         <span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
</span><span style="color: #008080;">46</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">47</span> 
<span style="color: #008080;">48</span> }</pre>
</div>
<p>输出结果：</p>
<p>John,20</p>
<p>&nbsp;</p>
<p>　　<strong>（二）单条有嵌套的Json数据解析</strong></p>
<p>　　比如有如下Json数据：{"name":"John", "age":20,"grade":{"course":"English","score":100,"level":"A"}}</p>
<p>　　对这样的数据就要用内部类的来解决了。解析步骤如下：</p>
<p>　　1、定义Student类：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Student {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String age;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Grade grade;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Grade { <span style="color: #008000;">//</span><span style="color: #008000;"> 内部类要定义成public的</span>
<span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String course;
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String score;
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String level;
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getCourse() {
</span><span style="color: #008080;">13</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> course;
</span><span style="color: #008080;">14</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setCourse(String course) {
</span><span style="color: #008080;">17</span>             <span style="color: #0000ff;">this</span>.course =<span style="color: #000000;"> course;
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getScore() {
</span><span style="color: #008080;">21</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> score;
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setScore(String score) {
</span><span style="color: #008080;">25</span>             <span style="color: #0000ff;">this</span>.score =<span style="color: #000000;"> score;
</span><span style="color: #008080;">26</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getLevel() {
</span><span style="color: #008080;">29</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> level;
</span><span style="color: #008080;">30</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setLevel(String level) {
</span><span style="color: #008080;">33</span>             <span style="color: #0000ff;">this</span>.level =<span style="color: #000000;"> level;
</span><span style="color: #008080;">34</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 重写toString方法</span>
<span style="color: #008080;">37</span> <span style="color: #000000;">        @Override
</span><span style="color: #008080;">38</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">39</span>             <span style="color: #0000ff;">return</span> "Grade:[course = " + course + ", score = " +<span style="color: #000000;"> score
</span><span style="color: #008080;">40</span>                     + ", level = " + level + "]"<span style="color: #000000;">;
</span><span style="color: #008080;">41</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">42</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">43</span> 
<span style="color: #008080;">44</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 重写toString方法</span>
<span style="color: #008080;">45</span> <span style="color: #000000;">    @Override
</span><span style="color: #008080;">46</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
</span><span style="color: #008080;">47</span>         <span style="color: #0000ff;">return</span> "Student:[name = " + name + ", age = " + age + ", grade = "
<span style="color: #008080;">48</span>                 + grade + "]"<span style="color: #000000;">;
</span><span style="color: #008080;">49</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">50</span> }</pre>
</div>
<p>　　2、使用（一）中封装的GsonUtil工具类进行解析：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonTest1 {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;"> 3</span>         String jsonData = "{'name':'John', 'age':20,'grade':{'course':'English','score':100,'level':'A'}}"<span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span>         Student student = GsonUtil.parseJsonWithGson(jsonData, Student.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        System.out.println(student);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">}
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">10</span> <span style="color: #008000;"> * 封装的GSON解析工具类，提供泛型参数
</span><span style="color: #008080;">11</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">12</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonUtil {
</span><span style="color: #008080;">13</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 将Json数据解析成相应的映射对象</span>
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> &lt;T&gt; T parseJsonWithGson(String jsonData, Class&lt;T&gt;<span style="color: #000000;"> type) {
</span><span style="color: #008080;">15</span>         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">16</span>         T result =<span style="color: #000000;"> gson.fromJson(jsonData, type);
</span><span style="color: #008080;">17</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> }</pre>
</div>
<p>输出结果：</p>
<p>Student:[name = John, age = 20, grade = Grade:[course = English, score = 100, level = A]]</p>
<p>&nbsp;</p>
<p>　　<strong>（三）解析Json数组（多条Json数据）</strong></p>
<p>　　比如有如下Json数据：</p>
<p>　　[{'name':'John', 'grade':[{'course':'English','score':100},{'course':'Math','score':78}]},&nbsp;{'name':'Tom', 'grade':[{'course':'English','score':86},{'course':'Math','score':90}]}]&nbsp;&nbsp; //注：Json数组最外层一定要加"[]"</p>
<p>　　如何处理这样的数据呢？就要用到List。步骤如下：</p>
<p>　　示例程序如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.lang.reflect.Type;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.Gson;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.google.gson.reflect.TypeToken;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 8</span> <span style="color: #008000;"> * 用GSON解析Json数组
</span><span style="color: #008080;"> 9</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">10</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonTest {
</span><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;">12</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Json数组最外层要加"[]"</span>
<span style="color: #008080;">13</span>         String jsonData = "[{'name':'John', 'grade':[{'course':'English','score':100},{'course':'Math','score':78}]},{'name':'Tom', 'grade':[{'course':'English','score':86},{'course':'Math','score':90}]}]"<span style="color: #000000;">;
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span>         List&lt;Student&gt; students =<span style="color: #000000;"> GsonUtil.parseJsonArrayWithGson(jsonData,
</span><span style="color: #008080;">16</span>                 Student.<span style="color: #0000ff;">class</span><span style="color: #000000;">);
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        System.out.println(students);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> <span style="color: #000000;">}
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">22</span> <span style="color: #008000;"> * 封装的GSON解析工具类，提供泛型参数
</span><span style="color: #008080;">23</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;">24</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> GsonUtil {
</span><span style="color: #008080;">25</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 将Json数据解析成相应的映射对象</span>
<span style="color: #008080;">26</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> &lt;T&gt; T parseJsonWithGson(String jsonData, Class&lt;T&gt;<span style="color: #000000;"> type) {
</span><span style="color: #008080;">27</span>         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">28</span>         T result =<span style="color: #000000;"> gson.fromJson(jsonData, type);
</span><span style="color: #008080;">29</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 将Json数组解析成相应的映射对象列表</span>
<span style="color: #008080;">33</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> &lt;T&gt; List&lt;T&gt;<span style="color: #000000;"> parseJsonArrayWithGson(String jsonData,
</span><span style="color: #008080;">34</span>             Class&lt;T&gt;<span style="color: #000000;"> type) {
</span><span style="color: #008080;">35</span>         Gson gson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gson();
</span><span style="color: #008080;">36</span>         List&lt;T&gt; result = gson.fromJson(jsonData, <span style="color: #0000ff;">new</span> TypeToken&lt;List&lt;T&gt;&gt;<span style="color: #000000;">() {
</span><span style="color: #008080;">37</span> <span style="color: #000000;">        }.getType());
</span><span style="color: #008080;">38</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">39</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">40</span> <span style="color: #000000;">}
</span><span style="color: #008080;">41</span> 
<span style="color: #008080;">42</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Student {
</span><span style="color: #008080;">43</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
</span><span style="color: #008080;">44</span>     <span style="color: #0000ff;">private</span> List&lt;Grade&gt; grade; <span style="color: #008000;">//</span><span style="color: #008000;"> 因为grade是个数组，所以要定义成List</span>
<span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Grade {
</span><span style="color: #008080;">47</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String course;
</span><span style="color: #008080;">48</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String score;
</span><span style="color: #008080;">49</span> 
<span style="color: #008080;">50</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getCourse() {
</span><span style="color: #008080;">51</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> course;
</span><span style="color: #008080;">52</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">53</span> 
<span style="color: #008080;">54</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setCourse(String course) {
</span><span style="color: #008080;">55</span>             <span style="color: #0000ff;">this</span>.course =<span style="color: #000000;"> course;
</span><span style="color: #008080;">56</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">57</span> 
<span style="color: #008080;">58</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getScore() {
</span><span style="color: #008080;">59</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> score;
</span><span style="color: #008080;">60</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">61</span> 
<span style="color: #008080;">62</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setScore(String score) {
</span><span style="color: #008080;">63</span>             <span style="color: #0000ff;">this</span>.score =<span style="color: #000000;"> score;
</span><span style="color: #008080;">64</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">65</span> 
<span style="color: #008080;">66</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">67</span> 
<span style="color: #008080;">68</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
</span><span style="color: #008080;">69</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
</span><span style="color: #008080;">70</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">71</span> 
<span style="color: #008080;">72</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
</span><span style="color: #008080;">73</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;">74</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">75</span> 
<span style="color: #008080;">76</span>     <span style="color: #0000ff;">public</span> List&lt;Grade&gt;<span style="color: #000000;"> getGrade() {
</span><span style="color: #008080;">77</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> grade;
</span><span style="color: #008080;">78</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">79</span> 
<span style="color: #008080;">80</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setGrade(List&lt;Grade&gt;<span style="color: #000000;"> grade) {
</span><span style="color: #008080;">81</span>         <span style="color: #0000ff;">this</span>.grade =<span style="color: #000000;"> grade;
</span><span style="color: #008080;">82</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">83</span> }</pre>
</div>
<p>输出结果：</p>
<p>[{name=John, grade=[{course=English, score=100.0}, {course=Math, score=78.0}]}, {name=Tom, grade=[{course=English, score=86.0}, {course=Math, score=90.0}]}]</p>
<p>&nbsp;</p>]]></description></item><item><title>华为IT产品线面试总结</title><link>http://www.cnblogs.com/jiayongji/archive/2015/09/06/4784321.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Sat, 05 Sep 2015 17:21:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2015/09/06/4784321.html</guid><description><![CDATA[<div>　　2015年8月31日，下午去参加了华为的IT产品线的技术面试，面试的是云计算-云存储方向，是班里一个同学帮我报上的名字，然后在官网注册简历就去参加面试了，类似于内推的那种。除了森果的实习面试以外，这算是第一次比较正式的技术面试，有一些遗憾的地方，好好总结一下，为以后的各种面试积累经验。</div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 在去面试之前也并没有刻意做些什么准备，只是把简历完善了一下，把在森果的实习经历好好总结了一下写在简历里面，而且把之前做的东西回顾了一下。事实证明这样做还是比较明智的，一面的面试官问的主要问题都是和简历上的项目经历有关的，除此之外只是让在纸上写一个比较简单的题目：任意给两个'年月日'类型的日期变量，写代码求两个日期之间相隔的天数，数据结构自己设计，编程语言不限，这个留在后面再说。</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 在一面之前，先做了一个职业style测试，36页问卷，每页六个题，都是陈述句，让选择一个最符合自己的等级，这个等级是需要在&ldquo;非常强烈不同意&rdquo;到&ldquo;非常强烈同意&rdquo;之间的十个左右的等级之间选择一个。这个测试还是挺不错的，首先没有对错之分，其次不管你后面的面试结果如何，华为都能够通过这个测试系统后台的一套算法全方位的分析出你这个人性格、职业习惯、目标规划、人格等等很多方面的特质。</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 做完测试已经快六点了，华为很人性化的提供了晚餐套餐，味道还不错，然后就是漫长的等待，等待一面。等了很久之后一直没有听到叫我的名字，后来才发现是因为先前我的简历没有提前交给面试官，所以他那里没有我的名字，这叫一个悲催，最后的后果是两轮面试结束后我已经是最后一个离开的了。</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 一面问的问题还是比较基础的，主要是针对简历提了一些问题。首先问到的是大三的时候做的华科校园导游系统数据结构课程设计，主要问了这样几个问题：</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 1.数据是怎么存储的（答：没有使用关系型数据库，只是简单的将地图的数据存储在一个邻接矩阵中，然后存到数据文件中）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 2.地图数据是怎么获取到的（答：是当时在百度地图上用百度地图的测量工具直接一条线路一条线路手工测量的，当时并没有用百度地图API这样的第三方地图数据接口。PS：感觉这个方法很Low）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 3.既然是量出来的，那肯定都是直线，但实际的线路是曲线，怎么处理这个误差（答：多次测量取平均值。PS：感觉这个答案回答的很心虚，其实针对这个问题是有更好的解决方案的）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 4.怎么识别地图上的道路和非道路（答：地图上的线路都是事先存储在数据文件中的，如果是两个结点之间直接相连的只有非道路，那么这两个节点之间的距离在邻接矩阵中的距离就处理成了无穷大。PS：这个回答也不好）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 5.假如两个结点之间有一个池塘，不能穿过，怎么搜索到这两个结点的最短路径（答：池塘也是一个结点，为每一个结点设置一个可通过性状态值，用一个函数求这个状态值，这个函数的输入有三个，分别是判定是否能通过的结点A，与该结点直接相邻的两个结点B和C，函数的输出是一个布尔值，true表示可以通过，false表示不可以。函数的实现主要是搜索B到C的所有路径，如果在所有路径里面包含有A结点，说明B可以通过A到C，否则不能通过）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 6.校园游览的最佳线路指的是怎样的路径（答：遍历所有给定结点的最短环路路径）；</span></div>
<div><strong><strong>&nbsp; &nbsp; &nbsp; </strong></strong><span style="color: #000000;">一面然后问了在森果实习的情况，主要问了以下几个问题：</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 1.森果是怎样一个网站（答：面向B端用户的水果O2O第三方平台）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 2.是从零开始参与开发的吗（答：不是，是在现有框架上开发新的功能模块）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 3.接触到哪些技术（答：从后台到前端再到数据库都有涉及，实习中都有使用到。后台使用Python3，数据库使用MySQL，前端使用JavaScript+HTML+CSS+Ajax，后台-数据库框架使用SQLAlchemy，后台-前端框架使用Tornado，系统架构采用MVC架构（Model View Controller），代码量主要以Python3和JavaScript为主）；</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 4.遇到哪些困难？是怎样解决的？（答：遇到最多的困难是数据库查询的效率低下问题，其次是高并发操作的数据库读写错误问题，还有就是业务逻辑初期设计不合理导致后期开发和维护困难的问题，以及不同功能模块之间的互相干扰。对于第一个问题，主要采用先在后台代码中断点测试找出占用时间最多的代码段，然后进行不断优化的方法，优化过程中一是要将重复的数据库查询操作进行归并，二是为查询的字段创建索引（说实话数据库索引这个知识点因为用的少，并不是很熟悉）。对于第二个问题，主要是在可能产生并发操作的地方把相关数据库操作放到一个事务中去，保证操作的原子性，还有为数据表上锁，根据数据粒度大小的不同上表锁或者是行锁。对于第三个问题，是要在设计数据表初期就要考虑的事情，解决方案主要有：一是要在写代码之前就理清业务逻辑的关系，二是要合理的设计数据表，善于运用外码，减小数据表的冗余。对于第四个问题，主要还是要在功能设计初期就协调好，遵循高内聚低耦合的原则）</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 一面最后面试官出了一个比较简单的算法题：任意给两个'年月日'类型的日期变量，写代码求两个日期之间相隔的天数，数据结构自己设计，编程语言不限。一看到这个题就发现实习的时候在前端处理数据统计的时间过程中对于时间的问题有过深入的研究，于是用C语言先定义了一个结构体，然后写了几个函数，分别是判断闰年（当时是有点紧张，把闰年的英文给忘了，只好用汉语拼音o(╯□╰)o其实是leap year）、给定年份和月份求这个月的天数、求两个日期相差的天数，其中在求两个日期相差的天数的函数中，先对参数中的两个日期进行排序，小的作为第一个，大的作为第二个，然后分别调用前面两个函数，分不同的情况求天数。在答题的过程中，有一个疏忽，那就是对参数输入的合法性和边界值的判断，比如判断输入的两个参数是不是设定好的日期类型，是不是空等等问题，这在以后的笔试和面试中尤其要注意。</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 一面完了没过多一会儿就是二面，感觉对于二面几乎没有什么准备，问的问题比较宏观，自己应对的很仓促。</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 首先二面面试官也是问了和简历上面项目经历有关的东西，比如问你整个项目做了些什么，最擅长哪种编程语言，有没有github账号，在上面都有什么。然后问对云计算了解吗（因为投的是云计算岗位），说实话对于云计算，除了对概念的了解和上学期并行原理的课有点关系以外，其他方面真是了解不多，所以被问到以后，感觉没什么可说，这也是一大教训：在以后求职的时候，哪怕面试的岗位是之前不熟悉的，也要提前多多了解一些岗位起码的基本知识。后面还问到对华为了解吗，其实自己也仅限于平时的那些了解，而对于华为在IT产品线方面的情况并不是很熟悉，所以在面试一家公司之前，对于这家公司的了解也很必要。最后问了一些家在哪，工作意愿城市等其他的信息。</span></div>
<div><span style="color: #000000;">&nbsp; &nbsp; &nbsp; 总结来说，这次面试并不是很顺利，提前没有准备好，感觉二面发挥的也不太好，也算是得到了一些经验教训，供以后参考。还有一点就是对于自己写在简历上的参加过的项目，一定要很熟悉，对于项目中的难点也要有自己的思考，这些在面试中极有可能会被问到，提前想过，才能应对从容。</span></div>]]></description></item><item><title>MySQL常用操作命令备忘</title><link>http://www.cnblogs.com/jiayongji/archive/2015/08/31/4772158.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Mon, 31 Aug 2015 00:16:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2015/08/31/4772158.html</guid><description><![CDATA[<p>1.登录数据库:mysql -uroot -p12345&nbsp; (12345为密码)<br />2.创建数据库:create database senguocc; (senguocc为数据库名)<br />3.查看有哪些数据库:show databases;<br />4.使用某个数据库:use senguocc;<br />5.显示当期数据库中的所有表:show tables;<br />6.命令行下忘记写分号:输入'\c'再按回车.<br />7.显示当前表的结构:desc 表名;<br />8.创建用户:insert into mysql.user(Host,User,Password) values('localhost','newname',password('1234'));<br />9.给用户赋权限:grant all privileges on senguocc.* to monk@localhost identified by 'test123';(注:senguocc为数据库名,monk为用户名,'test123'为密码)<br />10.刷新系统权限表:flush privileges;(注：每次为新创建的用户赋权限之前都要先刷新系统权限表才行)<br />11.修改root密码:update mysql.user set password = password('新密码') where User = 'root';<br />flush privileges;<br />12.修改用户密码:mysqladmin -u用户名 -p旧密码 password 新密码;<br />13.向数据库中导入.sql数据文件:source filename.sql;<br />14.将时间转换为时间戳(int 型)：select unix_timestamp('2009-10-26 10-06-07');<br />15.将时间戳转换为时间类型：select from_unixtime(1256540102);<br />注：时间戳表示从1970-1-1 0:0:0到现在时刻的秒数．<br />sqlalchemy用法：<br />data_timestamp = shop.create_date_timestamp<br />print(self.session.query(func.from_unixtime(data_timestamp)).scalar())　（注：func后可以跟任何数据库支持的函数）<br />16.sqlalchemy截取日期类型方法：<br />data_trans = '2015-5-27'<br />data_result = self.session.query(func.date_format(data_trans,'%Y-%m-%d')).scalar()<br />print (data_result)<br />mysql用法：<br />select date_format('1997-10-04 22:23:00','%y %M %b %D %W %a %Y-%m-%d %H:%i:%s %r %T');<br />结果：97 October Oct 4th Saturday Sat 1997-10-04 22:23:00 10:23:00 PM 22:23:00<br />17.使用senguocc的order表时候要加前缀senguocc.order，否则会出错，因为order为关键字．<br />18.count用法小结：<br />①统计所有宠物的数目：select count(*) from pet;<br />②统计每个主人所拥有宠物的数目：select owner,count(*) from pet group by owner;<br />③统计每种宠物的数目：select species,count(*) from pet group by species;<br />④统计每种性别的宠物的数量：select sex,count(*) from pet group by sex;<br />⑤统计每种宠物不同性别的数量：select species,sex,count(*) from pet group by species,sex;<br />⑥查询猫和狗不同性别的数目：select species,sex,count(*) from pet where species = 'dog' or species = 'cat' group by species,sex;<br />19.修改主键：先删除，再添加<br />alter table tablename drop primary key;<br />alter table tablename add primary key(id);(注：id 不能有重复的)<br />20.删除已经建好的表中的一列：<br />alter table tablename drop columnname;<br />21.sum函数用法：<br />user 表：primary key(id,num)<br />id 　　　num<br />1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15<br />1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22<br />1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 28<br />２　　　5<br />select sum(num) from user where id = 1;<br />输出：65<br />22.向表尾增加一列：alter table tablename add column columnname int(10) not null default 0;<br />往现有表name列后增加新的一列：alter table tablename add column columnname int(10) not null default 0 after name;<br />在表首增加一列：alter table tablename add column columnname int(10) not null default 0 first;<br />23.mysql数据库中，假定有学生-成绩表grade，现在从其中查询成绩，如果及格则显示分数，如果不及格显示"不及格"：<br />select id,grades,case when grades &lt; 60 then '不及格' when grades &gt; 60 then grades end from grade;<br />24.导出某数据库到sql文件（在系统命令行中执行该命令，而不是进入数据库中）：mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql</p>
<p>25.查看当前用户：select user();</p>]]></description></item><item><title>SublimeText2常用快捷键</title><link>http://www.cnblogs.com/jiayongji/archive/2015/08/31/4772157.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Mon, 31 Aug 2015 00:15:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2015/08/31/4772157.html</guid><description><![CDATA[<p>１．删除一行：ctrl + shift + K<br />２．替换：ctrl + H<br />３．设置书签：<br />Ctrl+F2设置书签<br />F2 下一个书签<br />Shift+F2上一个书签<br />４．查找：<br />ctrl + F 查找<br />F3 查找下一个<br />shift + F3 查找前一个<br />５．代码折叠：<br />ctrl + K再ctrl + 1(或2,3...) 将第1(或2,3...)级的函数或类折叠起来<br />ctrl＋K再ctrl + j&nbsp; 将折叠起来的代码展开<br />６．将多行左移：<br />先选中，然后按shift + Tab<br />７．标签页切换：<br />ctrl + Tab<br />８．全局查找：<br />ctrl + shift + F<br />９．文件全局查找：<br />ctrl + P<br />10.单行注释：ctrl + /<br />块注释：ctrl + shift + /<br />11.左右滚动条：Shift + 鼠标滚轮<br />12.Alt + 1:切换到第一个标签页（最左边的标签页为第一个）</p>]]></description></item><item><title>GitHub边用边总结</title><link>http://www.cnblogs.com/jiayongji/archive/2015/05/31/4542388.html</link><dc:creator>AzureSky</dc:creator><author>AzureSky</author><pubDate>Sun, 31 May 2015 10:06:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2015/05/31/4542388.html</guid><description><![CDATA[<p>　　以下用法是在ubuntu系统下的用法，主要内容整理自＇廖雪峰的官方网站＇．</p>
<p>＃1.安装git<br />$ sudo apt-get install git<br /><br />＃2.声明git账号<br />$ git config --global user.name "Your Name"<br />$ git config --global user.email "email@example.com"<br /><br />＃3.创建版本库（假设库名为learngit）<br />$ mkdir learngit<br />$ cd learngit<br />$ git init<br />(接着创建一个文本文件readme.txt,并写入内容＂hello＂)<br />$ git add readme.txt<br />$ git commit -m "wrote a readme file"<br /><br />＃4.查看git状态<br />$ git status<br />$ git diff&nbsp; #查看修改内容<br /><br />＃5.查看提交版本号：<br />$ git log<br />$ git reflog&nbsp; #未来的版本<br />$ git reset --hard commit_id<br /><br />＃6.撤消修改<br />$ git checkout -- readme.txt　　＃丢弃工作区的修改<br />$　git reset HEAD readme.txt&nbsp; #丢弃暂存区的修改＇<br /><br />＃7.删除文件<br />$ git rm test.txt<br />$ git commit -m "remove test.txt"<br /><br />＃8.创建SSH Key(在用户主目录下)<br />$ ssh-keygen -t rsa -C "dnxbjyj@126.com"<br />(在刚刚提示的目录下找到id_rsa.pub文件，用文本编辑器打开，复制里面的一长串字符)<br />(登录github,在账号设置里面找到SSH Keys页面，填入任意title,在Key文本框里复制进去刚刚复制的字符，然后点击Add Key,之后就能从本地push了)<br /><br />＃9.添加远程库<br />(在github建立远程库，假设建立的库名为learngit)<br />$ git remote add origin git@github.com:dnxbjyj/learngit.git&nbsp; #关联远程库<br />$ git push -u origin master&nbsp; #第一次推送master分支的所有内容<br />$ git push origin master&nbsp; #后面推送master的所有内容<br />$ git remote rm origin&nbsp; #断开和远程库的关联<br /><br />＃10.创建与合并分支<br />$ git branch&nbsp; #查看分支<br />$ git branch &lt;name&gt;&nbsp; #创建分支<br />$ git checkout &lt;name&gt;&nbsp; #切换到某分支<br />$ git branch -b &lt;name&gt;&nbsp; #创建并跳转到某分支<br />$ git merge &lt;name&gt;&nbsp; #合并某分支到当前分支<br />$ git branch -d &lt;name&gt; 　#删除某分支<br />$ git branch -D &lt;name&gt;&nbsp;&nbsp; &nbsp;#强制删除没有合并完全的分支<br /><br />＃11.推送分支<br />$ git remote&nbsp; #查看远程库的信息<br />$ git remote -v&nbsp; #查看远程库的详细信息，显示可以抓取和推送的origin的地址<br />$ git push origin master&nbsp; #向远程的origin推送本地的master分支<br /><br />＃12.抓取分支<br />$ git checkout -b dev origin/dev&nbsp; #创建远程origin的dev分支到本地<br />$ git branch --set-upstream-to = origin/dev&nbsp; #指定本地dev分支与远程origin/dev分支的链接<br />$ git pull&nbsp; #把最新提交从origin/dev上抓取下来<br />(再合并分支，若出现冲突，则解决冲突,再add,commit)<br />$ git push origin dev&nbsp; #push dev分支<br /><br />＃13.把最新的分支从origin/goods上抓取下来到当前本地分支：<br />$ git pull origin goods<br /><br />＃14.git clone远程仓库的某个分支到本地：<br />$ git clone -b goods git@github.com:senguo2014/senguo.cc.git　　＃clone远程的goods分支<br />＃15.完整流程：<br />①拉远程库最新的代码到本地分支：<br />$ git fetch origin test:tmp #将远程库上origin目录下的test分支拉到本地库并在本地库创建tmp分支<br />或：<br />$ git pull origin test　　＃将远程库上origin下的test分支拉到本地当前分支上（会自动merge）<br />②切换到本地的working分支：<br />$ git checkout working<br />$ git branch&nbsp; #查看当前分支<br />③写代码，修改代码．然后提交所有修改：<br />$ gti status&nbsp; #查看当前分支状态<br />$ git add .　＃注：最后是一个点<br />$ git commit -a -m "hello"<br />④将本地的tmp分支合并到当前的working分支：<br />$ git merge tmp<br />⑤根据提示，打开代码文件逐一修改冲突．（HEAD&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;内容１=======内容２&gt;&gt;&gt;&gt;&gt;&gt;&gt;working）<br />⑥冲突修改完以后，再merge一遍，然后将当前分支的内容提交到远程库的test分支上：<br />$ git push origin test<br />※※※※※※※※※※<br />总结：可以简略地归结为三步曲：<br />$ git fetch origin master:tmp&nbsp; #将远程的master分支fetch到本地的tmp分支上,若tmp分支不存在,则自动新建.<br />$ git diff tmp<br />$ git merge tmp&nbsp; #将当前分支和tmp分支merge<br />$ git push origin master:newbranch&nbsp; #其中master表示本地master,newbranch表示在远程创建的新分支或远程已经有的分支.<br />※※※※※※※※※※<br />＃16.删除远程test分支：<br />$ git push origin --delete test<br /><br />＃17.$ git push &lt;远程主机名(origin)&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br />&nbsp;注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br />如果省略远程分支名，则表示将本地分支推送与之存在&rdquo;追踪关系&rdquo;的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。<br />＃18.git的.gitignore不起作用的原因可能为：先添加到本地分支其他文件再添加的.gitignore文件<br />解决方法：先清空本地分支，然后先添加和提交.gitignore文件到本地分支，然后再添加提交其他文件到本地分支，然后再往远程分支推．<br />＃19.git上fetch下来的文件的默认权限是100644，在这种权限下在本地是无法对代码进行修改的，需要chmod -R 777 workgit，然后对代码进行修改．在向远程push代码的时候，还要先把权限改回100644，这样才不会起冲突(这种修改权限的方法可能会失效,所以最好的解决方法就是不要修改权限,而用sudo权限打开sublime然后再编辑代码)．<br />＃20.在新建库后pull或clone的时候出现如下错误：<br />Permission denied (publickey).<br />fatal: Could not read from remote repository.<br /><br />Please make sure you have the correct access rights<br />and the repository exists.<br />可能的解决的方法：<br />１．ssh-keygen...命令前加sudo，然后再按原来的步骤来做．<br /><br />＃21.公钥只与电脑有关,与是否新建仓库无关.\\</p>
<p>&nbsp;#22.查看历史版本：git log</p>
<p>　　 &nbsp;回滚到相应的版本号：git reset --hard &nbsp;版本号&nbsp;</p>
<p>PS:</p>
<p>１．发现一个问题：当在终端不进入su模式时，git命令都可以自动补全，但是一旦进入su模式，不能自动补全．</p>]]></description></item><item><title>2015 武汉森果公司web后端开发实习日记----书写是为了更好的思考</title><link>http://www.cnblogs.com/jiayongji/archive/2015/05/28/4534830.html</link><dc:creator>贾永基</dc:creator><author>贾永基</author><pubDate>Wed, 27 May 2015 16:53:00 GMT</pubDate><guid>http://www.cnblogs.com/jiayongji/archive/2015/05/28/4534830.html</guid><description><![CDATA[<p>　　找暑期实习，3月份分别投了百度和腾讯的实习简历，都止步于笔试，总结的主要原因有两点：基础知识不扎实，缺乏项目经验．后来到拉勾网等网站上寻找实习，看了很多家，都还是处于观望状态．后来参加了武汉实习吧在大活举办的实习分享会，听完后最大的收获是获取了更多的信心．再过了几天偶然看到了年级群邮里发的一篇We信水果帮的实习招聘，加上发现是之前认识的学长发的邮件，于是和学长了解了一下情况，把简历发出去了．没过两天5月15日就收到了面试通知．面试之后，心里一阵紧张，毕竟是第一次经历求职面试，不过还算顺利，面试通过．不巧的是恰逢考试周，考试周考完两门后就到公司开始了正式的实习．&nbsp;</p>
<p>【5.27】</p>
<p>　　下午考完期中考试最后一门接口技术，晚上和陈明一起到森果公司办公室，做到快十点，主要是配置系统开发的环境。今天完成的主要内容：</p>
<p>　　1、 熟悉Github的用法：clone代码到本地（需要命令行命令）。</p>
<p>　　2、 clone森果网站的代码到本地，并配置本地数据库，跑通入口程序。在乔迁学长的帮助下，了解网站架构，把网站的功能和代码进行对比。</p>
<p>　　3、 产生的困惑：由于对tornado框架和sqlalchemy框架的不熟悉，导致对代码的理解不是很好，后来回去跟廖思敏学长聊，学长建议先把这两个框架官网上的Demo都跑通再说。此外还有对python的熟悉。</p>
<p>【5.29】</p>
<p>　　这两天每天都是早上9点半左右到公司,一直到晚上八九点．29号早上下雨了，整个上午天都是阴沉沉的，不过很凉快．水果帮网站在这两天也新增了功能，有一个功能就是在微信里实现支付宝支付，黑科技～赞一个～还有就在这几天支付宝的光纤被挖掘机挖断了，携程的服务器被攻击了，互联网安全的问题凸显出来了．对了今天李晨和范冰冰发微博公开恋情出现＇我们体＇．</p>
<p>　　这两天做的事情有如下几点：</p>
<p>　　1、 继续熟悉整个系统．</p>
<p>　　2、 使用和了解worktile团队协作工具．</p>
<p>　　3、 试着实现商家后台订单管理中根据不同条件对订单进行筛选和排序的功能．</p>
<p>　　4、 初步完成了３中的代码，等待调试．但在调试的过程中遇到了无法登录本地网站服务器的问题，２9号下午调试了一下午都没有解决，主要排查了nginx的配置 ，hosts文件，数据库数据等，反反复复试错了很多次，到晚上还没有解决．最终发现是因为昨天学长给的数据库并没有包含之前在网站注册的数据，因此登录不上，这算是一个低级的错误．想到的解决方案是：重新注册以后并绑定手机号，然后从乔迁学长那里用新的数据库进行本地测试．</p>
<p>　　5、 初步熟悉postman(chrome浏览器)和httprequest(firefox浏览器)这两个web开发工具的使用．</p>
<p>　　6、 今天相关的资料和文档记录在：①快盘的Daily文档；②worktile的Daily文档；③firefox的Daily书签里．</p>
<p>【5.30】</p>
<p>　　考试周完太累了，想休息一下，跟学长请假一天．主要是给妹子装数据库，教她数据库．在教的过程中自己也小小的复习了一下．</p>
<p>【5.31】</p>
<p>　　继续到公司上班，今天只有两个学长在，其他小伙伴都休息了．今天做的主要事情有：</p>
<p>　　1、 调试系统网站的本地测试，依然没有成功．</p>
<p>　　2、 深入练习了GitHub的使用，并测试提交代码与版本控制的功能（主要参照了＇廖雪峰的官网＇上的GitHub教程进行练习，总结在这篇博文里面：<a href="http://www.cnblogs.com/jiayongji/p/4542388.html" target="_blank">http://www.cnblogs.com/jiayongji /p/4542388.html</a>）</p>
<p>　　3、 今天的文档记录在：worktile的Daily文档.</p>
<p>【6.1 周一】</p>
<p>　　今天解决了困扰两天的问题,重新导入了学长给的线上版数据库,成功解决了之前不能登录/admin的问题. 但偶尔出现了退出店铺后台不能再次登录的问题,解决方法是用登录页面上找回密码的功能发手机验证码重新设置密码,然后再到登录页面用手机号和新密码登录即可．所做的工作有：</p>
<p>　　1、 进入系统进行订单管理新增功能的功能测试．在反复调试中掌握了前后端交互数据的形式．需要注意的有以下几点：</p>
<p>　　　　①在不断往本地系统中添加新数据后，尽量要经常备份数据库．最好本地和网盘上都备份一份．在终端中用这个命令备份数据库:$ mysqldump -uroot &nbsp; &nbsp; 　　　　 &nbsp;&nbsp;-p*** abc &gt; abc.sql（导出数据库abc到当前目录下保存为abc.sql文件,&rsquo;<em>***' </em>表示mysql的登录密码）</p>
<p>　　　　②pyton3 app.py &ndash;debug=1 #调试模式,每次修改代码后不用重启即可实时更新．</p>
<p>　　　　③测试后台的单独功能的时候直接在地址栏中添加和改变参数的值进行测试,不要在页面进行点击测试!否则会出错!!</p>
<p>　　　　④多次测试的时候因为URL参数中多了空格而出错,空格很不起眼,但仍然会导致页面打不开!!这点在后面的测试的时候一定要注意!!</p>
<p>　　2、 在实现多表连接查询的排序功能的时候，多次尝试失败，到晚上仍没有找到解决方案，主要是因为对SQLAlchemy框架的操作不熟练，需要恶补框架知识．</p>
<p>　　3、 今天的记录文档在：①Worktile　Daily文档；②浏览器Daily书签；③快盘今日备份</p>
<p>【6.2 周二】</p>
<p>　　早上起来看新闻看到湖北客轮沉没，船上有四百多人，而且多为老年人，祈祷．</p>
<p>　　今天所做的工作有：</p>
<p>　　1、 初步完成了店铺后台订单管理中的订单排序与筛选的功能，之所以说初步，是因为后端功能完成了，还没有与前端进行整合，而且代码的效率还可以进一步优化，主要是在数据库查询方面的优化，要求接下来继续深入学习sqlalchemy的相关知识．</p>
<p>　　2、 这周的新任务是：实现超级管理员后台的商铺管理功能，与店铺后台的代码逻辑比较相似，但是必须要充分优化效率，以应对大数据量．</p>
<p>　　3、 进一步熟悉了整个系统的代码结构和数据库数据结构，但是对于表的联合查询的效率优化方面还有很多事情可做．</p>
<p>　　4、 今天的相关文档记录在：①Worktile的Daily Tips文档中；②浏览器的Daily书签中，文件备份在快盘的Backup daily中．</p>
<p>&nbsp;【6.3 周三】</p>
<p>　　今天下午和晚上所做的工作有：</p>
<p>　　1、 熟悉超级管理员后台的代码逻辑，重点熟悉店铺管理的代码逻辑和数据逻辑．</p>
<p>　　2、 试着修改原有代码，进行小的功能测试．</p>
<p>　　3、 实现了部分排序功能，但因为数据量大，数据库查询效率低下，急需寻找高效率的方法或算法进行优化．</p>
<p>　　　　现在想到的思路有：</p>
<p>　　　　①通过sqlalchemy对数据库的shop表编制索引，提高查询效率．</p>
<p>　　　　②尝试使用海量数据排序算法，对数据排序进行优化．</p>
<p>　　4、 sqlalchemy的知识还很欠缺，急待加强，可以看今天浏览器书签中的几篇博文进行加强．</p>
<p>　　5、 店铺后台订单管理订单筛选排序功能的后端代码已经完成，前端实现推迟．</p>
<p>　　6、 今天的文档记录在：①Worktile的Daily Tips文档中；②浏览器的Daily书签中，文件备份在快盘的Backup daily中．</p>
<p>【6.5 周五】</p>
<p>　　这两天主要实现总后台店铺管理功能，到6.5晚上已经基本完成，留下了两个难点问题还没有解决．这两天的工作总结如下：</p>
<p>　　1、 这两天修改的数据库字段有：增加shop表的shop.fans_count（粉丝数）和shop.shop_property（店铺销售额）两个字段，sql脚本在快盘今日备份文件夹中（明天预计还要增加的字段是满意度字段）．<br />　　2、 完成了后台店铺管理中的店铺排序和筛选功能，功能测试都正确；完成了店铺信息卡显示数据的大部分处理（综合满意度是个复杂的点，还没有攻克；还有按店铺号或店铺名搜索的功能也没有实现，这个的实现方法可以参照店铺后台订单管理中的订单搜索功能的实现）．<br />　　3、 要学习前端知识，从前端到后端的整个开发流程还是要亲身经历一遍的，而且现在前端缺人手，自己要试着实现一些简单的功能．看W3CSCHOOL上的前端html+css+js教程，或者到CSDN上找些入门的系列教程看．</p>
<p>　　4、 陈明的ubuntu升级到15.10以后，重启后进入不了系统，到windows下发现系统所在盘的所有文件都不见了，怀疑是在更新的时候感染了病毒，只好重装系统，费时费力．而且装ubuntu的时候最好装LTS稳定版的系统，最新版的系统一般不是很稳定．</p>
<p>　　　　so，保持每天云端文档备份和文件备份的好习惯．</p>
<p>　　5、 今天文档保存在：woktile 项目中；文件保存在：快盘DailyBackup中．</p>
<p>　　6、 今天要整理快盘一周来的Backup，腾出本地空间．</p>
<p>【6.6 周六】</p>
<p>　　今天把总后台店铺管理的两个难点问题解决了，主要做的工作及总结如下：</p>
<p>　　1、 完成了总后台店铺综合满意度的计算问题，解决方案是参照/list页面店铺满意度的计算方法．</p>
<p>　　2、 完成了总后台按照店铺号或店铺名称搜索的功能，实现方法是在url增加search键，假定将search框中输入的关键字通过search传给后台，后台根据关键字对数据库进行筛选，筛选完毕以后再将数据返回给前台．主要代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">if</span> <span style="color: #800000;">'</span><span style="color: #800000;">search</span><span style="color: #800000;">'</span> <span style="color: #0000ff;">in</span> self.args:　　＃如果url中有<span style="color: #800000;">'</span><span style="color: #800000;">search</span><span style="color: #800000;">'</span><span style="color: #000000;">键
</span><span style="color: #008080;"> 2</span>             <span style="color: #0000ff;">from</span> sqlalchemy.sql <span style="color: #0000ff;">import</span> or_ 　　<span style="color: #008000;">#</span><span style="color: #008000;">导入sqlalchemy的or_，用于下方的判断店铺号或者店铺名是否等于搜索关键字</span>
<span style="color: #008080;"> 3</span>             search = self.args[<span style="color: #800000;">'</span><span style="color: #800000;">search</span><span style="color: #800000;">'</span>]　　　　<span style="color: #008000;">#</span><span style="color: #008000;">获取search的值</span>
<span style="color: #008080;"> 4</span>             q = self.session.query(models.Shop).filter(or_(models.Shop.shop_name.like(<span style="color: #800000;">"</span><span style="color: #800000;">%{0}%</span><span style="color: #800000;">"</span>.format(self.args[<span style="color: #800000;">"</span><span style="color: #800000;">search</span><span style="color: #800000;">"</span>])),　　　<span style="color: #008000;">#</span><span style="color: #008000;">数据库查询，将查询结果赋给q</span>
<span style="color: #008080;"> 5</span>                        models.Shop.shop_code.like(<span style="color: #800000;">"</span><span style="color: #800000;">%{0}%</span><span style="color: #800000;">"</span>.format(self.args[<span style="color: #800000;">"</span><span style="color: #800000;">search</span><span style="color: #800000;">"</span><span style="color: #000000;">]))),\
</span><span style="color: #008080;"> 6</span>                        models.Shop.shop_status == models.SHOP_STATUS.ACCEPTED,\　　　　<span style="color: #008000;">#</span><span style="color: #008000;">要是申请成功的店铺</span>
<span style="color: #008080;"> 7</span>                        models.Shop.shop_code !=<span style="color: #800000;">'</span><span style="color: #800000;">not set</span><span style="color: #800000;">'</span>,models.Shop.status !=0 ).all()　　　　   ＃店铺号非空(!=<span style="color: #800000;">'</span><span style="color: #800000;">not set</span><span style="color: #800000;">'</span><span style="color: #000000;">)并且店铺不是关闭中
</span><span style="color: #008080;"> 8</span>             shops =<span style="color: #000000;"> q
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">:
</span><span style="color: #008080;">10</span>             q =<span style="color: #000000;"> self.session.query(models.Shop) 　　＃否则将整个Shop表赋给shops
</span><span style="color: #008080;">11</span>             shops = q.order_by(models.Shop.id).all()</pre>
</div>
<p>　　3、 下午学习了html/js/css的初步知识，熟悉了一下总后台前端的代码逻辑，为下一步编写总后台的前端代码做准备．</p>
<p>　　4、 学长推荐用谷歌浏览器进行前端开发，但安装了谷歌浏览器，修改nginx配置文件后，可是仍然登录不了总后台，这是个疑难杂症，所以还是继续用火狐．</p>
<p>　　5、 今天的文档文件和笔记记录备份在：wortile项目文件中和Daily项目中，快盘Daily备份，firefox Daily书签．</p>
<p>【6.7 周日】</p>
<p>　　高考第一天，湖北数学惊现文言文大题；晚上韵苑体育馆青春琴缘音乐会.</p>
<p>　　今天主要是学习前端相关知识和总后台店铺管理数据分析，主要做的工作如下：</p>
<p>　　1、 学习javascript基本语法，H5基本语法(主要在W3SHOOL上学).</p>
<p>　　2、 继续研究前端代码结构，要接着学习javascript/h5/css/jquery.</p>
<p>　　3、 新任务：在完成总后台店铺管理前-后端以后，再接着实现总后台余额管理的前-后端功能（与陈明协作）.</p>
<p>　　4、 今天的文件、文档备份在：worktile Daily，快盘Daily，firefox书签Daily.</p>
<p>　　5、 总后台店铺管理数据分析：<br />　　　　*将整形的sort_order映射成False(0)或True(1)<br />　　　　*CustomerShopFollow表和orders表的链接查询,用于筛选新/老用户<br />　　　　*筛选order_type和选定order_type相同的订单<br />　　　　*根据sort_key和sort_order对orders进行排序<br />　　　　*根据选定的支付方式对orders进行筛选' <br />　　　　*如果选定的order_status=5(所有订单)</p>
<p>　　　　(1)店铺状态(status=Column(Integer,default = 1) (0:关闭 1:营业中 2:筹备中 3:休息中)<br />　　　　　　#键值对："shop_status:int"<br />　　　　　　所有(shop_status＝5,shop.shop_status in [0,1,2,3,4]) <br />　　　　　　未激活(shop_status＝4,shop_code = "not set")<br />　　　　　　筹备中(shop_status＝2 ,shop.shop_status=2) <br />　　　　　　营业中(shop_status＝1,shop.shop_status=1)<br />　　　　　　休息中(shop_status＝3,shop.shop_status=3)<br />　　　　　　已停业(shop_status＝0,shop.shop_status=0)</p>
<p>　　　　(2)认证状态（shop_auth =Column(Integer,default =0)(0:未认证 1:个人认证 2:企业认证 3:个人认证转企业认证 4:企业认证转个人认证）<br />　　　　　　键值对："shop_auth:int"<br />　　　　　　所有（shop_auth = 4,shop.shop_auth in [0,1,2,3,4]）<br />　　　　　　已认证（shop_auth = 3,shop.shop_auth in [1,2,3,4]）<br />　　　　　　个人认证(shop_auth = 2,shop.shop_auth in [1,4])<br />　　　　　　企业认证(shop_auth = 1,shop.shop_auth in [2,3])<br />　　　　　　未认证(shop_auth = 0,shop.shop_auth=0)</p>
<p>　　　　(3)排序规则：<br />　　　　　　键值对：<br />　　　　　　"shop_sort_key:int"<br />　　　　　　值：<br />　　　　　　　　0:注册时间<br />　　　　　　　　1:评价数<br />　　　　　　　　2:账户余额<br />　　　　　　　　3:粉丝数</p>
<p>　　　　　　　　4:订单数<br />　　　　　　　　5:营业额<br />　　　　　　　　6:客单价</p>
<p>　　　　　　［注册时间］：create_date_timestamp<br />　　　　　　［评价数］：old_msg<br />　　　　　　［账户余额］：available_balance<br />　　　　　　［粉丝数］：<br />　　　　　　*原来：self.session.query(models.CustomerShopFollow).filter_by(shop_id=shop.id).count()<br />　　　　　　*增加字段后：shop.fans_count</p>
<p>　　　　　　［订单数］：order_count<br />　　　　　　营业额：<br />　　　　　　*原来：self.session.query(func.sum(models.Order.totalPrice)).filter_by(shop_id=shop.id).scalar()<br />　　　　　　*增加字段后：shop.shop_property</p>
<p>　　　　　　［客单价］：营业额／订单数<br />　　　　　　增加字段：single_price</p>
<p>　　　　(4)排序顺序：<br />　　　　　　键值对："if_reverse:int"<br />　　　　　　值：<br />　　　　　　　　0：升序<br />　　　　　　　　1：降序</p>
<p>　　　　　　键值对默认值：<br />　　　　　　　　1．shop_status：5（所有）<br />　　　　　　　　2．shop_auth：5（所有）<br />　　　　　　　　3．shop_sort_key：4（默认按订单数排序，降序）<br />　　　　　　　　4．if_reverse：1（默认降序排列）<br />　　　　(5)shop信息卡data数组：<br />　　　　　　*店铺名（data["shop_name"] = shop.shop_name）（店铺名有超链接）</p>
<p>　　　　　　*店铺管理员昵称（data["admin_nickname"] = shop.admin.accountinfo.nickname）(昵称有超链接)</p>
<p>　　　　　　*店铺地址（data["shop_address_detail"] = shop.shop_address_detail）</p>
<p>　　　　　　*auth_type_array = ['未认证','个人认证','个人认证转企业认证','企业认证转个人认证']<br />　　　　　　*认证状态（data["auth_type"] = auth_type_array[shop.shop_auth]）</p>
<p>　　　　　　*认证信息（超链接）（）</p>
<p>　　　　　　*店铺号（data["shop_code"] = shop.shop_code）</p>
<p>　　　　　　*create_date_trans = self.session.query(func.from_unixtime(shop.create_date_timestamp)).scalar()<br />　　　　　　*注册时间（data["create_date"] = self.session.query(func.date_format(create_date_trans,'%Y-%m-%d')).scalar()）</p>
<p>　　　　　　*shop_status_array = ['关闭','营业中','筹备中','休息中']<br />　　　　　　*店铺状态（data["shop_shop_status"] = shop_status_array[shop.status]）</p>
<p>　　　　　　*申请信息（超链接）<br />　　　　　　*评价数（data["old_msg"] = shop.old_msg）</p>
<p>　　　　　　*满意度（）</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> shop_id =<span style="color: #000000;"> shop.id
</span><span style="color: #008080;"> 2</span> orders = self.session.query(models.Order).filter_by(shop_id = shop_id ,status =6<span style="color: #000000;">).first()
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> orders:
</span><span style="color: #008080;"> 4</span>     q =<span style="color: #000000;"> self.session.query(func.avg(models.Order.commodity_quality),\
</span><span style="color: #008080;"> 5</span> func.avg(models.Order.send_speed),func.avg(models.Order.shop_service)).filter_by(shop_id =<span style="color: #000000;"> shop_id).all()
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> q[0][0]:
</span><span style="color: #008080;"> 7</span>     commodity_quality =<span style="color: #000000;"> int(q[0][0])
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">if</span> q[0][1<span style="color: #000000;">]:
</span><span style="color: #008080;"> 9</span>     send_speed = int(q[0][1<span style="color: #000000;">])
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">if</span> q[0][2<span style="color: #000000;">]:
</span><span style="color: #008080;">11</span>     shop_service = int(q[0][2<span style="color: #000000;">])
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">if</span> commodity_quality <span style="color: #0000ff;">and</span> send_speed <span style="color: #0000ff;">and</span><span style="color: #000000;"> shop_service:
</span><span style="color: #008080;">13</span>     satisfy = format((commodity_quality + send_speed +             shop_service)/300,<span style="color: #800000;">'</span><span style="color: #800000;">.0%</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #008080;">14</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">:
</span><span style="color: #008080;">15</span>     satisfy = format(1,<span style="color: #800000;">'</span><span style="color: #800000;">.0%</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #008080;">16</span> data[<span style="color: #800000;">"</span><span style="color: #800000;">satisfy</span><span style="color: #800000;">"</span>] = satisfy</pre>
</div>
<p>　　　　　　*为了提高效率，在shop末尾新加入三种＇满意度＇字段：　　＃＃突然感觉加这写没有必要，店铺满意度在/handlers/customer.py中已经有实现，为何不直接调用呢？或者直接用那种方法实现呢？新方法见上方．</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> commodity_quality = Column(Float,default = 0,nullable = False) <span style="color: #008000;">#</span><span style="color: #008000;">value in 0~100</span>
<span style="color: #008080;">2</span> send_speed = Column(Float,default = 0,nullable = False) 　<span style="color: #008000;">#</span><span style="color: #008000;">value in 0~100</span>
<span style="color: #008080;">3</span> shop_service = Column(Float,default = 0,nullable = False) 　<span style="color: #008000;">#</span><span style="color: #008000;">value in 0~100</span></pre>
</div>
<p>　　　　　　*并写如下脚本更新数据库：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">use</span><span style="color: #000000;"> senguocc;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">alter</span> <span style="color: #0000ff;">table</span> shop <span style="color: #0000ff;">add</span> <span style="color: #0000ff;">column</span> commodity_quality <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">alter</span> <span style="color: #0000ff;">table</span> shop <span style="color: #0000ff;">add</span> <span style="color: #0000ff;">column</span> send_speed <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">alter</span> <span style="color: #0000ff;">table</span> shop <span style="color: #0000ff;">add</span> <span style="color: #0000ff;">column</span> shop_service <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">update</span> shop <span style="color: #0000ff;">set</span> commodity_quality <span style="color: #808080;">=</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">(
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">avg</span>(senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.commodity_quality)
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span>
<span style="color: #008080;">10</span> <span style="color: #0000ff;">where</span> shop.id <span style="color: #808080;">=</span> senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.shop_id
</span><span style="color: #008080;">11</span> <span style="color: #000000;">);
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #0000ff;">update</span> shop <span style="color: #0000ff;">set</span> send_speed <span style="color: #808080;">=</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">(
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">avg</span><span style="color: #000000;">(senguocc.send_speed)
</span><span style="color: #008080;">16</span> <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span>
<span style="color: #008080;">17</span> <span style="color: #0000ff;">where</span> shop.id <span style="color: #808080;">=</span> senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.shop_id
</span><span style="color: #008080;">18</span> <span style="color: #000000;">);
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> <span style="color: #0000ff;">update</span> shop <span style="color: #0000ff;">set</span> shop_service <span style="color: #808080;">=</span> 
<span style="color: #008080;">21</span> <span style="color: #000000;">(
</span><span style="color: #008080;">22</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">avg</span><span style="color: #000000;">(shop_service)
</span><span style="color: #008080;">23</span> <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span>
<span style="color: #008080;">24</span> <span style="color: #0000ff;">where</span> shop.id <span style="color: #808080;">=</span> senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.shop_id
</span><span style="color: #008080;">25</span> );</pre>
</div>
<p>　　　　　　*并在顾客购物后的处理方法中加入更新代码：<br />　　　　　　　　goods_count＝len(shop.fruits) + self.session.query(models.MGoods).join(models.Menu).filter(models.Menu.shop_id == shop.id).count()<br />　　　　　　*商品件数（data["goods_count"] = goods_count）</p>
<p>　　　　　　*粉丝数（data["fans_count"] = shop.fans_count）</p>
<p>　　　　　　*订单数（data["order_count"] = shop.order_count）</p>
<p>　　　　　　*营业额（data["shop_property"] = shop.shop_property）</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span> shop.order_count ==<span style="color: #000000;"> 0:
</span><span style="color: #008080;">2</span>     single_price =<span style="color: #000000;"> 0
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">:
</span><span style="color: #008080;">4</span>     single_price = shop.shop_property/shop.order_count</pre>
</div>
<p>　　　　　　*客单价（data["single_price"] = single_price）</p>
<p>　　　　　　*账户余额（data["available_balance"] = shop.available_balance）</p>
<p>　　　　　　order表中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> commodity_quality = Column(Integer) ＃取值：0-100　　
<span style="color: #008080;">2</span> send_speed = Column(Integer) ＃取值：0-100　　
<span style="color: #008080;">3</span> shop_service = Column(Integer) ＃取值：0-100　</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> commodity_quality <span style="color: #0000ff;">from</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">inner</span> <span style="color: #808080;">join</span> shop <span style="color: #0000ff;">on</span> shop.id <span style="color: #808080;">=</span> <span style="color: #0000ff;">order</span>.shop_id <span style="color: #0000ff;">where</span> shop.shop_name <span style="color: #808080;">like</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">吃在 东农%</span><span style="color: #ff0000;">'</span>;</pre>
</div>
<p>　　6、 解决整形值做除法会变成0的方法：<br />　　　　88/100:结果是0<br />　　　　float(88)/100:结果是0.88<br />　　7、 根据店铺号或店铺名搜索的功能：<br />　　　　search=水果&amp;shop_auth=4&amp;shop_status=5&amp;shop_sort_key=0&amp;if_reverse=0&amp;</p>
<p>　　8、 今日数据：快盘.</p>
<p>【6.9 周二】</p>
<p>　　高考结束，相继出来替考、听力故障等事件。</p>
<p>　　感觉这两天的状态有点手忙脚乱的感觉，一是自从开始研究前端的知识以及和后端的交互，都是一头雾水的，需要学习的东西太多，而又不怎么能抓住重点；二是课程的各种任务和实验，拖延症导致的疲于应对。今天git又出了点问题，明天要解决。</p>
<p>　　看着学长和小伙伴们做的热火朝天的，各种新功能都实现了，解决了一个又一个问题，心中不免失落。不管怎样，这两天做的事情总结如下：</p>
<p>　　1、 修正总后台店铺管理后端代码的bug和缺陷，研究与前端的交互。</p>
<p>　　2、 完成前端店铺信息卡的修改和相关链接的跳转，但是跳转到的页面还是并不符合要求，这是下一阶段的工作。修改相关路由以与本地服务器相匹配（过后往git上推代码的时候还要改回来）。</p>
<p>　　3、 陈明初步完成的店铺管理功能还有几个bug，此外还有与post请求和局部刷新等技术相关的难题没有解决。</p>
<p>　　4、 firefox用的UA要为MicroMessenger，才能测试森果的微信申请功能。</p>
<p>　　5、 html文件中可以调用py文件中的方法，举例如下（事先要先继承base.html）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tit1"</span><span style="color: #0000ff;">&gt;</span>序号：{{shop.id}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>申请时间：{{handler.code_to_text("create_date_timestamp",　shop.create_date_timestamp)}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p><em>　</em>　6、 这两天的文档文件备份在：worktile Daily，快盘 Daily，Firefox书签。　　　</p>
<p>&nbsp;【6.10 周三】</p>
<p>　　昨天晚上写数据库的实验报告到很晚，今天一直都昏昏沉沉的。一早醒来看到森果昨天夜里更新的系统出了一些问题，微信群里都是商家在反映各种bug，学长们都在忙碌着解决问题。</p>
<p>　　今天做的工作有：</p>
<p>　　1、 研究前端通过post请求和ajax与后端进行数据交互，解决局部刷新的问题。</p>
<p>　　2、 总后台店铺管理代码bug的排查，这要在post请求交互数据的代码中处理。</p>
<p>　　3、 感觉对于js很不熟练，对于jquery框架也不是很熟悉，从前认为的前端开发就是写写html和css的想法完全是错误的，前端的重中之重是js。</p>
<p>　　4、 学长又分配了新任务，实现总后台的订单统计功能，要用统计图的形式统计展现出来，这个可以参考店铺后台的订单统计的前端和后端的实现方法。</p>
<p>　　5、 这一阶段要恶补一下js的知识（主要是敲w3school上的代码）。现在有个感受是后台的简单功能实现有很多现成的代码可以参考可以模仿，但是前端的实现以及与后端的交互这一块必须对原理有了透彻的理解后才能实现功能。</p>
<p>　　6、 以后熬夜不能超过一点半，否则第二天完全是昏昏沉沉的状态，做什么都没有效率。</p>
<p>　　7、 要整理一下worktile的文档了，现在开始显得有些杂乱了。</p>
<p>　　8、 今天的文档文件备份在：worktile Daily,快盘Daily,firefox书签。</p>
<p>&nbsp;【6.15 周一】</p>
<p>　　今天所做的工作有：</p>
<p>　　1、 实现了总后台的订单统计功能的python/js/html开发，绘出统计图表。发现echarts是个功能很强大的东西，特别在数据统计方面，功能很实用，很丰富，很酷炫。</p>
<p>　　2、 修正了之前总后台店铺管理的几个BUG：</p>
<p>　　　　①shop表营业额字段的自动更新处理</p>
<p>　　　　解决方法:&nbsp;</p>
<p>　　　　分别在staff.py和admin.py的shop.order_count += 1语句后添加:</p>
<p>　　　　　　totalprice_inc = order.totalPrice&nbsp;<br />　　　　　　shop.shop_property += totalprice_inc</p>
<p>　　　　经测试,原bug成功解决</p>
<p>　　　　②总后台店铺申请页面布局有错误</p>
<p>　　　　经过反复测试发现是在有未处理的店铺申请的时候才会出现布局错乱,于是重点排查对店铺申请进行处理的html代码,发现了问题所在.</p>
<p>　　　　解决方法:&nbsp;<br />　　　　　　apply-manage.html第86行左右{% end %}的位置错误,且多了两个右div。</p>
<p>　　　　③其他几个小BUG。</p>
<p>　　3、 这两天每天实现新功能后就往git上推代码，经历过之前几天使用git的磕磕绊绊，现在已经能够熟练使用git推代码了，无非是三步曲：</p>
<p>　　　　假设当前的本地工作分支为jyj．</p>
<p>　　　　①$ git fetch origin 远程分支名:tmp &nbsp;(tmp为本地临时分支)&nbsp; #把代码从远程分支上更新到本地的tmp分支上．</p>
<p>　　　　②$ git merge tmp &nbsp;(将tmp与当前分支合并，如果有冲突，手动修改冲突)　　#合并tmp分支到当前工作分支，并手动修改冲突．</p>
<p>　　　　③$ git push origin jyj:远程分支名　　#将合并后的本地工作分支推到远程分支上，如果指定的远程分支不存在，则新创建一个分支．</p>
<p>　　　　实现的新功能已经在测试服务器上跑起来了。</p>
<p>　　4、 现在所用的从前端到后端的技术总结起来主要是这些：python后端－js中间层－html前端－css样式修饰．</p>
<p>　　5、 python3和mysql的datetime数据类型好像不兼容，这个明天要和学长进一步讨论．</p>
<p>　　6、 今天的文档和文件保存在：worktile Daily，快盘，书签Daily，github．</p>
<p>【6.17 周三】</p>
<p>　　近几日主要任务：总后台每日对账功能。</p>
<p>　　1、 增加总后台页面的回到顶部按钮：<br />　　　　*base.html<br />　　　　*superadmin-global.css<br />　　　　*global.js</p>
<p>　　2、 每日对账html</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">count-balance.html</span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">add by jyj 2015-6-16</span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;">3</span> 
<span style="color: #008080;">4</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="admin nav_item {{check_active}}"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('superCheckCash')}}"</span><span style="color: #0000ff;">&gt;</span>每日对账<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span> <span style="color: #008000;">&lt;!----&gt;</span></pre>
</div>
<p>　　3、&nbsp;遇到问题: Python 'result' cannot be converted to a MySQL type <br />　　　　查询数据库返回的结果是一个元组,只需取第0个元素即可.</p>
<p>　　4、 tornado的标签(if-else,for)</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">{% if his["type"] == 2 %}
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tit1 orange-txt"</span><span style="color: #0000ff;">&gt;</span>-{{his["balance_value"]}}元<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span> <span style="color: #000000;">{% else %}
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tit1 orange-txt"</span><span style="color: #0000ff;">&gt;</span>+{{his["balance_value"]}}元<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> <span style="color: #000000;">{% end %}
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">for:
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">{% for i in range(10)%}
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">do something
</span><span style="color: #008080;">10</span> {% end %}</pre>
</div>
<p>　　5、&nbsp;每日对账<br />　　　　新建及修改文件:<br />　　　　(1).superAdmin/count-balance.html<br />　　　　(2).urls.py<br />　　　　(3).superadmin.py: class CheckCash<br />　　　　(4).superAdmin/balance-check.html<br />　　　　(5).balance-check.js</p>
<p>　　6、&nbsp;加功能流程:<br />　　　　①先确定在哪个模板网页上加功能---&gt;②在该网页上加上需要的html元素---&gt;③在该网页的顶部设置该元素的激活状态变量,并设定激活条件,以及该元素的跳转href名称,这样写:href={{reverse_url<br />('superCheckCash')}}---&gt;④在urls.py中添加该名称对应的路由以及superadmin.py中的新增加类的名称---&gt;⑤在superadmin.py中增加新的类,实现后台功能.先从简单开始,只写get方法,return渲染到新页面.之后再丰 <br />富功能---&gt;⑥添加名字为第⑤步中的渲染的网页名称的新网页,引用需要的基本框架,在其中添加简单的字符,以及在下方添加引用其对应的js文件---&gt;⑦新建第⑥步中需要的js空文件---&gt;⑧运行系统,看新增加的链接和<br />页面能否正常加载.如果正常加载,则进一步丰富系统功能.</p>
<p>&lt;div class="col-sm-12 col-md-12"&gt;&lt;/div&gt;</p>
<p>　　7、&nbsp;css垂直居中:.align-center{padding:1px;}</p>
<p>　　　　html空格:&amp;nbsp;<br />　　　　html换行:&lt;br&gt;</p>
<p>　　8、 html中js的src要放在继承的模板中才能生效.<br />　　　　或者导入src的{%block%}块名称要与模板相同才能生效.</p>
<p>　　9、 hide()和empty()方法均能让一个控件隐藏.</p>
<p>　　10、 点击一个按钮:<br />　　　　 &nbsp;1.让一个控件或div隐藏或消失．<br />　　　　 &nbsp;2.往一个div中新增内容.<br />　　　　 &nbsp;3.获取输入框中的输入内容．<br />　　　　 &nbsp;4.引起一个post方法．</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $("#wx").text("lalala"<span style="color: #000000;">)
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">var</span> wx = $("#wx-income"<span style="color: #000000;">).val()
</span><span style="color: #008080;">3</span> wx = wx.toFixed(2);保留两位小数</pre>
</div>
<p>　　11、&nbsp;js中加号被当成了连接符，如果要当做运算符，则先转换为整形或浮点型：<br />　　　　 &nbsp;parseFloat("123")=123</p>
<p>　　12、&nbsp;models.py中相关的类：<br />　　　　 &nbsp;class ApplyCashHistory　提现<br />　　　　 &nbsp;class BalanceHistory　通过record间接获取微信支付和阿里支付的钱数\</p>
<p>【6.18 周四】</p>
<p>　　1、 postjson方法这样用：<br />　　　　(1)在js中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> showCheckInfo(page){
</span><span style="color: #008080;"> 2</span> 　　<span style="color: #0000ff;">var</span> url = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> 　　<span style="color: #0000ff;">var</span> data = 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span> 　　<span style="color: #0000ff;">var</span> args=<span style="color: #000000;">{
</span><span style="color: #008080;"> 5</span> 　　　　<span style="color: #000000;">data:data
</span><span style="color: #008080;"> 6</span> 　　<span style="color: #000000;">};
</span><span style="color: #008080;"> 7</span> 　　$.postJson(url,args,<span style="color: #0000ff;">function</span><span style="color: #000000;">(res){
</span><span style="color: #008080;"> 8</span> 　　　　<span style="color: #0000ff;">if</span><span style="color: #000000;">(res.success){
</span><span style="color: #008080;"> 9</span> 　　　　　　<span style="color: #000000;">alert(res.output_data);
</span><span style="color: #008080;">10</span> 　　　　<span style="color: #000000;">}
</span><span style="color: #008080;">11</span> 　　<span style="color: #000000;">});
</span><span style="color: #008080;">12</span> }</pre>
</div>
<p>　　　　(2)在后台superadmin中:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@tornado.web.authenticated
</span><span style="color: #008080;">2</span> @SuperBaseHandler.check_arguments(<span style="color: #800000;">'</span><span style="color: #800000;">data:int</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> post(self):
</span><span style="color: #008080;">4</span> data = self.args[<span style="color: #800000;">"</span><span style="color: #800000;">data</span><span style="color: #800000;">"</span><span style="color: #000000;">]
</span><span style="color: #008080;">5</span> output_data = data + 333
<span style="color: #008080;">6</span> <span style="color: #0000ff;">return</span> self.send_success(output_data=output_data)</pre>
</div>
<p>　　　　运行后会弹出一个提示框,显示334.</p>
<p>　　　　当然也可以把data封装成一个复杂类型的数据包:<br />　　　　(1)js:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> showCheckInfo(page){
</span><span style="color: #008080;"> 2</span> 　　<span style="color: #0000ff;">var</span> url = ""<span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> 　　<span style="color: #0000ff;">var</span> data=<span style="color: #000000;">{};
</span><span style="color: #008080;"> 4</span> 　　data["a"] = 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 5</span> 　　data["b"] = 2<span style="color: #000000;">;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> 　　<span style="color: #0000ff;">var</span> args=<span style="color: #000000;">{
</span><span style="color: #008080;"> 8</span> 　　　　<span style="color: #000000;">data:data
</span><span style="color: #008080;"> 9</span> 　　<span style="color: #000000;">};
</span><span style="color: #008080;">10</span> 　　$.postJson(url,args,<span style="color: #0000ff;">function</span><span style="color: #000000;">(res){
</span><span style="color: #008080;">11</span> 　　　　<span style="color: #0000ff;">if</span><span style="color: #000000;">(res.success){
</span><span style="color: #008080;">12</span> 　　　　　　console.log(res.output_data["a"],res.output_data["b"<span style="color: #000000;">]);
</span><span style="color: #008080;">13</span> 　　　　<span style="color: #000000;">}
</span><span style="color: #008080;">14</span> 　　<span style="color: #000000;">});
</span><span style="color: #008080;">15</span> }</pre>
</div>
<p>　　　　(2)后台:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@tornado.web.authenticated
</span><span style="color: #008080;">2</span> @SuperBaseHandler.check_arguments(<span style="color: #800000;">'</span><span style="color: #800000;">data</span><span style="color: #800000;">'</span>) <span style="color: #008000;">#</span><span style="color: #008000;">这一行必须要写</span>
<span style="color: #008080;">3</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> post(self):
</span><span style="color: #008080;">4</span> data = self.args[<span style="color: #800000;">"</span><span style="color: #800000;">data</span><span style="color: #800000;">"</span><span style="color: #000000;">]
</span><span style="color: #008080;">5</span> output_data =<span style="color: #000000;"> data 
</span><span style="color: #008080;">6</span> output_data[<span style="color: #800000;">"</span><span style="color: #800000;">a</span><span style="color: #800000;">"</span>] = 555
<span style="color: #008080;">7</span> output_data[<span style="color: #800000;">"</span><span style="color: #800000;">b</span><span style="color: #800000;">"</span>] = 666
<span style="color: #008080;">8</span> <span style="color: #0000ff;">return</span> self.send_success(output_data=output_data)</pre>
</div>
<p>　　　　在控制台输出:555 666</p>
<p>　　3、 mysql获取当前日期函数:now() 返回年月日时分秒</p>
<p>　　4、 对于日期的一个处理:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> now = datetime.datetime.now() - datetime.timedelta(1<span style="color: #000000;">)
</span><span style="color: #008080;">2</span> start_date =<span style="color: #000000;"> datetime.datetime(now.year, now.month, now.day, 0)
</span><span style="color: #008080;">3</span> end_date = datetime.datetime(now.year, now.month, now.day, 23<span style="color: #000000;">)
</span><span style="color: #008080;">4</span> q = q.filter(models.Order.create_date &gt;=<span style="color: #000000;"> start_date,\
</span><span style="color: #008080;">5</span> models.Order.create_date &lt;= end_date)</pre>
</div>
<p>　　5、 mysql的有些函数sqlalchemy并不能用.</p>
<p>　　6、 收入总额要加入余额消费的数据．<br />　　7、 本来在对账的时候，是可以在js中根据加载完成后从后台get到的数据的控件的id得到然后进行比较的，不需要用post．但是考虑到数据精度，还是在js中向后台发post请求进行对账．</p>
<p>　　8、 js通过post向后台传递的键值对的值都是str型的，如果需要比较大小等操作需要进行参数转化．但后台通过post向js返回的数据类型还是本来的数据类型．</p>
<p>　　9、 python中format的结果是str型（千万要注意！），而round方法的结果才是字符型，但round方法只能用于浮点数．<br />　　　　如：a = round(3.445,2),则a = 3.45,type(a)为float</p>
<p>　　10、 考虑每天的对账信息都要记录下来，所以在数据库新建立一个对账表check_profit：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span><span style="color: #000000;"> check_profit(
</span><span style="color: #008080;"> 2</span> id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">5</span>) <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span> <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;"> 3</span> create_time <span style="color: #0000ff;">datetime</span> <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">, 
</span><span style="color: #008080;"> 4</span> is_checked <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">1</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 5</span> wx_record <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span> wx_count_record <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 7</span> alipay_record <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 8</span> alipay_count_record <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 9</span> widt_record <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">10</span> widt_count_record <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">11</span> total_record <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">12</span> total_count_record <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> wx <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">15</span> wx_count <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">16</span> alipay <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">17</span> alipay_count <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">18</span> widt <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">19</span> widt_count <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">20</span> total <span style="color: #0000ff;">float</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">21</span> total_count <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span>
<span style="color: #008080;">22</span> );</pre>
</div>
<p>　　11、 sqlalchemy向数据库中加数据示例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> balance_history = models.BalanceHistory(balance_record = <span style="color: #800000;">'</span><span style="color: #800000;">提现：管理员 </span><span style="color: #800000;">'</span>+name,balance_type =<span style="color: #000000;">\
</span><span style="color: #008080;">2</span> 2,balance_value = apply_cash.value ,customer_id = apply_cash.shop.admin.accountinfo.id,name =<span style="color: #000000;"> \
</span><span style="color: #008080;">3</span> name,shop_id = apply_cash.shop_id,shop_totalPrice = shop.shop_balance,superAdmin_id =<span style="color: #000000;"> \
</span><span style="color: #008080;">4</span> self.current_user.id,available_balance =<span style="color: #000000;"> shop.available_balance)
</span><span style="color: #008080;">5</span> <span style="color: #000000;">self.session.add(balance_history)
</span><span style="color: #008080;">6</span> self.session.commit()</pre>
</div>
<p>　　12、 数据库查询时offset和limit的用法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> balance_history = self.session.query(models.BalanceHistory).filter(models.BalanceHistory.shop_id == shop_id,models.BalanceHistory.balance_type.in_([0,2,3<span style="color: #000000;">])).order_by(desc 
</span><span style="color: #008080;">2</span> (models.BalanceHistory.create_time)).offset(page*page_size).limit(page_size).all()</pre>
</div>
<p>　　　　注意：offset和limit要用在filter,order_by等的后面．offset表示先取偏移量，然后limit表示从偏移量位置开始取多少个．常用于分页．而且偏移量是从0开始的．</p>
<p>　　13、 python和js中的/不是整除，而是带小数的除法．</p>
<p>　　14、 每天对账单的唯一性问题</p>
<p>【6.20 周六】</p>
<p>　　1、 data={}要放在循环里，否则会有诡异的错误<br />　　2、 sqlalchemy delete操作用法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> self.session.query(models.CheckProfit).filter(models.CheckProfit.create_time == end_date,models.CheckProfit.is_checked==0).delete()</pre>
</div>
<p>　　3、 js中attr<br />　　4、 分页:两种分页方法的困惑.(页面加载时候就发post请求,在js中写渲染页面的代码的方案比较可行,简洁);js模板引擎.<br />　　5、 table标签<br />　　6、 js有时候有语法错但不提示,会导致莫名其妙的错误.<br />　　7、 html中if-else等的用法;块的用法(tornado).<br />　　8、 js中slice(m,n)函数相当于python中的切片操作.</p>
<p>　　9、 js强制类型转化：parseInt(),parseFloat()<br />　　10、 js post分页技术总结：<br />　　　　 &nbsp;(1)第1步：在html中建空表并用class（或id）标记，建上一页下一页按钮并用class或id标识：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="pull-left"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">table </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tb-account"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">table</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">nav</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="pager mlf300"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 8</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="javascript:;"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="PrePage"</span><span style="color: #0000ff;">&gt;</span><span style="color: #ff0000;">&amp;larr;</span> 上一页<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="PageNow green-txt"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="javascript:;"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="NextPage"</span><span style="color: #0000ff;">&gt;</span>下一页<span style="color: #ff0000;">&amp;rarr;</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">nav</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　 &nbsp;(2)第2步：在js中页面加载里面就引入渲染表格的方法showHistory(page)，该方法需要向后台发post请求以得到返回数据，而且需要一个page参数：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">var</span> page_sum = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">var</span> page_size = 20<span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">var</span> page = 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span> $(document).ready(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">getPageSum();
</span><span style="color: #008080;"> 6</span> showHistory(1<span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">})
</span><span style="color: #008080;"> 8</span> showHistory(page)方法示例如下，其中用到了js模板引擎的技术：（一个小问题：在模板引擎中的html语句中怎样使用if-<span style="color: #0000ff;">else</span><span style="color: #000000;">）
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> showHistory(page){
</span><span style="color: #008080;">10</span> <span style="color: #0000ff;">var</span> url=''<span style="color: #000000;">;
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">var</span> args=<span style="color: #000000;">{page:page};
</span><span style="color: #008080;">12</span> $.postJson(url,args,<span style="color: #0000ff;">function</span>(res){ <span style="color: #008000;">//</span><span style="color: #008000;">post方法根据page参数获取要显示的数据</span>
<span style="color: #008080;">13</span> <span style="color: #0000ff;">if</span><span style="color: #000000;">(res.success){
</span><span style="color: #008080;">14</span> <span style="color: #0000ff;">var</span> page_sum_now =<span style="color: #000000;"> parseInt(page_sum) ;
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">if</span>(page_sum_now &lt;<span style="color: #000000;"> page_sum){
</span><span style="color: #008080;">16</span> page_sum_now = page_sum_now + 1<span style="color: #000000;">;
</span><span style="color: #008080;">17</span> <span style="color: #000000;">}
</span><span style="color: #008080;">18</span> $(".PageNow").text('-'+page+'/'+page_sum_now+'-'<span style="color: #000000;">);
</span><span style="color: #008080;">19</span> <span style="color: #0000ff;">var</span> history =<span style="color: #000000;"> res.history;
</span><span style="color: #008080;">20</span> $('.tb-account').empty(); <span style="color: #008000;">//</span><span style="color: #008000;">千万要注意每次刷新新的一页之前都要先清空之前的表格，否则显示的内容会累加，达不到分页的效果</span>
<span style="color: #008080;">21</span> <span style="color: #0000ff;">for</span>(i = 0;i&lt;history.length;i++){ <span style="color: #008000;">//</span><span style="color: #008000;">获取的数据history为一个列表，该列表的元素为字典</span>
<span style="color: #008080;">22</span> his =<span style="color: #000000;"> history[i];
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> <span style="color: #0000ff;">var</span> item= '&lt;tr&gt;' <span style="color: #008000;">//</span><span style="color: #008000;">待会儿要向html的表格中添加的项，其中的数据在后面需要渲染。width属性可以控制每一列显示的每个元素的宽度所占的百分比</span>
<span style="color: #008080;">25</span> +'<span style="color: #000000;">&lt;td class="pl10" width="20%"&gt;店铺：&lt;a href="/{{shop_code}}" title="点击查看该店铺余额详情" target="_blank" class=" text-blue"&gt;{{shop_name}} 
</span><span style="color: #008080;">26</span> &lt;/a&gt;&lt;/td&gt;'
<span style="color: #008080;">27</span> +'&lt;td width="17%"&gt;{{record}}{{name}}&lt;/td&gt;'
<span style="color: #008080;">28</span> +'&lt;td width="21%"&gt;{{order_num_txt}}&lt;a href="/super/orderManage/" target="_blank" class="text-blue"&gt;{{order_num}}&lt;/a&gt;&lt;/td&gt;'
<span style="color: #008080;">29</span> +'&lt;td class="text-gray" width="15%"&gt;{{time}}&lt;/td&gt;'
<span style="color: #008080;">30</span> +'&lt;td class="txt-ar" width="12%"&gt;&lt;span class="orange-txt"&gt;{{balance_value}}&lt;/span&gt;元&lt;/td&gt;'
<span style="color: #008080;">31</span> +'&lt;td class="txt-ar pr10" width="15%"&gt;&lt;span class="green-txt"&gt;{{balance}}&lt;/span&gt;元&lt;/td&gt;'
<span style="color: #008080;">32</span> '&lt;/tr&gt;'
<span style="color: #008080;">33</span> <span style="color: #0000ff;">var</span> render=template.compile(item); <span style="color: #008000;">//</span><span style="color: #008000;">生成渲染器</span>
<span style="color: #008080;">34</span> 
<span style="color: #008080;">35</span> <span style="color: #008000;">//</span><span style="color: #008000;">给变量赋值</span>
<span style="color: #008080;">36</span> <span style="color: #0000ff;">var</span> shop_code = his["shop_code"<span style="color: #000000;">];
</span><span style="color: #008080;">37</span> <span style="color: #0000ff;">var</span> shop_name= his["shop_name"<span style="color: #000000;">];
</span><span style="color: #008080;">38</span> <span style="color: #0000ff;">if</span>(shop_name.length &gt;=8<span style="color: #000000;">){
</span><span style="color: #008080;">39</span> shop_name = shop_name.slice(0,7) + '...'<span style="color: #000000;">;
</span><span style="color: #008080;">40</span> <span style="color: #000000;">}
</span><span style="color: #008080;">41</span> <span style="color: #0000ff;">var</span> type = his["type"<span style="color: #000000;">];
</span><span style="color: #008080;">42</span> <span style="color: #0000ff;">var</span> record = his["record"<span style="color: #000000;">];
</span><span style="color: #008080;">43</span> <span style="color: #0000ff;">var</span> name = his["name"<span style="color: #000000;">]
</span><span style="color: #008080;">44</span> <span style="color: #0000ff;">if</span>(name.length &gt;=6<span style="color: #000000;">){
</span><span style="color: #008080;">45</span> name =name.slice(0,5)+'...'<span style="color: #000000;">;
</span><span style="color: #008080;">46</span> <span style="color: #000000;">}
</span><span style="color: #008080;">47</span> <span style="color: #0000ff;">var</span> order_num_txt = his["order_num_txt"<span style="color: #000000;">];
</span><span style="color: #008080;">48</span> <span style="color: #0000ff;">var</span> order_num = his["order_num"<span style="color: #000000;">];
</span><span style="color: #008080;">49</span> <span style="color: #0000ff;">var</span> time=his["time"<span style="color: #000000;">];
</span><span style="color: #008080;">50</span> <span style="color: #0000ff;">var</span> balance_value = his["balance_value"<span style="color: #000000;">];
</span><span style="color: #008080;">51</span> <span style="color: #0000ff;">if</span>(type == 2<span style="color: #000000;">){
</span><span style="color: #008080;">52</span> balance_value = '-' +<span style="color: #000000;"> balance_value;
</span><span style="color: #008080;">53</span> <span style="color: #000000;">}
</span><span style="color: #008080;">54</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">55</span> balance_value = '+' +<span style="color: #000000;"> balance_value;
</span><span style="color: #008080;">56</span> <span style="color: #000000;">}
</span><span style="color: #008080;">57</span> <span style="color: #0000ff;">var</span> balance = his["balance"<span style="color: #000000;">];
</span><span style="color: #008080;">58</span> 
<span style="color: #008080;">59</span> <span style="color: #008000;">//</span><span style="color: #008000;">渲染表格项</span>
<span style="color: #008080;">60</span> <span style="color: #0000ff;">var</span> list_item =<span style="color: #000000;">render({
</span><span style="color: #008080;">61</span> <span style="color: #000000;">shop_code:shop_code,
</span><span style="color: #008080;">62</span> <span style="color: #000000;">shop_name:shop_name,
</span><span style="color: #008080;">63</span> <span style="color: #000000;">type:type,    
</span><span style="color: #008080;">64</span> <span style="color: #000000;">record:record,
</span><span style="color: #008080;">65</span> <span style="color: #000000;">name:name,
</span><span style="color: #008080;">66</span> <span style="color: #000000;">order_num_txt:order_num_txt,
</span><span style="color: #008080;">67</span> <span style="color: #000000;">order_num:order_num,
</span><span style="color: #008080;">68</span> <span style="color: #000000;">time:time,
</span><span style="color: #008080;">69</span> <span style="color: #000000;">balance_value:balance_value,
</span><span style="color: #008080;">70</span> <span style="color: #000000;">balance:balance
</span><span style="color: #008080;">71</span> <span style="color: #000000;">});
</span><span style="color: #008080;">72</span> 
<span style="color: #008080;">73</span> <span style="color: #008000;">//</span><span style="color: #008000;">向表格中添加渲染后的项：</span>
<span style="color: #008080;">74</span> $('.tb-account'<span style="color: #000000;">).append(list_item);
</span><span style="color: #008080;">75</span> <span style="color: #000000;">}
</span><span style="color: #008080;">76</span> <span style="color: #000000;">}
</span><span style="color: #008080;">77</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">78</span> <span style="color: #000000;">alert(res.error_text);
</span><span style="color: #008080;">79</span> <span style="color: #000000;">}
</span><span style="color: #008080;">80</span> <span style="color: #000000;">},
</span><span style="color: #008080;">81</span> <span style="color: #0000ff;">function</span>(){alert('网络好像不给力呢~ ( &gt;O&lt; ) ~'<span style="color: #000000;">);}
</span><span style="color: #008080;">82</span> <span style="color: #000000;">);
</span><span style="color: #008080;">83</span> }</pre>
</div>
<p>　　　　 &nbsp;(3)第3步：添加上一页和下一页按钮的click事件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> $(document).ready(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">getPageSum();
</span><span style="color: #008080;"> 3</span> showHistory(1<span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> }).on("click","#PrePage",<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">if</span>(page == 1<span style="color: #000000;">){
</span><span style="color: #008080;"> 6</span> alert("当前已经是第一页了～"<span style="color: #000000;">);
</span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">}
</span><span style="color: #008080;"> 9</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">10</span> page--<span style="color: #000000;">;
</span><span style="color: #008080;">11</span> <span style="color: #000000;">showHistory(page);
</span><span style="color: #008080;">12</span> <span style="color: #000000;">}
</span><span style="color: #008080;">13</span> }).on("click","#NextPage",<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> <span style="color: #0000ff;">if</span>(page &gt;=<span style="color: #000000;"> page_sum){
</span><span style="color: #008080;">16</span> alert("当前已经是最后一页了～"<span style="color: #000000;">);
</span><span style="color: #008080;">17</span> <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;">18</span> }<span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">19</span> page++<span style="color: #000000;">;
</span><span style="color: #008080;">20</span> <span style="color: #000000;">showHistory(page);
</span><span style="color: #008080;">21</span> <span style="color: #000000;">}
</span><span style="color: #008080;">22</span> });</pre>
</div>
<p>　　11、 从数据库中删除数据示例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> self.session.query(models.CheckProfit).filter(models.CheckProfit.create_time == end_date,models.CheckProfit.is_checked==0).delete()</pre>
</div>
<p>　　12、 其实如果对账成功，那么CheckProfit表中的记录值和实际值肯定是一样的；如果还没有对账，那么CheckProfit表中只会有记录值。所以向前台返回数据的时候没有必要把所有数据都返回，而只需要把记录的数据返回 <br />即可。<br />　　13、 sublime中html还是识别不了注释。</p>
<p>　　14、 经常将js和python的变量定义方法搞混...python的普通变量定义是可以直接拿来就用的，而js是要写var的，切记！！！js不写var的变量是全局变量。</p>
<p>　　15、 今日数据：快盘，github.</p>
<p>【6.21 周日】</p>
<p>　　1、 mysql中日期格式转换函数：<br />　　　　DATE_FORMAT(date,format)<br />　　　　根据format字符串格式化date值。下列修饰符可以被用在format字符串中： %M 月名字(January&hellip;&hellip;December)</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #808080;">%</span><span style="color: #000000;">W 星期名字(Sunday&hellip;&hellip;Saturday)
</span><span style="color: #008080;"> 2</span> <span style="color: #808080;">%</span><span style="color: #000000;">D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）
</span><span style="color: #008080;"> 3</span> <span style="color: #808080;">%</span>Y 年, 数字, <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;"> 位
</span><span style="color: #008080;"> 4</span> <span style="color: #808080;">%</span>y 年, 数字, <span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;"> 位
</span><span style="color: #008080;"> 5</span> <span style="color: #808080;">%</span><span style="color: #000000;">a 缩写的星期名字(Sun&hellip;&hellip;Sat)
</span><span style="color: #008080;"> 6</span> <span style="color: #808080;">%</span>d 月份中的天数, 数字(<span style="color: #800000; font-weight: bold;">00</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">31</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 7</span> <span style="color: #808080;">%</span>e 月份中的天数, 数字(<span style="color: #800000; font-weight: bold;">0</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">31</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 8</span> <span style="color: #808080;">%</span>m 月, 数字(<span style="color: #800000; font-weight: bold;">01</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">12</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 9</span> <span style="color: #808080;">%</span>c 月, 数字(<span style="color: #800000; font-weight: bold;">1</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">12</span><span style="color: #000000;">)
</span><span style="color: #008080;">10</span> <span style="color: #808080;">%</span>b 缩写的月份名字(Jan&hellip;&hellip;<span style="color: #0000ff;">Dec</span><span style="color: #000000;">)
</span><span style="color: #008080;">11</span> <span style="color: #808080;">%</span>j 一年中的天数(<span style="color: #800000; font-weight: bold;">001</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">366</span><span style="color: #000000;">)
</span><span style="color: #008080;">12</span> <span style="color: #808080;">%</span>H 小时(<span style="color: #800000; font-weight: bold;">00</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">23</span><span style="color: #000000;">)
</span><span style="color: #008080;">13</span> <span style="color: #808080;">%</span>k 小时(<span style="color: #800000; font-weight: bold;">0</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">23</span><span style="color: #000000;">)
</span><span style="color: #008080;">14</span> <span style="color: #808080;">%</span>h 小时(<span style="color: #800000; font-weight: bold;">01</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">12</span><span style="color: #000000;">)
</span><span style="color: #008080;">15</span> <span style="color: #808080;">%</span>I 小时(<span style="color: #800000; font-weight: bold;">01</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">12</span><span style="color: #000000;">)
</span><span style="color: #008080;">16</span> <span style="color: #808080;">%</span>l 小时(<span style="color: #800000; font-weight: bold;">1</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">12</span><span style="color: #000000;">)
</span><span style="color: #008080;">17</span> <span style="color: #808080;">%</span>i 分钟, 数字(<span style="color: #800000; font-weight: bold;">00</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">59</span><span style="color: #000000;">)
</span><span style="color: #008080;">18</span> <span style="color: #808080;">%</span>r 时间,<span style="color: #800000; font-weight: bold;">12</span> 小时(hh:mm:ss <span style="color: #ff0000;">[</span><span style="color: #ff0000;">AP</span><span style="color: #ff0000;">]</span><span style="color: #000000;">M)
</span><span style="color: #008080;">19</span> <span style="color: #808080;">%</span>T 时间,<span style="color: #800000; font-weight: bold;">24</span><span style="color: #000000;"> 小时(hh:mm:ss)
</span><span style="color: #008080;">20</span> <span style="color: #808080;">%</span>S 秒(<span style="color: #800000; font-weight: bold;">00</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">59</span><span style="color: #000000;">)
</span><span style="color: #008080;">21</span> <span style="color: #808080;">%</span>s 秒(<span style="color: #800000; font-weight: bold;">00</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">59</span><span style="color: #000000;">)
</span><span style="color: #008080;">22</span> <span style="color: #808080;">%</span><span style="color: #000000;">p AM或PM
</span><span style="color: #008080;">23</span> <span style="color: #808080;">%</span>w 一个星期中的天数(<span style="color: #800000; font-weight: bold;">0</span><span style="color: #808080;">=</span>Sunday &hellip;&hellip;<span style="color: #800000; font-weight: bold;">6</span><span style="color: #808080;">=</span><span style="color: #000000;">Saturday ）
</span><span style="color: #008080;">24</span> <span style="color: #808080;">%</span>U 星期(<span style="color: #800000; font-weight: bold;">0</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">52</span><span style="color: #000000;">), 这里星期天是星期的第一天
</span><span style="color: #008080;">25</span> <span style="color: #808080;">%</span>u 星期(<span style="color: #800000; font-weight: bold;">0</span>&hellip;&hellip;<span style="color: #800000; font-weight: bold;">52</span><span style="color: #000000;">), 这里星期一是星期的第一天
</span><span style="color: #008080;">26</span> <span style="color: #808080;">%%</span> 一个文字&ldquo;<span style="color: #808080;">%</span>&rdquo;。</pre>
</div>
<p>　　2、 datetime.timedelta(1)的结果为：1 day,0:00:00</p>
<p>　　3、 balance_history表是不管每天有没有记录都会自动创建吗？<br />　　4、 检查昨天的对账单是否创建，如果没有创建，说明balance_history的昨天的在线支付、用户余额充值的记录为空，说明昨天的对账单的记录值为0，这还是要创建check_profit表的昨天的数据的，只不过 <br />收入数据和提现数据每一项都为0.<br />　　5、 artTemplate 原生语法是否支持if...else：<br />　　　　这样的写法：<br />　　　　　　&lt;%if(&hellip;){%&gt; html &lt;%}else{%&gt; html &lt;%}%&gt;<br />　　　　或者这种写法：</p>
<p>　　　　　　{if ...}html{else}html{/if}<br />　　　　可是好像都用不了？<br />　　　　正确写法：<br />　　　　　　{{if ...}}...{{else}}..{{/if}}<br />　　6、 模板引擎arttemplate<br />　　7、解决artTemplate中不能使用if-else的问题：<br />　　　　这样解决：<br />　　　　　　(1)先提前判断条件type的取值：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span>(type == 2<span style="color: #000000;">){
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">var</span> item2 = '&lt;td width="17%"&gt;{{record}}{{name}}&lt;/td&gt;'<span style="color: #000000;">;
</span><span style="color: #008080;">3</span> <span style="color: #000000;">}
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">5</span> <span style="color: #0000ff;">var</span> item2 = '&lt;td width="17%"&gt;{{record}}&lt;a href="/super/user" title="点击查看该用户详情" target="_blank" class=" text-blue"&gt;{{name}}&lt;/a&gt;&lt;/td&gt;'<span style="color: #000000;">;
</span><span style="color: #008080;">6</span> }</pre>
</div>
<p>　　　　　　(2)然后将其加入item中：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> item= '&lt;tr&gt;'
<span style="color: #008080;">2</span> +'&lt;td class="pl10" width="20%"&gt;店铺：&lt;a href="/{{shop_code}}" title="点击查看该店铺商品首页" target="_blank" class=" text-blue"&gt;{{shop_name}}&lt;/a&gt;&lt;/td&gt;'
<span style="color: #008080;">3</span> +<span style="color: #000000;">item2
</span><span style="color: #008080;">4</span> +...</pre>
</div>
<p>　　　　　　(3)再生成模板渲染引擎：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> render=template.compile(item);</pre>
</div>
<p>　　　　　　(4)再按照原来的步骤做即可。</p>
<p>　　8、 css遮罩层</p>
<p>　　9、 js中动态生成的button用jquery怎样添加点击响应事件？<br />　　　　（jquery获取不到动态创建的元素id）<br />　　　　在js中动态生成了一个button，而且它的name是从数据库中获得是数据，也就是说我不知道当前点击的的button的id是什么，而且生成button是循环做的，一次会生成多个。我想用jquery获取他的name。 用js写的话可 <br />以onclick=function（this），想问用jquery怎么做？</p>
<p>　　10、 让css遮罩层不随滚动条的滚动而消失的方法：<br />　　　　 &nbsp;将遮罩层的position样式改为fixed即可。</p>
<p>　　11、 jQuery中在循环中绑定事件容易出现的问题.<br />　　　　 &nbsp;解决方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">...(artTemplate模板引擎代码)
</span><span style="color: #008080;">2</span> $(".tb-history"<span style="color: #000000;">).append(list_item);
</span><span style="color: #008080;">3</span> $("#btn-check-"+i).click(<span style="color: #0000ff;">function</span><span style="color: #000000;">(i){
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">5</span> alert(i+"xxxxxxxxxxxxx"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span> }; <span style="color: #008000;">//</span><span style="color: #008000;">如果在这个btn点击以后还要监听其他按钮的click事件，则要把其他按钮放在这个click事件中，而且也要用这种形式的函数。</span>
<span style="color: #008080;">7</span> }(i));</pre>
</div>
<p>【6.22 周一】</p>
<p>　　1、 jquery循环绑定只能获取到最后一个元素的值的问题;js闭包问题；代理。<br />　　2、 获取第i个子元素。<br />　　3、 each方法遍历。<br />　　4、 动态绑定的button的click事件中再添加其他button的click事件，但为什么连续发了好几个post请求？？</p>
<p>　　5、 重命名文件的命令：<br />　　　　mv a.txt b.txt #把文件a.txt重命名为b.txt</p>
<p>　　6、 总后台店铺余额详情和每日对账功能完成！<br />　　　　小结：<br />　　　　1.一开始的时候数据逻辑和功能逻辑没有理清楚，走了一些弯路。<br />　　　　2.分页的时候本来打算用url传值的方法，但是因为每个item要处理的数据较多，而且里面的button有点击事件，这样的方式实现起来比较复杂。后来参考了一下系统的有一部分代码，觉得从页面加载开始就用post方法 <br />+artTemplate模板引擎渲染页面的方式会比较好，但会影响一些效率。post方法在刚刚开始做的时候比较顺利，但是后来遇到了循环动态绑定的问题，按照常规的方法无法获取到动态生成的元素的id,着实费了很大一番 <br />功夫才解决。在这个过程中遇到了js的代理、闭包等高阶的技术，到现在还是云里雾里的，需要好好学习一下，以后还要用到。<br />　　　　3.因为要实现点击按钮弹出一个输入多个数据窗口的功能，一开始想的是js里有没有现成的这样的控件来用，后来发现还真的没有,在周兵学长的提示下，去网上查了js+css遮罩层的技术，发现正符合要求，于是仿照 <br />demo实现了这个功能。<br />　　　　4.通过这个功能的实现，对新功能实现的从前台到后台的整个流程已经很熟悉了，对js/css/html三者的了解更多了，能在新功能中熟练操作它们。css的调试好费神。。<br />　　　　5.html中table元素在显示列表的时候很规整，看起来很舒服，最好配合artTemplate引擎渲染。<br />　　　　6.对js的测试技术感受很深：处处用alert...alert是个好东西，还是不会用firebug的调试功能。</p>
<p>　　7、 新任务：总后台-用户。用户选项里，增加用户ID 、出生日期 的显示。 增加搜索：id、用户昵称</p>
<p>　　8、 相关文件：superadmin.py,superadmin-user.js,user.html,user-item.html,superadmin-user.css,models.py<br />　　9、 python将时间戳转化为日期：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> b_time_stamp = 776361600
<span style="color: #008080;">2</span> <span style="color: #0000ff;">print</span><span style="color: #000000;">(type(b_time_stamp))
</span><span style="color: #008080;">3</span> dateArray =<span style="color: #000000;"> datetime.datetime.utcfromtimestamp(b_time_stamp)
</span><span style="color: #008080;">4</span> birthday = dateArray.strftime(<span style="color: #800000;">"</span><span style="color: #800000;">%Y年%m月%d日</span><span style="color: #800000;">"</span><span style="color: #000000;">)
</span><span style="color: #008080;">5</span> <span style="color: #0000ff;">print</span>(birthday)</pre>
</div>
<p>　　　　输出：1994年08月08日</p>
<p>　　10、 python中list方法</p>
<p>　　11、 点击链接变成了绿色而并列的其他链接变回原来的颜色，这是怎么实现的？(当点击链接后链接变色，切换别的链接，又恢复原来样子)<br />　　　　解决方案：<br />　　　　1.首先在html中有类似这样的代码，表示3个链接（注意其中&lsquo;{{}}&rsquo;中的变量）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="all nav_item {{detail_active}}"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('superBalance')}}"</span><span style="color: #0000ff;">&gt;</span>余额详情<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 4</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="admin nav_item {{cash_active}}"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('superApplyCash')}}"</span><span style="color: #0000ff;">&gt;</span>提现申请<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> add by jyj 2015-6-17 </span><span style="color: #008000;">--&gt;</span>
<span style="color: #008080;"> 8</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="admin nav_item {{check_active}}"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('superCheckCash')}}"</span><span style="color: #0000ff;">&gt;</span>每日对账<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　2.在html顶部写类似于这样的语句：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">{% set page = context.get("page", "detail")%}
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">{% set detail_active = ""%}
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">{% set cash_active = ""%}
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">{% set check_active = ""%}
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">{% if page == "detail"%}
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">{% set detail_active = "active"%}
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">{% elif page == "cash"%}
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">{% set cash_active = "active"%}
</span><span style="color: #008080;">10</span> <span style="color: #000000;">{% else %}
</span><span style="color: #008080;">11</span> <span style="color: #000000;">{% set check_active = "active"%}
</span><span style="color: #008080;">12</span> {% end %}</pre>
</div>
<p>　　　　3.在后台实现该功能的类中，在get方法最后render的时候要有context属性，类似于这样：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> get(self):
</span><span style="color: #008080;">2</span> <span style="color: #000000;">...
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">return</span> self.render(<span style="color: #800000;">"</span><span style="color: #800000;">superAdmin/balance-check.html</span><span style="color: #800000;">"</span>,output_data=output_data,context=dict(page=<span style="color: #800000;">'</span><span style="color: #800000;">check</span><span style="color: #800000;">'</span>))</pre>
</div>
<p>　　　　4.在某一个相关的全局css中要有li标签的active属性的颜色值，或者a标签的visited属性的颜色值。</p>
<p>【6.23 周二】</p>
<p>　　1、 bug:总后台用户管理中点击&lsquo;关注的店铺&rsquo;后跳转到一个错误页面：已解决！a标签的href属性错误问题。<br />　　2、 bug:总后台店铺管理所有店铺中，点击搜索后搜索结果中的店铺名称消失了：已解决！在js中刷新搜索结果的页面时没有添加店铺名的a标签值。<br />　　3、 js中即时搜索的实现：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> input = $("#inputinfo");  <span style="color: #008000;">//</span><span style="color: #008000;">inputinfo表示搜索输入框的id</span>
<span style="color: #008080;">2</span> input.on('keyup',<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">3</span>         page=0<span style="color: #000000;">;
</span><span style="color: #008080;">4</span>         getSearchContent('search',$("#inputinfo"<span style="color: #000000;">).val(),page);
</span><span style="color: #008080;">5</span> });  <span style="color: #008000;">//</span><span style="color: #008000;">getSearchContent是向后台发出post请求并根据返回的数据渲染页面的函数。</span></pre>
</div>
<p>　　4、 sqlalchemy中将整形转化为字符串的函数：<br />　　　　func.concat(models.Accountinfo.id,'')<br />　　5、 sqlalchemy中like的用法：<br />　　　　q = q.filter(or_(models.Accountinfo.nickname.like("%{0}%".format(inputinfo)),(func.concat(models.Accountinfo.id,'')).like("%{0}%".format(inputinfo))))<br />　　6、 完成总后台用户管理搜索和完善信息卡功能！</p>
<p>　　7、 数据备份：快盘．</p>
<p>【6.24 周三】</p>
<p>　　1、 bug:在测试服务器上看，总后台店铺余额详情页面上方的"提现中"数据有问题，显示的是当前系统最新的提现数据，而不是该店铺的正在提现的数据．</p>
<p>　　2、 优化：总后台订单统计的送达时间统计的"昨日数据"的查询效率很低．</p>
<p>　　3、 bug:超级管理员用户管理js报错：TypeError: fshop[j] is undefined:已解决！<br />　　　　原因：在压缩用户名的时候，没判断用户关注的店铺是否为空，导致出现关注店铺列表不存在的情况．</p>
<p>　　4、 mysql把时间戳转化为日期：<br />　　　　　　mysql&gt;SELECT FROM_UNIXTIME( 1249488000, '%Y%m%d' ) &nbsp;<br />　　　　　　-&gt;20071120 <br />　　5、 问题：python用如下方法把时间戳转化为日期结果少一天：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> b_time_stamp = 541008000
<span style="color: #008080;">2</span> dateArray =<span style="color: #000000;"> datetime.datetime.utcfromtimestamp(b_time_stamp)
</span><span style="color: #008080;">3</span> birthday = dateArray.strftime(<span style="color: #800000;">"</span><span style="color: #800000;">%Y-%m-%d</span><span style="color: #800000;">"</span>)</pre>
</div>
<p>　　　　　　输出为：1987-2-22<br />　　　　　　而实际上应为：1987-2-23<br />　　　　　　(好像是python的一个bug...)<br />　　　　解决方法：用mysql的时间戳转换函数．<br />　　6、 bug:总后台用户管理搜索以后再刷新页面再点下一页会没有东西，必须把搜索框中的内容删除掉才会正常：搜索框缓存清理问题．<br />　　　　解决方法：在js的getContent方法开始加上一句代码：$("inputinfo").val('');　　清空输入框缓冲区，即可解决问题．</p>
<p>　　7、 数据，代码和文档备份：快盘．</p>
<p>【6.29 周一】</p>
<p>　　又是一个周一，发现已经两周没有更新博客了。之前一周多一直在加班和复习期末考试，再加上自身的拖延症，导致一搁置就是两周。不过技术上，之前每天的工作日志文档记录的都很详细，遇到、解决的问题和Bug也有记录；生活上，复习复习复习+实验报告实验报告实验报告，呃...当然每天和她在一起复习还是很棒很棒的。</p>
<p>　　今天是期末考试的第一天，复习之余来点小总结放松一下。</p>
<p>　　第一件事，前天下午去光谷创业咖啡参加的segmentfault组织的技术沙龙，真心不错。第一次参加这种外面的技术沙龙，各个领域的大神很多，除了抽了两次kindle都没有抽到和热浪滚滚的天气以外，其他都还是很愉快的，特别是森哥专门为沙龙提供的水果很好吃，很解渴。</p>
<p>　　nodejs，x11，光谷社区，持续集成，单元测试，docker，自动化测试，GUI，开源字体github.com/ecomfe/fontmin...这些是关键词。一个小小的字体能玩出太多的花样，也可以搞各种优化；上古GUI&mdash;&mdash;Alt+Tab的底层原来有那么多的细节要考虑，自以为熟练使用GTK原来还差的远着呢。</p>
<p>　　深度科技的deepin操作系统印象深刻，感觉很适合程序员，爱折腾的程序员；圆桌会议的支持人贺钧大神原来是乔迁学长的哥们，世界略小。最后，光谷社区是个好地方。</p>
<p>　　第二件事，这两天写实验报告真是写苦了，各种排版，不得已把当时组原课设的实验报告拿来，用其中已经设置好的各种样式当模板了，当时老谭真是下了一番功夫，不得不说组原课设的模板真的很赞。完成实验报告以后于是决定狠下心来把各种报告、论文写作的基本和高端的排版技巧学一学，以后（至少一年之内）到处用得到，随后会在另一篇博文中经常更新每天get到的新技能。</p>
<p>　　第三件事，没有更新的两周的博客内容会在临近这周末的几天里总结出来，主要是各种技术问题。</p>
<p>【7.4 周六】</p>
<p>　　考完试后的第一天,感觉一下子轻松了不少.下午到公司，陈明因为家里有点事情要请一段时间的假，我自己在公司写了一下午和一个晚上代码．</p>
<p>　　今天完成的任务和遇到的问题总结如下：</p>
<p>　　1、 实现新功能：总后台余额详情表格中新增加一列，把所有店铺余额不为零的店铺名和店铺余额列出来，以及最近一次余额变动的时间．这个问题比较简单，只需从balancehistory表中查询，按照店铺id分组，查出每一组中create_time最大的项的店铺ID和店铺余额即可．可是在这个过程中遇到了问题，关于sqlalchemy的子查询和分组查询的问题，查出的数据一直不对，费了一番周折．最后想到了一个间接的方法，就是先把所有店铺的所有余额变动记录从balancehistory表中查询出来，并按create_time降序排序；然后用python对这个列表进行遍历，先设置一个空的记录表exist_id_list，每次循环先判断当前记录的shop_id是否在记录表中，如果不在，就把这条记录对应的shop_id加入记录表中，然后把shop_id，shop_totalprice，create_time三项数据插入一个字典中，然后把字典加入到一个列表中；如果在，就pass，进行下一轮循环．循环完毕后，得到的列表就是前端所需要的数据，再传给前端即可．</p>
<p>　　　　可是做完以后检查发现数据还是有些问题，经过测试发现通过上述方法计算出的系统总余额与通过shop.shop_balance累加出来的系统总余额不一致，前者比后者要多，但是核查每个店铺的帐又都是一致的．这个问题还是要等周一的时候跟学长讨论一下．</p>
<p>　　2、 今天遇到另外一个比较纠结的问题是，因为浏览器的cookie过期了，加上没有权限，之前能登进去的总后台今天突然登不进去了．安装了火狐浏览器的Advanced Cookie Manager插件查看cookie后才发现原来的cookie到6.26号已经过期了，而那些天正在期末考试没有发现．又折腾了好长时间才解决问题，解决的方法如下：</p>
<p>　　　　①安装火狐Advanced Cookie Manager插件。<br />　　　　②用学长的手机扫描i.senguo.cc的super登录页面二维码，此时登录cookie就已经存储在了cookie文件里。<br />　　　　③在刚刚安装的插件中找到zone.senguo.cc，删除它下面的所有cookie.再次登录zone.senguo.cc:8887/super，即可登录成功！　　　　</p>
<p>　　3、 今天还遇到这个类型问题：从表中用分组查询的方法查询年龄最大的人的姓名，正确的应该是这样：<br />　　　　select name from infotable where birthday = (select min(birthday) from infotable);<br />　　　　而不是：select name,min(birthday) from infotable;</p>
<p>　　　　例：有people表：</p>
<p>　　　　　　+----+------+-------+<br />　　　　　　| id | name | grade |<br />　　　　　　+----+------+-------+<br />　　　　　　|&nbsp; 1 | aa&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; 90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />　　　　　　|&nbsp; 2 | bb&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; 95 &nbsp; &nbsp;&nbsp; |<br />　　　　　　|&nbsp; 3 | cc &nbsp; |&nbsp;&nbsp;&nbsp; 87 &nbsp; &nbsp;&nbsp; |<br />　　　　　　+----+------+-------+</p>
<p>　　　　从中查询grade最低的人的姓名，如果这样查：select name,min(grade) from people;　　结果是：aa&nbsp; 87，显然不对；<br />　　　　正确的应该是这样查：select name from people where grade=(select min(grade) from people);　　结果是：cc，结果正确．</p>
<p>　　4、 之前写的每日对账功能存在一个bug：线上系统缺了一周的数据，而且数据更新逻辑有问题．</p>
<p>　　5、 js保留两位小数：number = number.toFixed(2)<br />　　　　python保留两位小数：number = round(number,2)</p>
<p>　　6、 今天发现senguo的git上有artTemplate的资料，大喜，要好好学习一下．</p>
<p>　　7、 数据，代码和文档备份：快盘．</p>
<p>【7.5 周日】</p>
<p>&nbsp;　　今天同事们都放假，只有我一个人坐在那里写代码．因为晚上要赶一篇论文，所以下午四五点时候就回去了．完成的主要工作有：</p>
<p>　　1、 修复昨天的bug:通过shop.shop_balance算出的系统总余额的账和通过balancehistory算出的帐有出入．<br />　　　　问题所在:后者的查询逻辑有问题，数据库筛选的时候漏掉了一个等于０的条件．<br />　　2、 修复了之前的一个bug:在线上服务器上看，总后台店铺余额详情页面上方的"提现中"数据有问题,显示的是当前系统最新的提现中的金额，而不是这家店铺的提现中金额．<br />　　　　原因：superadmin.py的ShopBalanceDetail类的get方法中，cash_applying = self.session.query(models.ApplyCashHistory.value).filter(models.　　　　　　　　　　　ApplyCashHistory.has_done == 0,models.ApplyCashHistory.shop_id == shop_id).first()中的models.ApplyCashHistory.shop_id == shop_id条件没写，加上即　　　　　可．<br />　　3、 今天要完成任务：添加以下模块：总后台-店铺-店铺评论<br />　　　　①那种选中后下面有一条绿线的效果是怎么做的．<br />　　　　　　第一步：html中有这样的代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tab-lst group"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="active all-list"</span><span style="color: #0000ff;">&gt;</span>所有账单<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="cash-list"</span><span style="color: #0000ff;">&gt;</span>提现记录<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="charge-list"</span><span style="color: #0000ff;">&gt;</span>用户充值<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="online-list"</span><span style="color: #0000ff;">&gt;</span>在线支付<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="ballance-list"</span><span style="color: #0000ff;">&gt;</span>余额列表<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">7</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span>　　　　　　　　</pre>
</div>
<p>　　　　　　第二步：对应的css中有：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #800000;">.tab-lst</span>{<span style="color: #ff0000;">border-bottom</span>:<span style="color: #0000ff;"> 2px solid #f6f6f6</span>;<span style="color: #ff0000;">-webkit-box-sizing</span>:<span style="color: #0000ff;"> border-box</span>;<span style="color: #ff0000;">height</span>:<span style="color: #0000ff;">28px</span>;}
<span style="color: #008080;">2</span> <span style="color: #800000;">.tab-lst&gt;li</span>{<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;"> 14px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #666</span>;<span style="color: #ff0000;">line-height</span>:<span style="color: #0000ff;"> 28px</span>;<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;">left</span>;<span style="color: #ff0000;">height</span>:<span style="color: #0000ff;">28px</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">70px</span>;<span style="color: #ff0000;">　margin-right</span>:<span style="color: #0000ff;"> 20px</span>;<span style="color: #ff0000;">cursor</span>:<span style="color: #0000ff;"> pointer</span>;<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> center</span>;}
<span style="color: #008080;">3</span> <span style="color: #800000;">.tab-lst .active</span>{<span style="color: #ff0000;">border-bottom</span>:<span style="color: #0000ff;"> 2px solid #52b43f</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #52b43f</span>;}</pre>
</div>
<p>　　　　　　第三步：js中为ul的li添加click事件：　　　　　　　</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> .on("click",".tab-lst li",<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">var</span> index = $(<span style="color: #0000ff;">this</span><span style="color: #000000;">).index();
</span><span style="color: #008080;">3</span>     $(".tab-lst li").removeClass("active").eq(index).addClass("active"<span style="color: #000000;">);
</span><span style="color: #008080;">4</span> })；</pre>
</div>
<p>　　　　②让ul中的li横向排列：只需给每个li添加＇float:left＇属性：.head-choose&gt;li{float: left;}<br />　　　　③原来的店铺评论页面布局有点错乱．&lt;---ok<br />　　　　④仿照admin后台的条件选择按钮实现条件选择按钮.&lt;---not ok<br />　　　　　　　　太复杂了,还是用总后台店铺管理陈明写的那个选择按钮.<br />　　4、 复制多个文件和文件夹夹到主文件夹下：sudo cp filea fileb -R file1 file2 file3 /home/jyj (filea,fileb为文件;file1,file2,file3为文件夹)．</p>
<p>　　5、 明天一定要把总后台的对账bug解决．</p>
<p>　　6、 这几天要把这篇博客中的所有代码都改成插入代码的格式．</p>
<p>　　7、 数据备份：快盘．</p>
<p>【7.6 周一】</p>
<p>　　今天完成了总后台的订单评价管理的功能，实现对系统所有订单评价的统计和筛选．学到的东西和遇到的问题总结如下：</p>
<p>　　1、 点击页面中不同的选项按钮显示不同的子页面：将两个不同子页面的相同部分写成一个新的base,选项按钮中加a标签．然后将子页面分别写成几个不同的html文件，每个html文件都继承这个base，将那个新base中的a标签链接到新创建的html文件即可．</p>
<p>　　2、 html中一个p标签占至少一行．</p>
<p>　　3、 python字符串内置函数：split<br />　　　　例：<br />　　　　　　&gt;&gt;&gt; s = 'a;b;c;d'<br />　　　　　　&gt;&gt;&gt; s.split(';')<br />　　　　　　['a', 'b', 'c', 'd']</p>
<p>　　4、 tornado中的块(block)的用法：</p>
<p>　　　　比如某个base.html中有一段共同的代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">{% block content %}
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>...<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> {% end %}</pre>
</div>
<p>　　　　如果想在继承它的子页面中的这段代码的下面插入东西，则要在上面代码的后面写上空块名，比如：　</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">{% block shop %}  
</span><span style="color: #008080;">2</span> {% end %}</pre>
</div>
<p>　　　　合起来如下：　　</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">{% block content %}
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>...<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> <span style="color: #000000;">    {% block shop %}  
</span><span style="color: #008080;">4</span> 
<span style="color: #008080;">5</span> <span style="color: #000000;">    {% end %}
</span><span style="color: #008080;">6</span> {% end %}</pre>
</div>
<p>　　　　然后在子页面中加入块shop，然后在shop块中写代码即可，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">{% extends 'base.html'%}
</span><span style="color: #008080;">2</span> <span style="color: #000000;">{% block shop %}  
</span><span style="color: #008080;">3</span> <span style="color: #000000;">    ...这是子页面代码...
</span><span style="color: #008080;">4</span> {% end %}    </pre>
</div>
<p>　　　　此外还要注意多级继承时块的命名和引用，页面排版格式的问题．</p>
<p>　　5、 sqlalchemy用'!= None'来判断表的某一项不为空．</p>
<p>　　6、 sqlalchemy的like用法：models.Shop.shop_name.like('果%')<br />　　　　或者：models.Shop.shop_name.like("%{0}%".format(input_name))</p>
<p>　　7、 postjson不能传datetime类型的数据的问题：<br />　　　　　　用python的strftime函数转成字符串再传．<br />　　　　　　用法：data["comment_create_date"] = order.create_date.strftime("%Y-%m-%d %H:%M:%S")<br />　　8、 js中要保持id或class的唯一性，否则容易出现重复执行导致错乱．</p>
<p>　　9、 jquery中$的详细用法学习，今天因为var变量的时候少了一个$耽误了好长时间．</p>
<p>　　10、 用clone隐藏元素的方法更新页面的时候，如果遇到一个元素需要根据后台数据多次添加怎么办?<br />　　　　解决方法：比如有一个p标签中有多个img标签，数量根据后台传来的变量i来确定，那么在js中只需用一个循环把多个img标签加入到一个字符串中，然后把这个字　　　　　　　　　符串append到p标签即可．</p>
<p>　　11、 js中get方法的使用(参见系统代码文件superadmin-comment-info.js的initPagesum方法)：<br />　　　　简单描述如下：假设需要的数据为page_sum<br />　　　　①js中在页面加载完毕后执行这个函数：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> initPagesum(){
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">var</span> url = '/super/comment_info?ajaxFlag=1'<span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    $.ajax({
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">        url:url,
</span><span style="color: #008080;"> 5</span>         type:'get'<span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span>         success:<span style="color: #0000ff;">function</span><span style="color: #000000;">(res){
</span><span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">if</span><span style="color: #000000;">(res.success){
</span><span style="color: #008080;"> 8</span>                 page_sum =<span style="color: #000000;"> res.page_sum;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">                alert(page_sum);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    });
</span><span style="color: #008080;">13</span> }</pre>
</div>
<p>　　　　②后台对应的get方法要这样检查参数：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> @SuperBaseHandler.check_arguments(<span style="color: #800000;">"</span><span style="color: #800000;">ajaxFlag</span><span style="color: #800000;">"</span>)</pre>
</div>
<p>　　　　③后台要先判断ajaxFlag的值是否为1,如果是则用send_success返回数据，否则用render返回数据：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span> ajaxFlag != <span style="color: #800000;">'</span><span style="color: #800000;">1</span><span style="color: #800000;">'</span><span style="color: #000000;">:
</span><span style="color: #008080;">2</span>     self.render(<span style="color: #800000;">'</span><span style="color: #800000;">superAdmin/shop-comment-info.html</span><span style="color: #800000;">'</span>,output_data = output_data,page_sum = page_sum,context=dict(count = {<span style="color: #800000;">'</span><span style="color: #800000;">del_apply</span><span style="color: #800000;">'</span>:<span style="color: #800000;">''</span>,<span style="color: #800000;">'</span><span style="color: #800000;">all_temp</span><span style="color: #800000;">'</span>:<span style="color: #800000;">''</span>,<span style="color: #800000;">'</span><span style="color: #800000;">all</span><span style="color: #800000;">'</span>:<span style="color: #800000;">''</span>,<span style="color: #800000;">'</span><span style="color: #800000;">auth_apply</span><span style="color: #800000;">'</span>:<span style="color: #800000;">''</span>},subpage=　<span style="color: #800000;">"</span><span style="color: #800000;">info</span><span style="color: #800000;">"</span><span style="color: #000000;">))
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">:
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">return</span> self.send_success(page_sum = page_sum)</pre>
</div>
<p>　　12、 sqlalchemy不能直接用shop_id in [1,2]这样的用法，而要这样用：<br />　　　　　　shop_id.in_([1,2,3,4])</p>
<p>　　13、 遗留bug汇总：</p>
<p>　　　　①总后台＇店铺＇栏下左侧的选项激活有问题．</p>
<p>　　　　②总后台对账的bug．</p>
<p>　　14、 数据备份：快盘．</p>
<p>【<strong>7.7 周二</strong>】</p>
<p>　　1、 今日主要任务列表：修复总后台店铺页面中激活左侧选项不变成绿色的问题，以及括号中的数据错误问题．&lt;---ok<br />　　　　①不变绿色问题：superadmin-shop-manage.js加载页面ready方法中多了这样一段代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span>(localStorage.getItem("itemIndex"<span style="color: #000000;">)){
</span><span style="color: #008080;">2</span> $(".shop-manage-nav li").removeClass("active").eq(localStorage.getItem("itemIndex")).addClass("active"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> }<span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">4</span> localStorage.setItem("itemIndex",0<span style="color: #000000;">);
</span><span style="color: #008080;">5</span> $(".shop-manage-nav li").removeClass("active").eq(0).addClass("active"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span> }</pre>
</div>
<p>　　　　②括号中数据错误的问题：<br />　　　　每个后台方法中数据返回的错误。<br />　　2、 修复总后台对账的bug　　&lt;-----ok<br />　　3、 实现点击一个图片后显示大图：<br />　　　　思路1：添加图片的点击事件，用遮罩层显示原始大小的图片。<br />　　　　思路2:给图片添加a标签，打开一个新的窗口显示原始图片：&lt;a href="..." target="_blank"&gt;&lt;img src="..."/&gt;&lt;/a&gt;</p>
<p>　　4、 要在浏览器中查看html加载后，某项后台数据的值的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="admin-left text-right pull-left"</span><span style="color: #ff0000;"> data-info</span><span style="color: #0000ff;">="{{context['subpage']}}"</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　这样就可以在浏览器的调试器里查看data-info的值，耶可以在js中调用这个值了。</p>
<p>　　5、 HTML怎么给图片加超链接,点击图后在另一页打开?</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="..."</span><span style="color: #ff0000;"> target</span><span style="color: #0000ff;">="_blank"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">img </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">="..."</span><span style="color: #0000ff;">/&gt;&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　6、 整理worktile上daily的文档的内容到每天日志中.</p>
<p>　　7、 sublime2清除所有书签：Ctrl+Shift+F2</p>
<p>　　8、 完成总后台评论管理功能！</p>
<p>　　9、 html字体加粗：style="font-weight:bold"</p>
<p>　　10、 mysql中limit用法:<br />　　　　select * from table limit m,n<br />　　　　其中m是指记录开始的index，从0开始，表示第一条记录<br />　　　　n是指从第m+1条开始，取n条。<br />　　　　例如：select * from tablename limit 2,4<br />　　　　即取出第3条至第6条，4条记录</p>
<p>　　　　*mysql分组查询并用limit的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">假如有如下info数据库： 
</span><span style="color: #008080;"> 2</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;"> 3</span> <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span>
<span style="color: #008080;"> 4</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;"> 5</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> aa <span style="color: #808080;">|</span>
<span style="color: #008080;"> 6</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span>
<span style="color: #008080;"> 7</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span>
<span style="color: #008080;"> 8</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span>
<span style="color: #008080;"> 9</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span>
<span style="color: #008080;">10</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">6</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">12</span> <span style="color: #000000;">执行下列查询及结果如下：
</span><span style="color: #008080;">13</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> info <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span>(name) limit <span style="color: #800000; font-weight: bold;">0</span>,<span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">;
</span><span style="color: #008080;">14</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">15</span> <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span>
<span style="color: #008080;">16</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">17</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> aa <span style="color: #808080;">|</span>
<span style="color: #008080;">18</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> info <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span>(name) limit <span style="color: #800000; font-weight: bold;">0</span>,<span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;">;
</span><span style="color: #008080;">21</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">22</span> <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span>
<span style="color: #008080;">23</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">24</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> aa <span style="color: #808080;">|</span>
<span style="color: #008080;">25</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span>
<span style="color: #008080;">26</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> info <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span>(name) limit <span style="color: #800000; font-weight: bold;">0</span>,<span style="color: #800000; font-weight: bold;">3</span><span style="color: #000000;">;
</span><span style="color: #008080;">29</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">30</span> <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span>
<span style="color: #008080;">31</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span>
<span style="color: #008080;">32</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> aa <span style="color: #808080;">|</span>
<span style="color: #008080;">33</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span>
<span style="color: #008080;">34</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span>
<span style="color: #008080;">35</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--+------+</span></pre>
</div>
<p>　　11、 python　datetime和time的区别.<br />　　　　①字符串转化为time类型：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt;&gt;&gt; <span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #008080;">2</span> &gt;&gt;&gt; timestr = <span style="color: #800000;">"</span><span style="color: #800000;">time2009-12-14</span><span style="color: #800000;">"</span>
<span style="color: #008080;">3</span> &gt;&gt;&gt; t = time.strptime(timestr, <span style="color: #800000;">"</span><span style="color: #800000;">time%Y-%m-%d</span><span style="color: #800000;">"</span><span style="color: #000000;">)
</span><span style="color: #008080;">4</span> &gt;&gt;&gt; <span style="color: #0000ff;">print</span><span style="color: #000000;"> t
</span><span style="color: #008080;">5</span> (2009, 12, 14, 0, 0, 0, 0, 348, -1<span style="color: #000000;">)
</span><span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span> &gt;&gt;&gt;<span style="color: #000000;"> type(t)
</span><span style="color: #008080;">8</span> &lt;type <span style="color: #800000;">'</span><span style="color: #800000;">time.struct_time</span><span style="color: #800000;">'</span>&gt;
<span style="color: #008080;">9</span> &gt;&gt;&gt;</pre>
</div>
<p>　　　　②将time类型转化为字符串：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> now_time = time.strftime(<span style="color: #800000;">"</span><span style="color: #800000;">%Y-%m-%d %H:%M:%S</span><span style="color: #800000;">"</span>,time.localtime(time.time()))</pre>
</div>
<p>　　　　③time类型与datetime类型的转换：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt;&gt;&gt; <span style="color: #0000ff;">import</span><span style="color: #000000;"> datetime
</span><span style="color: #008080;">2</span> &gt;&gt;&gt; d = datetime.datetime(* t[:6<span style="color: #000000;">])
</span><span style="color: #008080;">3</span> &gt;&gt;&gt; <span style="color: #0000ff;">print</span><span style="color: #000000;"> d
</span><span style="color: #008080;">4</span> 2009-12-14 00:00:00
<span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span> &gt;&gt;&gt;<span style="color: #000000;"> type(d)
</span><span style="color: #008080;">7</span> &lt;type <span style="color: #800000;">'</span><span style="color: #800000;">datetime.datetime</span><span style="color: #800000;">'</span>&gt;
<span style="color: #008080;">8</span> &gt;&gt;&gt; </pre>
</div>
<p>　　　　④常用格式化符号：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　%<span style="color: #000000;">a 星期几的简写 Weekday name, abbr.
</span><span style="color: #008080;"> 2</span> 　　%<span style="color: #000000;">A 星期几的全称 Weekday name, full
</span><span style="color: #008080;"> 3</span> 　　%<span style="color: #000000;">b 月分的简写 Month name, abbr.
</span><span style="color: #008080;"> 4</span> 　　%<span style="color: #000000;">B 月份的全称 Month name, full
</span><span style="color: #008080;"> 5</span> 　　%c 标准的日期的时间串 Complete date <span style="color: #0000ff;">and</span><span style="color: #000000;"> time representation
</span><span style="color: #008080;"> 6</span> 　　%<span style="color: #000000;">d 十进制表示的每月的第几天 Day of the month
</span><span style="color: #008080;"> 7</span> 　　%H 24小时制的小时 Hour (24-<span style="color: #000000;">hour clock)
</span><span style="color: #008080;"> 8</span> 　　%I 12小时制的小时 Hour (12-<span style="color: #000000;">hour clock)
</span><span style="color: #008080;"> 9</span> 　　%<span style="color: #000000;">j 十进制表示的每年的第几天 Day of the year
</span><span style="color: #008080;">10</span> 　　%<span style="color: #000000;">m 十进制表示的月份 Month number
</span><span style="color: #008080;">11</span> 　　%<span style="color: #000000;">M 十时制表示的分钟数 Minute number
</span><span style="color: #008080;">12</span> 　　%<span style="color: #000000;">S 十进制的秒数 Second number
</span><span style="color: #008080;">13</span> 　　%<span style="color: #000000;">U 第年的第几周，把星期日做为第一天（值从0到53）Week number (Sunday first weekday)
</span><span style="color: #008080;">14</span> 　　%<span style="color: #000000;">w 十进制表示的星期几（值从0到6，星期天为0）weekday number
</span><span style="color: #008080;">15</span> 　　%<span style="color: #000000;">W 每年的第几周，把星期一做为第一天（值从0到53） Week number (Monday first weekday)
</span><span style="color: #008080;">16</span> 　　%x 标准的日期串 Complete date representation (e.g. 13/01/08<span style="color: #000000;">)
</span><span style="color: #008080;">17</span> 　　%X 标准的时间串 Complete time representation (e.g. 17:02:10<span style="color: #000000;">)
</span><span style="color: #008080;">18</span> 　　%<span style="color: #000000;">y 不带世纪的十进制年份（值从0到99）Year number within century
</span><span style="color: #008080;">19</span> 　　%<span style="color: #000000;">Y 带世纪部分的十制年份 Year number
</span><span style="color: #008080;">20</span> 　　%z，%<span style="color: #000000;">Z 时区名称，如果不能得到时区名称则返回空字符。Name of time zone
</span><span style="color: #008080;">21</span> 　　%% 百分号</pre>
</div>
<p>　　12、 获取昨天的日期：lastday = datetime.datetime.now() - datetime.timedelta(1)</p>
<p>　　13、 mysql 从datetime类型中取日期:<br />　　　　 &nbsp;在mysql中，我要取出当天录入的记录。里面录入时间: AddTime是datetime类型,假设其值为：2007-08-06 10:12:22<br />　　　　 &nbsp;select * from table1 where AddTime='2007-08-06'<br />　　　　 &nbsp;这里的时间AddTime要通过什么函数处理才能得到日期部分，从而可以和后面的日期能够比较。<br />　　　　 &nbsp;方法①：select * from table1 where TO_DAYS(AddTime)=TO_DAYS(NOW())<br />　　　　 &nbsp;方法②：SELECT * from taffair where date_format(TAffairDate,'%Y-%m-%d')='2007-04-04'</p>
<p>　　14、 sqlalchemy distinct用法：persons = self.session.query(models.BalanceHistory.customer_id).distinct()<br />　　　　 &nbsp;或：persons = self.session.query(models.BalanceHistory).distinct(models.BalanceHistory.customer_id)<br />　　15、 jQuery中this与$(this)的区别</p>
<p>　　16、 MySQL 查询某个字段不重复的所有记录:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #808080;">//</span><span style="color: #000000;">假设现在有如下6条记录 表名叫info
</span><span style="color: #008080;"> 2</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+----+</span>
<span style="color: #008080;"> 3</span> <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span>
<span style="color: #008080;"> 4</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+----+</span>
<span style="color: #008080;"> 5</span> <span style="color: #808080;">|</span> aa <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 6</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 7</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 8</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 9</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">10</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">6</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+----+</span>
<span style="color: #008080;">12</span> <span style="color: #808080;">//</span><span style="color: #000000;">现在想从这6条记录中查询所有name不重复的记录
</span><span style="color: #008080;">13</span> <span style="color: #0000ff;">select</span> <span style="color: #0000ff;">distinct</span> name,id <span style="color: #0000ff;">from</span><span style="color: #000000;"> book这样是不可以的 因为distinct只能作用于一个字段
</span><span style="color: #008080;">14</span> <span style="color: #808080;">//</span><span style="color: #000000;">答案: 
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">select</span> a.<span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> info a <span style="color: #808080;">right</span> <span style="color: #808080;">join</span><span style="color: #000000;"> (
</span><span style="color: #008080;">16</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">min</span>(id) <span style="color: #0000ff;">from</span> info <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span> name) b <span style="color: #0000ff;">on</span> b.id <span style="color: #808080;">=</span><span style="color: #000000;"> a.id
</span><span style="color: #008080;">17</span> <span style="color: #0000ff;">where</span> a.id <span style="color: #0000ff;">is</span> <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span></pre>
</div>
<p>　　17、 ?sqlalchemy不能对datetime类型用distinct（这是什么问题咧？？？）<br />　　　　用老办法：利用存在性数组，每次搜索是否在数组之中。<br />　　　　缺陷：严重影响性能！有必要研究一下sql的distinct算法实现。<br />　　　　根本原因还是js动态绑定的问题！</p>
<p>【<strong>7.8 周三】</strong></p>
<p><strong>　　</strong>1、 今天任务：完成店铺后台的销售统计；总后台对账仍然有bug且查询效率很低:要重构代码。</p>
<p>　　2、 echarts好酷炫.</p>
<p>　　3、 echarts简析(标准条形图)<br />　　　　1.图表数据都包含在一个Object对象option中</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> option =<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span>     title : {  <span style="color: #008000;">//</span><span style="color: #008000;">图表标题和副标题</span>
<span style="color: #008080;"> 3</span>         text: '世界人口'<span style="color: #000000;">,
</span><span style="color: #008080;"> 4</span>         subtext: '数据来自网络'
<span style="color: #008080;"> 5</span> <span style="color: #000000;">    },
</span><span style="color: #008080;"> 6</span>     tooltip : {  <span style="color: #008000;">//</span><span style="color: #008000;">数据提示框</span>
<span style="color: #008080;"> 7</span>         trigger: 'axis'
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    },
</span><span style="color: #008080;"> 9</span>     legend: {  <span style="color: #008000;">//</span><span style="color: #008000;">图表图例</span>
<span style="color: #008080;">10</span>         data:['2011年', '2012年'<span style="color: #000000;">]
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">12</span>     toolbox: {  <span style="color: #008000;">//</span><span style="color: #008000;">图表的右上角的工具箱</span>
<span style="color: #008080;">13</span>         show : <span style="color: #0000ff;">true</span><span style="color: #000000;">,
</span><span style="color: #008080;">14</span>         feature : {  <span style="color: #008000;">//</span><span style="color: #008000;">控制显示哪些工具</span>
<span style="color: #008080;">15</span>            mark : {show: <span style="color: #0000ff;">true</span><span style="color: #000000;">},
</span><span style="color: #008080;">16</span>            dataView : {show: <span style="color: #0000ff;">true</span>, readOnly: <span style="color: #0000ff;">false</span><span style="color: #000000;">},
</span><span style="color: #008080;">17</span>            restore : {show: <span style="color: #0000ff;">true</span><span style="color: #000000;">},
</span><span style="color: #008080;">18</span>            saveAsImage : {show: <span style="color: #0000ff;">true</span><span style="color: #000000;">}
</span><span style="color: #008080;">19</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">21</span>     calculable : <span style="color: #0000ff;">true</span><span style="color: #000000;">,
</span><span style="color: #008080;">22</span>     xAxis : [  <span style="color: #008000;">//</span><span style="color: #008000;">x轴的属性及数据</span>
<span style="color: #008080;">23</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">24</span>             type : 'value'<span style="color: #000000;">,
</span><span style="color: #008080;">25</span>             boundaryGap : [0, 0.01<span style="color: #000000;">]
</span><span style="color: #008080;">26</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">27</span> <span style="color: #000000;">    ],
</span><span style="color: #008080;">28</span>     yAxis : [  <span style="color: #008000;">//</span><span style="color: #008000;">y轴的属性及数据</span>
<span style="color: #008080;">29</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">30</span>              type : 'category'<span style="color: #000000;">,
</span><span style="color: #008080;">31</span>             data : ['巴西','印尼','美国','印度','中国','世界人口(万)'<span style="color: #000000;">]
</span><span style="color: #008080;">32</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">33</span> <span style="color: #000000;">    ],
</span><span style="color: #008080;">34</span>     series : [  <span style="color: #008000;">//</span><span style="color: #008000;">图表中显示的数据，有若干个系列，数量及名称和legend的data对应</span>
<span style="color: #008080;">35</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">36</span>             name:'2011年'<span style="color: #000000;">,
</span><span style="color: #008080;">37</span>             type:'bar'<span style="color: #000000;">,
</span><span style="color: #008080;">38</span>             data:[18203, 23489, 29034, 104970, 131744, 630230<span style="color: #000000;">]
</span><span style="color: #008080;">39</span> <span style="color: #000000;">        },
</span><span style="color: #008080;">40</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">41</span>        　  name:'2012年'<span style="color: #000000;">,
</span><span style="color: #008080;">42</span>              type:'bar'<span style="color: #000000;">,
</span><span style="color: #008080;">43</span>              data:[19325, 23438, 31000, 121594, 134141, 681807<span style="color: #000000;">]
</span><span style="color: #008080;">44</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">45</span> <span style="color: #000000;">    ]<br /></span><span style="color: #008080;">46</span> <span style="color: #000000;">};
</span><span style="color: #008080;">47</span>                                         </pre>
</div>
<p>　　　　2.option内容分析：<br />　　　　(1)title:图表标题，每个图表最多仅有一个标题控件，每个标题控件可设主副标题。<br />　　　　　　text(主标题)<br />　　　　　　subtext(副标题)</p>
<p>　　　　(2)tooltip:提示框，常用于展现更详细的数据.<br />　　　　　　trigger:触发类型，默认数据触发，可选为：'item' | 'axis' </p>
<p>　　　　(3)legend:图例，每个图表最多仅有一个图例。<br />　　　　　　orient:布局方式，默认为水平布局，可选为：'horizontal' | 'vertical' <br />　　　　　　x:水平安放位置，默认为全图居中，可选为：'center' | 'left' | 'right' | {number}（x坐标，单位px） <br />　　　　　　y:垂直安放位置，默认为全图顶端，可选为：'top' | 'bottom' | 'center' | {number}（y坐标，单位px）<br />　　　　　　backgroundColor:图例背景颜色，默认透明 <br />　　　　　　data:图例内容数组，数组项通常为{string}，每一项代表一个系列的name，默认布局到达边缘会自动分行（列），传入空字符串''可实现手动分行（列）。<br />　　　　　　使用根据该值索引series中同名系列所用的图表类型和itemStyle，如果索引不到，该item将默认为没启用状态。<br />　　　　　　如需个性化图例文字样式，可把数组项改为{Object}，指定文本样式和个性化图例icon，格式为</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">{
</span><span style="color: #008080;">2</span> 　　<span style="color: #000000;">name : {string},
</span><span style="color: #008080;">3</span> 　　<span style="color: #000000;">textStyle : {Object},
</span><span style="color: #008080;">4</span> 　　<span style="color: #000000;">icon : {string}
</span><span style="color: #008080;">5</span> }</pre>
</div>
<p>　　　　(4)toolbox:工具箱，每个图表最多仅有一个工具箱.<br />　　　　　　orient:布局方式，默认为水平布局，可选为：'horizontal' | 'vertical' .<br />　　　　　　x:水平安放位置，默认为全图居中，可选为：'center' | 'left' | 'right' | {number}（x坐标，单位px） <br />　　　　　　y:垂直安放位置，默认为全图顶端，可选为：'top' | 'bottom' | 'center' | {number}（y坐标，单位px）<br />　　　　　　backgroundColor:工具箱背景颜色，默认透明 <br />　　　　　　padding:工具箱内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距，同css.<br />　　　　　　itemGap:各个item之间的间隔，单位px，默认为10，横向布局时为水平间隔，纵向布局时为纵向间隔.<br />　　　　　　itemSize:工具箱icon大小，单位（px）,默认16px<br />　　　　　　color:工具箱icon颜色序列，循环使用，同时支持在具体feature内指定color.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">feature : {
</span><span style="color: #008080;">2</span> 　　mark : {show: <span style="color: #0000ff;">true</span><span style="color: #000000;">},
</span><span style="color: #008080;">3</span> 　　dataView : {show: <span style="color: #0000ff;">true</span>, readOnly: <span style="color: #0000ff;">false</span><span style="color: #000000;">},
</span><span style="color: #008080;">4</span> 　　magicType : {show: <span style="color: #0000ff;">true</span>, type: ['line', 'bar', 'stack', 'tiled'<span style="color: #000000;">]},
</span><span style="color: #008080;">5</span> 　　restore : {show: <span style="color: #0000ff;">true</span><span style="color: #000000;">},
</span><span style="color: #008080;">6</span> 　　saveAsImage : {show: <span style="color: #0000ff;">true</span><span style="color: #000000;">}
</span><span style="color: #008080;">7</span> }</pre>
</div>
<p>　　　　(5)xAxis : [<br />　　　　　　{<br />　　　　　　　　type : 'value'<br />　　　　　　}<br />　　　　　]<br />　　　　(6)yAxis : [<br />　　　　　　{<br />　　　　　　　　type : 'category',<br />　　　　　　　　data : ['周一','周二','周三','周四','周五','周六','周日']<br />　　　　　　}<br />　　　　　]<br />　　　　(7)series(直角系)：驱动图表生成的数据内容数组，数组中每一项为一个系列的选项及数据，其中个别选项仅在部分图表类型中有效，请注意适用类型。<br />　　　　　&nbsp;stack：组合名称，双数值轴时无效，多组数据的堆积图时使用，eg：stack:'group1'，则series数组中stack值等于'group1'的数据做堆积计算。</p>
<p>　　　　注：在series后面再加如下的一个color数组，则echarts中的图表元素的颜色会根据这个数组自动循环设置。</p>
<p>　　　　　　color: ['#b6a2de','#2ec7c9','#5ab1ef','#ffb980','#d87a80',<br />　　　　　　　　　'#8d98b3','#e5cf0d','#97b552','#95706d','#dc69aa',<br />　　　　　　　　　'#07a2a4','#9a7fd1','#588dd5','#f5994e','#c05050',<br />　　　　　　　　　'#59678c','#c9ab00','#7eb00a','#6f5553','#c14089']</p>
<p>　　4、 jQuery 遍历 - siblings() 方法：<br />　　　　例：$("p").siblings(".selected")　查找每个p元素的所有类名为 "selected" 的所有同胞元素.</p>
<p>　　5、 mysql比较时间：select create_time from check_profit where date_format(create_time,"%Y-%m-%d")&lt;'2015-07-01';</p>
<p>　　6、 导出数据库中某张表的结构及数据：mysqldump -uroot -pdbpasswd dbname test&gt;db.sql;<br />　　　　导入的话还是用source,导入的时候不用删除表结构，直接导入sql即可。导入后会自动覆盖旧数据，不用担心错乱的问题。</p>
<p>　　7、 python获取今天的0:0:0：<br />　　　　　　now_time = time.localtime(time.time())<br />　　　　　　now_time = datetime.datetime(*now_time[:6])<br />　　　　　　now_time = datetime.datetime(now_time.year, now_time.month, now_time.day, 0,0,0)<br />　　　　获取昨天的0:0:0：<br />　　　　　　last_time = now_time - datetime.timedelta(1)</p>
<p>　　8、 改变图表标题下方三个选项按钮的激活状态，并且选择不同按钮的时候图表的时间选项发生变化：<br />　　　　(1)html中写如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="change-box"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span> 　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="order_trend_change"</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">="sell-change-list pull-left"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> 　　　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">data-id</span><span style="color: #0000ff;">="1"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="javascript:;"</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">="text-grey3"</span><span style="color: #0000ff;">&gt;</span>订单量/个<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span> 　　　　<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">data-id</span><span style="color: #0000ff;">="2"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="javascript:;"</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">="text-grey3"</span><span style="color: #0000ff;">&gt;</span>订单金额/元<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> 　　<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　(2)js中添加如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> $(document).ready(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 2</span> 　　$('.change-list li').on('click',<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 3</span> 　　　　<span style="color: #0000ff;">var</span> $<span style="color: #0000ff;">this</span>=$(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> 　　　　$<span style="color: #0000ff;">this</span>.addClass('active').siblings('li').removeClass('active'<span style="color: #000000;">);
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">　　});
</span><span style="color: #008080;"> 6</span> 　　$('.change-list').each(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 7</span> 　　　　<span style="color: #0000ff;">var</span> $<span style="color: #0000ff;">this</span>=$(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span> 　　　　$<span style="color: #0000ff;">this</span>.find('li').eq(0).addClass('active'<span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">　　});
</span><span style="color: #008080;">10</span> });</pre>
</div>
<p>　　　　(3)css中有如下属性：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #800000;">.sell-change-list</span>{<span style="color: #ff0000;">margin-left</span>:<span style="color: #0000ff;">60px</span>;<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;"> 10px</span>;}
<span style="color: #008080;">2</span> <span style="color: #800000;">.sell-change-list li</span>{<span style="color: #ff0000;">border-left</span>:<span style="color: #0000ff;">2px solid #fff</span>;<span style="color: #ff0000;">padding-left</span>:<span style="color: #0000ff;">14px</span>;<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;">left</span>;<span style="color: #ff0000;">margin-right</span>:<span style="color: #0000ff;"> 30px</span>;}
<span style="color: #008080;">3</span> <span style="color: #800000;">.sell-change-list li.active</span>{<span style="color: #ff0000;">border-color</span>:<span style="color: #0000ff;">#44b549</span>;}
<span style="color: #008080;">4</span> <span style="color: #800000;">.sell-change-list li.active a</span>{<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;">#44b549</span>;}</pre>
</div>
<p>　　9、 css的padding:<br />　　　　padding 属性设置元素的内边距。<br />　　　　padding 属性定义元素边框与元素内容之间的空间。<br />　　　　该属性可采取 4 个值：<br />　　　　　　如果规定一个值，比如 div {padding: 50px} - 所有四个边的 padding 都是 50 px。<br />　　　　　　如果规定两个值，比如 div {padding: 50px 10px} - 上下内边距是 50 px，左右内边距是 10 px。<br />　　　　　　如果规定三个值，比如 div {padding: 50px 10px 20px} - 上内边距是 50 px，左右内边距是 10 px，下内边距是 20 px。<br />　　　　　　如果规定四个值，比如 div {padding: 50px 10px 20px 30px} - 上内边距是 50 px，右内边距是 10 px，下内边距是 20 px，左内边距是 30 px。</p>
<p>　　10、 js时间操作：<br />　　　　(1)获取当前日期及其他操作：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">var</span> myDate = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();
</span><span style="color: #008080;"> 2</span> myDate.getYear(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前年份(2位)</span>
<span style="color: #008080;"> 3</span> myDate.getFullYear(); <span style="color: #008000;">//</span><span style="color: #008000;">获取完整的年份(4位,1970-????)</span>
<span style="color: #008080;"> 4</span> myDate.getMonth(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前月份(0-11,0代表1月)</span>
<span style="color: #008080;"> 5</span> myDate.getDate(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前日(1-31)</span>
<span style="color: #008080;"> 6</span> myDate.getDay(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前星期X(0-6,0代表星期天)</span>
<span style="color: #008080;"> 7</span> myDate.getTime(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前时间(从1970.1.1开始的毫秒数)</span>
<span style="color: #008080;"> 8</span> myDate.getHours(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前小时数(0-23)</span>
<span style="color: #008080;"> 9</span> myDate.getMinutes(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前分钟数(0-59)</span>
<span style="color: #008080;">10</span> myDate.getSeconds(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前秒数(0-59)</span>
<span style="color: #008080;">11</span> myDate.getMilliseconds(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前毫秒数(0-999)</span>
<span style="color: #008080;">12</span> myDate.toLocaleDateString(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前日期</span>
<span style="color: #008080;">13</span> <span style="color: #0000ff;">var</span> mytime=myDate.toLocaleTimeString(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前时间</span>
<span style="color: #008080;">14</span> myDate.toLocaleString( ); <span style="color: #008000;">//</span><span style="color: #008000;">获取日期与时间</span></pre>
</div>
<p>　　11、 js将字符串转化成日期的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> str ='2015-01-01 23:13:15'<span style="color: #000000;">;
</span><span style="color: #008080;">2</span> str = str.replace(/-/g,"/"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">var</span> date = <span style="color: #0000ff;">new</span> Date(str );</pre>
</div>
<p>　　12、 js判断某天是这年的第几周：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> WeekNumOfYear(date) {   
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">var</span> yy =<span style="color: #000000;"> date.getFullYear();
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">var</span> day =<span style="color: #000000;"> date.getDay();
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">var</span> date0 = <span style="color: #0000ff;">new</span> Date(yy,0,1<span style="color: #000000;">);
</span><span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">var</span> date_diff =<span style="color: #000000;"> DateDiff(date,date0);
</span><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">if</span>(date_diff &lt; 7-<span style="color: #000000;">day){
</span><span style="color: #008080;"> 8</span>         week_num = 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span>     <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">var</span> week_num = Math.ceil((date_diff-(7-day))/7)+1;
<span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> week_num;
</span><span style="color: #008080;">15</span> }</pre>
</div>
<p>　　13、 js ceil() 方法可对一个数进行上舍入。<br />　　　　Math.ceil(x)</p>
<p>　　14、 js round() 方法可把一个数字舍入为最接近的整数。</p>
<p>　　15、 js获取当前日期的前后N天日期的方法:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> <span style="color: #008000;">//</span><span style="color: #008000;"> 获取当前日期的前后N天日期(返回值为Date类型)(N&lt;=28):</span>
<span style="color: #008080;">  2</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> GetDateN(date,AddDayCount) 
</span><span style="color: #008080;">  3</span> <span style="color: #000000;">{ 
</span><span style="color: #008080;">  4</span>     <span style="color: #0000ff;">var</span> dd = <span style="color: #0000ff;">new</span> Date(2015,1,1);  <span style="color: #008000;">//</span><span style="color: #008000;">此处如果使用new Date()，则会出现诡异的错误</span>
<span style="color: #008080;">  5</span> 
<span style="color: #008080;">  6</span>     <span style="color: #0000ff;">var</span> date_year =<span style="color: #000000;"> date.getFullYear();
</span><span style="color: #008080;">  7</span>     <span style="color: #0000ff;">var</span> date_month = date.getMonth()+1<span style="color: #000000;">;
</span><span style="color: #008080;">  8</span>     <span style="color: #0000ff;">var</span> date_date =<span style="color: #000000;"> date.getDate();
</span><span style="color: #008080;">  9</span> 
<span style="color: #008080;"> 10</span> <span style="color: #000000;">    dd.setDate(date_date);
</span><span style="color: #008080;"> 11</span>     dd.setMonth(date_month - 1<span style="color: #000000;">);
</span><span style="color: #008080;"> 12</span> <span style="color: #000000;">    dd.setFullYear(date_year);
</span><span style="color: #008080;"> 13</span> 
<span style="color: #008080;"> 14</span>     <span style="color: #0000ff;">var</span><span style="color: #000000;"> n_flag;
</span><span style="color: #008080;"> 15</span>     <span style="color: #0000ff;">var</span><span style="color: #000000;"> is_leap;
</span><span style="color: #008080;"> 16</span> 
<span style="color: #008080;"> 17</span>     <span style="color: #0000ff;">if</span>(AddDayCount &gt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;"> 18</span>         n_flag = 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 20</span>     <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 21</span>         n_flag = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 23</span> 
<span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">if</span>((date_year % 4 == 0 &amp;&amp; date_year % 100 != 0) || (date_year % 400 == 0<span style="color: #000000;">)){
</span><span style="color: #008080;"> 25</span>         is_leap = 1<span style="color: #000000;">;
</span><span style="color: #008080;"> 26</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 27</span>     <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 28</span>         is_leap = 0<span style="color: #000000;">;
</span><span style="color: #008080;"> 29</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 30</span> 
<span style="color: #008080;"> 31</span>     <span style="color: #0000ff;">switch</span><span style="color: #000000;">(n_flag){
</span><span style="color: #008080;"> 32</span>         <span style="color: #0000ff;">case</span> 1<span style="color: #000000;">:
</span><span style="color: #008080;"> 33</span>             <span style="color: #0000ff;">if</span> (date_month == 2<span style="color: #000000;">){
</span><span style="color: #008080;"> 34</span>                 <span style="color: #0000ff;">switch</span><span style="color: #000000;">(is_leap){
</span><span style="color: #008080;"> 35</span>                     <span style="color: #0000ff;">case</span> 1<span style="color: #000000;">:
</span><span style="color: #008080;"> 36</span>                         <span style="color: #0000ff;">if</span>(date_date + AddDayCount &gt; 29<span style="color: #000000;">){
</span><span style="color: #008080;"> 37</span> <span style="color: #000000;">                            dd.setMonth(date_month);
</span><span style="color: #008080;"> 38</span>                             dd.setDate(date_date+AddDayCount - 29<span style="color: #000000;">);
</span><span style="color: #008080;"> 39</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 40</span>                         <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 41</span>                             dd.setDate(date_date +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 42</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 43</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 44</span> 
<span style="color: #008080;"> 45</span>                     <span style="color: #0000ff;">case</span> 0<span style="color: #000000;">:
</span><span style="color: #008080;"> 46</span>                         <span style="color: #0000ff;">if</span>(date_date + AddDayCount &gt; 28<span style="color: #000000;">){
</span><span style="color: #008080;"> 47</span> <span style="color: #000000;">                            dd.setMonth(date_month);
</span><span style="color: #008080;"> 48</span>                             dd.setDate(date_date+AddDayCount - 28<span style="color: #000000;">);
</span><span style="color: #008080;"> 49</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 50</span>                         <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 51</span>                             dd.setDate(date_date +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 52</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 53</span> 
<span style="color: #008080;"> 54</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 55</span> <span style="color: #000000;">                }
</span><span style="color: #008080;"> 56</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 57</span>             <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ((date_month == 1 || date_month == 3 || date_month == 5 || date_month == 7 || date_month == 8 || date_month == 10 ) &amp;&amp; date_date + AddDayCount &gt; 31<span style="color: #000000;">){
</span><span style="color: #008080;"> 58</span> <span style="color: #000000;">                dd.setMonth(date_month);
</span><span style="color: #008080;"> 59</span>                 dd.setDate(date_date+AddDayCount - 31<span style="color: #000000;">);    
</span><span style="color: #008080;"> 60</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 61</span>             <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span>(date_month == 12 &amp;&amp; date_date + AddDayCount &gt; 31<span style="color: #000000;">){
</span><span style="color: #008080;"> 62</span>                 dd.setDate(date_date+AddDayCount - 31<span style="color: #000000;">);
</span><span style="color: #008080;"> 63</span>                 dd.setMonth(0<span style="color: #000000;">);
</span><span style="color: #008080;"> 64</span>                 dd.setFullYear(date_year + 1<span style="color: #000000;">);
</span><span style="color: #008080;"> 65</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 66</span>             <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ((date_month == 4|| date_month == 6 || date_month == 9 || date_month == 11) &amp;&amp; date_date + AddDayCount &gt; 30<span style="color: #000000;">){
</span><span style="color: #008080;"> 67</span> <span style="color: #000000;">                dd.setMonth(date_month);
</span><span style="color: #008080;"> 68</span>                 dd.setDate(date_date+AddDayCount - 30<span style="color: #000000;">);    
</span><span style="color: #008080;"> 69</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 70</span>             <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 71</span>                 dd.setDate(date_date +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 72</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 73</span>         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 74</span>         <span style="color: #0000ff;">case</span> 0<span style="color: #000000;">:
</span><span style="color: #008080;"> 75</span>             <span style="color: #0000ff;">if</span> ((date_month == 3) &amp;&amp; date_date + AddDayCount &lt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;"> 76</span>                 <span style="color: #0000ff;">switch</span><span style="color: #000000;">(is_leap){
</span><span style="color: #008080;"> 77</span>                     <span style="color: #0000ff;">case</span> 1<span style="color: #000000;">:
</span><span style="color: #008080;"> 78</span>                         <span style="color: #0000ff;">if</span>(date_date + AddDayCount &lt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;"> 79</span>                             dd.setMonth(date_month - 2<span style="color: #000000;">);
</span><span style="color: #008080;"> 80</span>                             dd.setDate(date_date + 29 +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 81</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 82</span>                         <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 83</span>                             dd.setDate(date_date +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 84</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 85</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 86</span> 
<span style="color: #008080;"> 87</span>                     <span style="color: #0000ff;">case</span> 0<span style="color: #000000;">:
</span><span style="color: #008080;"> 88</span>                         <span style="color: #0000ff;">if</span>(date_date + AddDayCount &lt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;"> 89</span>                             dd.setMonth(date_month - 2<span style="color: #000000;">);
</span><span style="color: #008080;"> 90</span>                             dd.setDate(date_date + 28 +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 91</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 92</span>                         <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;"> 93</span>                             dd.setDate(date_date +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;"> 94</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 95</span> 
<span style="color: #008080;"> 96</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">                }
</span><span style="color: #008080;"> 98</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 99</span>             <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ((date_month == 2 || date_month == 4 || date_month == 6 || date_month == 8 || date_month == 9 || date_month == 11 ) &amp;&amp; date_date + AddDayCount &lt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;">100</span>                 dd.setMonth(date_month - 2<span style="color: #000000;">);
</span><span style="color: #008080;">101</span>                 dd.setDate(date_date + 31 +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;">102</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">103</span>             <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span>(date_month == 1 &amp;&amp; date_date + AddDayCount &lt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;">104</span>                 dd.setFullYear(date_year - 1<span style="color: #000000;">);
</span><span style="color: #008080;">105</span>                 dd.setMonth(11<span style="color: #000000;">);
</span><span style="color: #008080;">106</span>                 dd.setDate(date_date + 31 +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;">107</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">108</span>             <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> ((date_month == 5|| date_month == 7 || date_month == 10 || date_month == 12) &amp;&amp; date_date + AddDayCount &lt;= 0<span style="color: #000000;">){
</span><span style="color: #008080;">109</span>                 dd.setMonth(date_month - 2<span style="color: #000000;">);
</span><span style="color: #008080;">110</span>                 dd.setDate(date_date + 30 +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;">111</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">112</span>             <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">113</span>                 dd.setDate(date_date +<span style="color: #000000;"> AddDayCount);
</span><span style="color: #008080;">114</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">115</span>         <span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;">116</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">117</span>     
<span style="color: #008080;">118</span>     <span style="color: #008000;">//</span> 
<span style="color: #008080;">119</span>     <span style="color: #0000ff;">var</span> y =<span style="color: #000000;"> dd.getFullYear(); 
</span><span style="color: #008080;">120</span>     <span style="color: #0000ff;">var</span> m = (dd.getMonth()+1)&lt;10?"0"+(dd.getMonth()+1):(dd.getMonth()+1);<span style="color: #008000;">//</span><span style="color: #008000;">获取当前月份的日期，不足10补0</span>
<span style="color: #008080;">121</span>     <span style="color: #0000ff;">var</span> d = dd.getDate()&lt;10?"0"+dd.getDate():dd.getDate(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前几号，不足10补0</span>
<span style="color: #008080;">122</span>     <span style="color: #0000ff;">var</span> str = y+"-"+m+"-"+d+" 00:00:00"<span style="color: #000000;">; 
</span><span style="color: #008080;">123</span>     str = str.replace(/-/g,"/"<span style="color: #000000;">);
</span><span style="color: #008080;">124</span>     <span style="color: #0000ff;">var</span> new_date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date(str);
</span><span style="color: #008080;">125</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> new_date;
</span><span style="color: #008080;">126</span> }</pre>
</div>
<p>　　16． firebug下可以成功使用console.log()</p>
<p>　　17． css居中问题：<br />　　　　div居中：<br />　　　　　　margin: 0 auto;<br />　　　　text居中：<br />　　　　　　text-align:center;</p>
<p>　　18． ?js深拷贝和浅拷贝问题.</p>
<p>　　19． sublime快捷键:Ctrl+Shift+上/下键：将一行上移/下移.</p>
<p>　　20． js计算两个日期的天数差：</p>
<div class="cnblogs_code">
<pre> <span style="color: #008000;">//</span><span style="color: #008000;">计算天数差的函数，通用  </span>
<span style="color: #0000ff;">function</span><span style="color: #000000;">  DateDiff(sDate1,  sDate2){    
    </span><span style="color: #0000ff;">var</span><span style="color: #000000;">  oDate1,  oDate2,  iDays ;
    </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> dd1,dd2,mm1,mm2,yy1,yy2;
    dd1 </span>=<span style="color: #000000;"> sDate1.getDate();
    mm1 </span>=<span style="color: #000000;"> sDate1.getMonth();
    yy1 </span>=<span style="color: #000000;"> sDate1.getFullYear();
    dd2 </span>=<span style="color: #000000;"> sDate2.getDate();
    mm2 </span>=<span style="color: #000000;"> sDate2.getMonth();
    yy2 </span>=<span style="color: #000000;"> sDate2.getFullYear();

    oDate1  </span>=  <span style="color: #0000ff;">new</span><span style="color: #000000;">  Date(yy1,mm1,dd1) ;   
    oDate2  </span>=  <span style="color: #0000ff;">new</span><span style="color: #000000;">  Date(yy2,mm2,dd2) ; 
    iDays  </span>=  parseInt(Math.abs(oDate1  -  oDate2)/1000/60/60/24);    <span style="color: #008000;">//</span><span style="color: #008000;">把相差的毫秒数转换为天数  </span>
    <span style="color: #0000ff;">return</span><span style="color: #000000;">  iDays;  
}</span></pre>
</div>
<p>　　21、 今日备份：快盘。</p>
<p>&nbsp;</p>
<p><strong>&nbsp;[7.14 周二]</strong></p>
<p>　　昨天从安徽黄山旅游5天回来，今天是回来的第一天上班。主要完成的工作为：店铺后台销售统计的前端日/周/月的时间显示与选择功能，为之后的后端数据查询与分析功能奠定了基础。</p>
<p>　　1、 bug：总后台店铺评论不应该包括系统自动评论的订单<br />　　　　修改方案：把状态为7(系统自动评价)的订单去掉。<br />　　2、 判断闰年：if((year%4==0&amp;&amp;year%100!=0)||(year%400==0)) </p>
<p>　　　　即：年份能被4整除但不能被100整除，或者能被400整除。<br />　　3、 js 单独set年月日时要先set month再set date<br />　　4、 js date类的setMonth方法的诡异问题（setMonth后月份顺延问题）：</p>
<p>　　　　如果原来date的月份是偶数月，则重新setmonth后月份会比正确值多1,而奇数月不会有这个问题。<br />　　　　如：date原来为2015-08-31,经过date.setMonth(8)以后，date变成了2015-10-01,而不是2015-09-01。<br />　　　　解决方案：在创建date的时候不要使用空的构造函数:var date = new date();<br />　　　　而要用类似于这样的构造函数：var date = new date(2015,1,1);<br />　　　　这样问题就会解决。<br />　　5、 js中的整除运算:<br />　　　　Math.ceil(count / pagesize);　　 //向上整除 4/3=2;<br />　　　　Math.floor(count / pagesize);　　 //向下整除 4/3=1;<br />　　6、 创建日期对象的方法之一：<br />　　　　var date = new Date(2015,0,1,23,59,59);<br />　　　　其中0表示是1月份。<br />　　7、 git本地仓库切换分支后，sublime中的代码会自动更新到切换后的分支。<br />　　8、 发现最近经常和mysql、python、js的时间类型打交道，而用到的时候又不是很熟悉，而且非常容易搞混，所以要做个总结：</p>
<p>　　(1)三种日期类型之间的相互转化的方法：<br />　　　　①MySQL datetime类型&mdash;&mdash;&gt;python的datetime类型<br />　　　　②python的datetime类型&mdash;&mdash;&gt;MySQL datetime类型<br />　　　　③js的date类型&mdash;&mdash;&gt;python的datetime类型<br />　　　　④python的datetime类型&mdash;&mdash;&gt;js的date类型<br />　　(2)同种语言日期类型与字符串的相互转化：<br />　　　　①python中日期字符串&mdash;&mdash;&gt;python datetime类型<br />　　　　②python datetime类型&mdash;&mdash;&gt;字符串<br />　　　　③js中日期字符串&mdash;&mdash;&gt;js date类型<br />　　　　④js date类型&mdash;&mdash;&gt;js字符串<br />　　　　⑤MySQL中日期字符串&mdash;&mdash;&gt;MySQL datetime类型<br />　　　　⑥MySQL datetime类型&mdash;&mdash;&gt;MySQL字符串\<br />　　(3)同种语言时间戳和日期类型的相互转化：<br />　　　　①python时间戳&mdash;&mdash;&gt;python datetime类型<br />　　　　②python datetime类型&mdash;&mdash;&gt;python时间戳<br />　　　　③js时间戳&mdash;&mdash;&gt;js datetime类型<br />　　　　④js datetime类型&mdash;&mdash;&gt;js时间戳<br />　　　　⑤MySQL时间戳&mdash;&mdash;&gt;MySQL datetime类型<br />　　　　⑥MySQL datetime类型&mdash;&mdash;&gt;MySQL时间戳<br />　　9、 店铺的水果信息在Fruit表中存。<br />　　10、 字段关联的时候的查询方法。</p>
<p>　　11、 今日备份:快盘</p>
<p>&nbsp;</p>
<p>&nbsp;【7.15 周三】 </p>
<p>　　今天主要做的工作是继续写店铺后台的销售统计的功能。昨天已经完成了前台最重要的功能之一：显示并能够选择不同的日/周/月，今天做的工作主要是数据需求和数据库的分析工作。</p>
<p>　　1、 bug:总后台订单时间和送达时间统计的数据完全一样<br />　　　&nbsp; 解决方法：测试的时候发现报错：'KeyError:24'，经过排查发现是superadmin.py中orderstatic类中的数组下标越界问题，数组最大的下标为23，但是数据会出现24的下标，从而导致错误。<br />　　　&nbsp; 改成这样即可：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> 　<span style="color: #0000ff;">if</span> order[0] == 1:  <span style="color: #008000;">#</span><span style="color: #008000;"> 立即送收货时间估计</span>
<span style="color: #008080;">2</span>     <span style="color: #0000ff;">if</span> order[1].hour + (order[1].minute+order[3])//60 == 24<span style="color: #000000;">:
</span><span style="color: #008080;">3</span>     　　data[0] += 1
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">else</span><span style="color: #000000;">:
</span><span style="color: #008080;">5</span>     　　data[order[1].hour + (order[1].minute+order[3])//60] += 1</pre>
</div>
<p>　　2、 今日任务数据需求与数据库分析：<br />　　　　(1)销量排行：按商品类目排序 数据需求分析<br />　　　　　　用户所选时间段（某天，某周，或某个月）内的该店铺（self.current_shop）的不同类目的商品的总销售额、该类目下的所有小类商品的销售额，以及数据的排序（按照类目总销售额从大到小排序）<br />　　　　　　①查询某个店铺所有水果的类目：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> <span style="color: #0000ff;">distinct</span> fruit_type.name <span style="color: #0000ff;">from</span> fruit_type,fruit <span style="color: #0000ff;">where</span> fruit_type.id <span style="color: #808080;">=</span> fruit.fruit_type_id <span style="color: #808080;">and</span> fruit.shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1203</span>;</pre>
</div>
<p>　　　　　　②查询某个店铺的某个水果属于什么类目：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> fruit_type.name <span style="color: #0000ff;">from</span> fruit_type,fruit <span style="color: #0000ff;">where</span> fruit.fruit_type_id <span style="color: #808080;">=</span> fruit_type.id <span style="color: #808080;">and</span> fruit.shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1203</span> <span style="color: #808080;">and</span> fruit.name <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">青苹果</span><span style="color: #ff0000;">'</span>;</pre>
</div>
<p>　　　　　　③查询某个店铺的所有水果名称：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> name <span style="color: #0000ff;">from</span> fruit <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1203</span>;</pre>
</div>
<p>　　　　　　④从order表中查询出特定的一天某个店铺的所有有效订单（status字段的值大于等于5）的fruits字段：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> fruits <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1203</span> <span style="color: #808080;">and</span> status <span style="color: #808080;">&gt;=</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">and</span> ((create_date <span style="color: #808080;">like</span> "<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">07</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">15</span><span style="color: #808080;">%</span>" <span style="color: #808080;">and</span> today <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1</span>) <span style="color: #808080;">or</span> (date_sub(create_date,interval <span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">1</span> <span style="color: #ff00ff;">day</span>) <span style="color: #808080;">like</span> "<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">07</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">15</span><span style="color: #808080;">%</span>" <span style="color: #808080;">and</span> today <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2</span>) );</pre>
</div>
<p>　　　　　　⑤从order表中查询出某个日期区间内某个店铺的所有有效订单（status字段的值大于等于5）的fruits字段(比如2015-07-15和2015-07-16两天的)：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> fruits <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1203</span> <span style="color: #808080;">and</span> status <span style="color: #808080;">&gt;=</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">and</span> ( (create_date <span style="color: #808080;">&gt;=</span> "<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">07</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">15</span>" <span style="color: #808080;">and</span> date_sub(create_date,interval <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #ff00ff;">day</span>) <span style="color: #808080;">&lt;</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">2015-07-16</span><span style="color: #ff0000;">'</span> <span style="color: #808080;">and</span> today <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1</span>) <span style="color: #808080;">or</span> (date_sub(create_date,interval <span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">1</span> <span style="color: #ff00ff;">day</span>) <span style="color: #808080;">&gt;=</span> "<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">07</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">15</span>" <span style="color: #808080;">and</span> create_date <span style="color: #808080;">&lt;</span> "<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">07</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">16</span>" <span style="color: #808080;">and</span>  today <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2</span>) );</pre>
</div>
<p>　　　　　　⑥查询某个店铺所有水果类目中分别有多少种水果：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> shop_type_num_list =<span style="color: #000000;"> []
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">for</span> shop_type_name <span style="color: #0000ff;">in</span><span style="color: #000000;"> shop_all_type_name:
</span><span style="color: #008080;">3</span>     tmp =<span style="color: #000000;"> {}
</span><span style="color: #008080;">4</span>     shop_type_name =<span style="color: #000000;"> shop_type_name[0]
</span><span style="color: #008080;">5</span>     tmp[<span style="color: #800000;">"</span><span style="color: #800000;">type_name</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> shop_type_name
</span><span style="color: #008080;">6</span>     tmp[<span style="color: #800000;">"</span><span style="color: #800000;">type_num</span><span style="color: #800000;">"</span>] = self.session.query(models.FruitType).join(models.Fruit).filter(models.Fruit.shop_id == self.current_shop.id,models.FruitType.name ==<span style="color: #000000;"> shop_type_name).count()
</span><span style="color: #008080;">7</span>     shop_type_num_list.append(tmp)</pre>
</div>
<p>　　　　　　⑦把⑥中查到的fruits字段中的每个单种商品的名称、数量、计价方式的单价分离出来，并计算出每个fruits中每个单种商品的销售额。</p>
<p>　　　　　　*将fruits字段的字符串先转化为字典类型，然后从字典里面取值<br />　　　　　　*注：订单的status字段的值大于等于5的订单才能算销售额<br />　　　　　　*是不是应该有个运费收入<br />　　　　　　*order表有一个today字段，today=1表示送货时间是&lsquo;今天&rsquo;（即和order的create_date在同一天），today=2表示送货时间是'明天'（即在order的create_date的后一天）</p>
<p>　　　　　　*用户不能自己创建新的类目，如果用户的商品不在现有的类目中，则只能归为'其他'类。<br />　　　　(2)销量排行：按商品名称排序 数据需求分析<br />　　　　　　用户所选时间段（某天，某周，或某个月）内的该店铺（self.current_shop）的不同名称的商品的销售额，以及数据的排序（按照商品销售额从大到小排序）<br />　　　　(3)单种水果的销售额统计<br />　　　　(4)单个类目水果的销售额统计<br /><br />　　3、 python如何将字符串转换成字典dict类型：<br />　　　　用eval()或exec()函数实现：<br />　　　　　　&gt;&gt;&gt; user<br />　　　　　　"{'name' : 'jim', 'sex' : 'male', 'age': 18}"<br />　　　　　　&gt;&gt;&gt; b=eval(user)<br />　　　　　　&gt;&gt;&gt; b<br />　　　　　　{'age': 18, 'name': 'jim', 'sex': 'male'}<br />　　　　　　&gt;&gt;&gt; exec("c="+user)<br />　　　　　　&gt;&gt;&gt; c<br />　　　　　　{'age': 18, 'name': 'jim', 'sex': 'male'}</p>
<p><br />　　4、 mysql date_sub()函数举例：<br />　　　　假如今天是2013年5月20日。<br />　　　　date_sub('2012-05-25',interval 1 day) 表示 2012-05-24<br />　　　　date_sub('2012-05-25',interval 0 day) 表示 2012-05-25<br />　　　　date_sub('2012-05-25',interval -1 day) 表示 2012-05-26<br />　　　　date_sub('2012-05-31',interval -1 day) 表示 2012-06-01<br />　　　　date_sub(curdate(),interval 1 day) 表示 2013-05-19<br />　　　　date_sub(curdate(),interval -1 day) 表示 2013-05-21<br />　　　　date_sub(curdate(),interval 1 month) 表示 2013-04-20<br />　　　　date_sub(curdate(),interval -1 month) 表示 2013-06-20<br />　　　　date_sub(curdate(),interval 1 year) 表示 2012-05-20<br />　　　　date_sub(curdate(),interval -1 year) 表示 2014-05-20<br /><br />　　5、 python获取当前时间：now = datetime.datetime.now()<br />　　　　获取当前时间的年月日：now_date = datetime.datetime(now.year,now.month,now.date)<br /><br />　　6、 这样解决之前的echarts没有满足要求的堆积图表的难题：<br />　　　　第一步先把所有类目的水果的总销售额用条形图显示出来；<br />　　　　第二步为每个类目的条形图添加点击事件，当点击的时候弹出新的图层显示该类目不同种类水果的详细销售额。</p>
<p>　　7、 mysql日期或时间类型可以直接与日期或时间字符串比较大小。<br />　　　　比如今天是2015-07-15,则：</p>
<p>　　　　　　select curdate()&gt;'2015-07-10'的值为1，select curdate()&gt;'2015-07-19'的值为0.<br />　　　　　　select now() &gt; '2015-07-10'的值为1，select now() &lt; '2015-07-10'的值为0.</p>
<p>　　8、 今日备份：快盘</p>
<p>&nbsp;&nbsp;【7.16 周四】</p>
<p>　　今天完成的主要工作有：店铺后台销售统计的按照商品类目统计和按照商品名称统计的功能已经基本实现。</p>
<p>　　1、 python的下面这段代码执行的时候会出现错误： now_date = datetime.datetime(now.year,now.month,now.date) TypeError: an integer is required (got type builtin_function_or_method)</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> now =<span style="color: #000000;"> datetime.datetime.now()
</span><span style="color: #008080;">2</span> now_date = datetime.datetime(now.year,now.month,now.date)</pre>
</div>
<p>　　　　解决方法：把now.date改为now.day即可。</p>
<p>　　2、 sqlalchemy join查询的总结：<br />　　　　(1)当两个表之间只有一个外键的时候，这样用：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">session.query(User).join(Address).\
</span><span style="color: #008080;">2</span> <span style="color: #000000;">...
</span><span style="color: #008080;">3</span>     filter(Address.email_address==<span style="color: #800000;">'</span><span style="color: #800000;">jack@google.com</span><span style="color: #800000;">'</span><span style="color: #000000;">).\
</span><span style="color: #008080;">4</span> <span style="color: #000000;">.
</span><span style="color: #008080;">5</span>     all() </pre>
</div>
<p>　　　　(2)当两个表之间没有外键或者有不止一个外键的时候，这样用：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>  query.join(Address,User.id==Address.user_id)<span style="color: #008000;">#</span><span style="color: #008000;"> 明确的条件</span>
<span style="color: #008080;">2</span>  query.join(User.addresses)<span style="color: #008000;">#</span><span style="color: #008000;"> 指定从左到右的关系</span>
<span style="color: #008080;">3</span>  query.join(Address,User.addresses)    <span style="color: #008000;">#</span><span style="color: #008000;">同样，有明确的目标</span>
<span style="color: #008080;">4</span>  query.join(<span style="color: #800000;">'</span><span style="color: #800000;">addresses</span><span style="color: #800000;">'</span>) <span style="color: #008000;">#</span><span style="color: #008000;"> 同样，使用字符串</span></pre>
</div>
<p>&nbsp;&nbsp;&nbsp; 　　　　outerjoin()和join()用法相同：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> query.outerjoin(User.addresses)　　　<span style="color: #008000;">#</span><span style="color: #008000;"> LEFT OUTER JOIN</span></pre>
</div>
<p>　　3、 两个很有用的前端网站：bootstrap，iconfont</p>
<p>　　4、 python将字符串转化为datetime类型：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> end_date_str = <span style="color: #800000;">'</span><span style="color: #800000;">2015-07-16</span><span style="color: #800000;">'</span>
<span style="color: #008080;">2</span> end_date = datetime.datetime.strptime(end_date_str,<span style="color: #800000;">'</span><span style="color: #800000;">%Y-%m-%d</span><span style="color: #800000;">'</span>)</pre>
</div>
<p>　　5、 python计算当前时间向后10天的时间:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> d1 =<span style="color: #000000;"> datetime.datetime.now()
</span><span style="color: #008080;">2</span> d2 = d1 + datetime.timedelta(days =10)</pre>
</div>
<p>　　6、 python遍历取得字典的value的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">for</span> key <span style="color: #0000ff;">in</span><span style="color: #000000;"> dic_list:
</span><span style="color: #008080;">2</span>     value = dic_list[key]</pre>
</div>
<p>　　　　注：这里的'key'可以写成其他的字符，比如aa,bb等。<br />　　　　　　此外字典可以用变量当做索引。</p>
<p>　　7、 python 只获得字典中所有键的名字到列表中:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> d={<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 2, <span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 3, <span style="color: #800000;">'</span><span style="color: #800000;">d</span><span style="color: #800000;">'</span>: 4<span style="color: #000000;">}
</span><span style="color: #008080;">2</span> dlist=list(d.keys())</pre>
</div>
<p>　　　　用字典的keys方法获得所有键的名字,python3需要转换为list,python2直接为list</p>
<p>　　　　（是不是还有个values方法??）<br />　　8、 js给后台传的参数设计：</p>
<p>　　　　(1)action,5个取值：'all','type','name','single_type','single_name'<br />　　　　(2)type,3个取值：'day','week','month'<br />　　　　(3)start_date<br />　　　　(4)end_date<br />　　　　注：感觉type没有必要要.</p>
<p>　　9、 python列表排序：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> listaa.sort(key = <span style="color: #0000ff;">lambda</span> aa_item:len(aa_item),reverse=True)　　#按照列表listaa的每一项的长度的降序排列.</pre>
</div>
<p>　　10、 今天遇到一个问题：在js中将Date类型值通过postJson传给python后台后，发现这个值莫名其妙地少了一天，后来经过学长的提醒，发现应该是因为js和python所用时区不一样，从而导致了日期不一致的问题。<br />　　　　解决方案：在js中通过postJson传Date值前，先将它转化成字符串再传。自编字符串转化函数：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> getDateStr(date){
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">var</span> y =<span style="color: #000000;"> date.getFullYear();
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">var</span> m = (date.getMonth()+1)&lt;10?"0"+(date.getMonth()+1):(date.getMonth()+1);<span style="color: #008000;">//</span><span style="color: #008000;">获取当前月份的日期，不足10补0</span>
<span style="color: #008080;">4</span>     <span style="color: #0000ff;">var</span> d = date.getDate()&lt;10?"0"+date.getDate():date.getDate(); <span style="color: #008000;">//</span><span style="color: #008000;">获取当前几号，不足10补0</span>
<span style="color: #008080;">5</span>     <span style="color: #0000ff;">var</span> str = y+"-"+m+"-"+<span style="color: #000000;">d;
</span><span style="color: #008080;">6</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> str;
</span><span style="color: #008080;">7</span> }</pre>
</div>
<p>　　11、 研究一下echarts条形图的点击事件<br />　　12、 js中for(var i = 0;i &lt; data.length;i++)和for(var i in data)的区别。</p>
<p>　　13、 今日备份：快盘</p>
<p><strong>&nbsp;&nbsp;[7.17 周五]</strong></p>
<p>　　1、 今天主要任务：店铺后台销售统计。</p>
<p>　　2、 问题：图表所在的div的高度不能根据图表内容的增多自动增高</p>
<p>　　　　解决方法：在图表init之前就发post请求获得要显示的数据，然后根据数据的多少动态设置div的高度，然后再init图表即可。<br />　　　　设置div高度的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #800000;">$("#div-name").css("height",50*data.length + 'px');</span></pre>
</div>
<p>　　3、 今天用到的技术：<br />　　　　(1)echarts条形图的点击事件<br />　　　　(2)遮罩层的实现<br />　　　　(3)下拉选项按钮<br />　　　　(4)echarts图表的属性设置</p>
<p>　　4、 页面刷新后图表的y坐标轴的文字被遮挡了一部分，而且横坐标的值也没有显示出来。<br />　　　　问题所在：options的series[0]的itemStyle属性设置的问题<br />　　　　解决方案：<br />　　　　　　原来的echarts的itemStyle属性为：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> itemStyle : { normal: {label : {show: <span style="color: #0000ff;">true</span>, position: 'insideRight'}}}</pre>
</div>
<p>　　　　　　改为如下这样即可解决问题：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">itemStyle : { 
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    normal: {
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">        label : {
</span><span style="color: #008080;"> 4</span>             show: <span style="color: #0000ff;">true</span><span style="color: #000000;">, 
</span><span style="color: #008080;"> 5</span>             position: 'right'<span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">            textStyle : {
</span><span style="color: #008080;"> 7</span>                 fontWeight : 'bold'
<span style="color: #008080;"> 8</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> }    </pre>
</div>
<p>　　5、 js把数值字符串转化为浮点型并保留两位小数（后来发现toFixed最后的结果的类型是字符串）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> price = parseFloat("123.4567").toFixed(2);</pre>
</div>
<p>　　6、 发现个问题：如果echarts图表所在的div的高度太小了那么echarts也显示不出来。</p>
<p>　　7、 今天下午遇到一个奇怪的问题：电脑过一个多小时弹出一个对话框，然后强制自动关机一次，很不爽。。CPU也不热呀，要找到原因。而且这几天键盘还有好几个键失灵，目测是短路了，找时间去修一修。</p>
<p>　　8、 问题：echarts图表能显示最大值最小值，但就是显示不出来平均值。<br />　　　　经过反复测试发现：echarts在求平均值的时候竟然不能对浮点数求平均值，只能是整数。<br />　　　　最后才发现：原来js对浮点数执行toFixed方法的结果是字符串，并不是数值型，这才导致了不能求平均值。<br />　　　　比如：var aa = 123.456.toFixed(2);则用typeof aa可以发现aa的类型为string,并不是浮点型，要把aa在转换成浮点型，要用parseFloat(aa)函数。<br />　　　　把toFixed方法执行过的结果先用parseFloat强制转换成浮点型，再push给echarts的series的data，则可以解决问题。</p>
<p>　　9、 这几天公司经常断网，要下个echarts的离线文档，防止断网的时候不能看。</p>
<p><strong>&nbsp;&nbsp;[7.19 周日]</strong></p>
<p>　　今天把店铺后台的销售统计功能成功完成！</p>
<p>　　1、 标签属性中添加的onclick事件传递参数的问题，传递的参数是整个标签吗？</p>
<p>　　2、 下拉选择按钮的实现总结。</p>
<p>　　　　这个实现使用的bootstrap的控件元素。</p>
<p>　　　　①在css中编写如下样式：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #800000;">.mlf20</span>{<span style="color: #ff0000;">margin-left</span>:<span style="color: #0000ff;"> 20px</span>;}
<span style="color: #008080;"> 2</span> <span style="color: #800000;">.dropdown-menu</span>{<span style="color: #ff0000;">overflow</span>:<span style="color: #0000ff;"> hidden</span>;<span style="color: #ff0000;">max-height</span>:<span style="color: #0000ff;"> 210px</span>;<span style="color: #ff0000;">overflow-y</span>:<span style="color: #0000ff;"> auto</span>;}
<span style="color: #008080;"> 3</span> <span style="color: #800000;">.category-list&gt;li</span>{<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;"> left</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;"> 25%</span>;}
<span style="color: #008080;"> 4</span> <span style="color: #800000;">.cate-title</span>{<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;"> 14px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #999</span>;<span style="color: #ff0000;">height</span>:<span style="color: #0000ff;"> 28px</span>;<span style="color: #ff0000;">line-height</span>:<span style="color: #0000ff;"> 28px</span>;<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;"> left</span>;<span style="color: #ff0000;">margin-right</span>:<span style="color: #0000ff;"> 5px</span>;}
<span style="color: #008080;"> 5</span> <span style="color: #800000;">.slide-down-select</span>{<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;">inline-block</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">100%</span>;<span style="color: #ff0000;">background</span>:<span style="color: #0000ff;">#fff</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;">#000</span>;<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;">1px solid #ddd</span>;<span style="color: #ff0000;">margin-left</span>:<span style="color: #0000ff;">0</span>;}
<span style="color: #008080;"> 6</span> <span style="color: #800000;">.slide-down-select .slide-btn</span>{<span style="color: #ff0000;">height</span>:<span style="color: #0000ff;"> 24px</span>;<span style="color: #ff0000;">line-height</span>:<span style="color: #0000ff;"> 24px</span>;<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;"> block</span>;<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;"> none</span>;<span style="color: #ff0000;">outline</span>:<span style="color: #0000ff;"> none</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;"> 100%</span>;}
<span style="color: #008080;"> 7</span> <span style="color: #800000;">.slide-down-select em</span>{<span style="color: #ff0000;">font-style</span>:<span style="color: #0000ff;">normal</span>;<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;">inline-block</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">110px</span>;<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;">14px</span>;<span style="color: #ff0000;">overflow</span>:<span style="color: #0000ff;">hidden</span>;<span style="color: #ff0000;">padding-left</span>:<span style="color: #0000ff;"> 10px</span>;<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> left</span>;}
<span style="color: #008080;"> 8</span> <span style="color: #800000;">.dropdown-toggle</span>{<span style="color: #ff0000;">padding</span>:<span style="color: #0000ff;">0 4px</span>;}
<span style="color: #008080;"> 9</span> <span style="color: #800000;">.dropdown-menu li</span>{<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">100%</span>;<span style="color: #ff0000;">padding</span>:<span style="color: #0000ff;">0</span>;}
<span style="color: #008080;">10</span> <span style="color: #800000;">.dropdown-menu .item</span>{<span style="color: #ff0000;">padding-left</span>:<span style="color: #0000ff;">14px</span>;}
<span style="color: #008080;">11</span> <span style="color: #800000;">.dropdown-menu li a:hover</span>{<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;">#fff</span>;<span style="color: #ff0000;">background-color</span>:<span style="color: #0000ff;"> #6ba4ef</span>;}
<span style="color: #008080;">12</span> <span style="color: #800000;">.caret</span>{<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;">10px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #c6c6c6</span>;}
<span style="color: #008080;">13</span> <span style="color: #800000;">.borderc</span>{<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;"> 1px solid #e7e7eb</span>;}
<span style="color: #008080;">14</span> <span style="color: #800000;">.pointer</span>{<span style="color: #ff0000;">cursor</span>:<span style="color: #0000ff;"> pointer</span>;}
<span style="color: #008080;">15</span> <span style="color: #800000;">.min80</span>{<span style="color: #ff0000;">min-width</span>:<span style="color: #0000ff;"> 80px</span>;}
<span style="color: #008080;">16</span> <span style="color: #800000;">.mt2</span>{<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;"> 2px</span>;}
<span style="color: #008080;">17</span> <span style="color: #800000;">.txt-center</span>{<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> center !important</span>;}
<span style="color: #008080;">18</span> <span style="color: #800000;">.txt-left</span>{<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> left !important</span>;}
<span style="color: #008080;">19</span> <span style="color: #800000;">.hig</span>{<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;"> 1px dashed #ff6666 !important</span>;}
<span style="color: #008080;">20</span> <span style="color: #800000;">.no-title</span>{<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;"> 20px</span>;<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> center</span>;<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;"> 40px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #333</span>;}
<span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span> <span style="color: #800000;">.pull-left</span>{<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;">left !important</span>;}
<span style="color: #008080;">23</span> <span style="color: #800000;">.w130</span>{<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">130px !important</span>;}</pre>
</div>
<p>　　　　②在html中要加入下拉选择按钮的地方写如下代码，其中最外的是li元素，第一个div是选择按钮前的提示文字，第二个div中：button代表下拉选择按钮最上面显示的按钮，em标签代表强调；button下面的ul标签是隐藏的几个按钮，当点击最上方按钮的时候隐藏的按钮出现，ul的标签内容是在js中动态添加的。　　　　　　</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span> 
<span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tit cate-title"</span><span style="color: #0000ff;">&gt;</span>选择商品类目：<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="dropdown slide-down-select pull-left w130"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 4</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="btn btn-default dropdown-toggle area height25 slide-btn"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="dropdownMenu3"</span><span style="color: #ff0000;"> data-toggle</span><span style="color: #0000ff;">="dropdown"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span>                     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">em </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="pull-left filter_status"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="first_type"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">em</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span>                     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="caret pull-right no-margin-left rotate0"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span>                 <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 8</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="dropdown-menu dropdown-menu-right w130 condition-list"</span><span style="color: #ff0000;"> role</span><span style="color: #0000ff;">="menu"</span><span style="color: #ff0000;"> aria-labelledby</span><span style="color: #0000ff;">="dropdownMenu3"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="currentTypeName"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span>                 <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　③在js中，为button及ul添加内容及添加点击事件：</p>
<p>　　　　添加内容：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　　　　　<span style="color: #008080;"> <br /> 2</span>                 $("#first_type"<span style="color: #000000;">).text(type_max);
</span><span style="color: #008080;"> 3</span>                
<span style="color: #008080;"> 6</span>                  $("#currentTypeName"<span style="color: #000000;">).empty();
</span><span style="color: #008080;"> 7</span>               <span style="color: #008080;"> <br /> 8</span> 
<span style="color: #008080;"> 9</span>                   <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> i = 0;i &lt; all_type.length;i++<span style="color: #000000;">){
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>                      <span style="color: #0000ff;">var</span> type_id = "type"+<span style="color: #000000;">i;
</span><span style="color: #008080;">12</span>                      <span style="color: #0000ff;">var</span> item = '&lt;li&gt;'
<span style="color: #008080;">13</span>                         +'&lt;a class="item" id={{type_id}} onclick="onTypeItemClick({{type_id}})"&gt;{{type_name}}&lt;/a&gt;'
<span style="color: #008080;">14</span>                           '&lt;/li'<span style="color: #000000;">;
</span><span style="color: #008080;">15</span>                      <span style="color: #0000ff;">var</span> render =<span style="color: #000000;"> template.compile(item);
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>                      <span style="color: #0000ff;">var</span> type_name =<span style="color: #000000;"> all_type[i];
</span><span style="color: #008080;">18</span>                      <span style="color: #0000ff;">var</span> list_item=<span style="color: #000000;"> render({
</span><span style="color: #008080;">19</span> <span style="color: #000000;">                         type_id:type_id,
</span><span style="color: #008080;">20</span> <span style="color: #000000;">                         type_name:type_name                 
</span><span style="color: #008080;">21</span> <span style="color: #000000;">                     });
</span><span style="color: #008080;">22</span>                      $("#currentTypeName"<span style="color: #000000;">).append(list_item);
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span>                  }</pre>
</div>
<p>　　　　点击事件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;">  onTypeItemClick(type_id){
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">var</span> first_type = $("#"+<span style="color: #000000;">type_id.id).text();
</span><span style="color: #008080;">3</span>     $("#first_type"<span style="color: #000000;">).text(first_type);
</span><span style="color: #008080;">4</span>     
<span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span> }</pre>
</div>
<p>　　3、 为echarts的series动态添加新的系列：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> options.series.push({name:"aaa",stack:'总量',type:'bar',data:[220, 232, 101, 234, 190]});</pre>
</div>
<p>　　4、 js遍历object的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> obj = {"name":"jyj","age":22<span style="color: #000000;">};
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> key <span style="color: #0000ff;">in</span><span style="color: #000000;"> obj){
</span><span style="color: #008080;">3</span> 　　<span style="color: #000000;">console.log(key);
</span><span style="color: #008080;">4</span> }</pre>
</div>
<p>　　输出结果:<br />　　　　name <br />　　　　age</p>
<p>　　如果改成这样：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> obj = {"name":"jyj","age":22<span style="color: #000000;">};
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> e <span style="color: #0000ff;">in</span><span style="color: #000000;"> obj){
</span><span style="color: #008080;">3</span> <span style="color: #000000;">　　console.log(obj[e]);
</span><span style="color: #008080;">4</span> }</pre>
</div>
<p>　　输出结果：<br />　　　　jyj<br />　　　　22　</p>
<p>　　5、 echarts渲染之前xAxis的data不能为空，否则会出错。</p>
<p>　　6、 几个小问题：<br />　　(1)考虑到数据量大的时候的显示问题，为下拉选项框和前两个图表增加滚动条功能。　　　　&nbsp;---ok<br />　　(2)前两个图表的每个条的高度小一点，20px左右。　　　　　　　　　　　　　　　　　　　---ok 因为有行间距，所以20太小，最后定为40px<br />　　(3)为第三个图表增加echarts滚动条效果。　　　　　　　　　　　　　　　　　　　　　　　---ok<br />　　(4)去掉按周排序的&ldquo;第几周&rdquo;。　　　　　　　　　　　　　　　　　　　　　　　　　　　　 &nbsp;---ok</p>
<p>　　7、 让元素的高度达到一定值的时候出现滚动条：<br />　　　　在该元素的class中添加如下css属性即可：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #800000;">.dropdown-menu</span>{<span style="color: #ff0000;">overflow</span>:<span style="color: #0000ff;"> hidden</span>;<span style="color: #ff0000;">max-height</span>:<span style="color: #0000ff;"> 100px</span>;<span style="color: #ff0000;">overflow-y</span>:<span style="color: #0000ff;"> auto</span>;}</pre>
</div>
<p>　　8、 要让echarts图表的高度变高到一定值的时候也出现正常的滚动条小果，那么不能直接在echarts的父div上加滚动条css，而要在父div外面再套一个div，再在这个div上添加滚动条css.</p>
<p>　　9、 echarts　datazoom数据区缩放控件的蓝色拖动条的宽度大一点(可是改变dataZoom控件的handleSize属性后不起作用，这是个问题)</p>
<p>　　10、 ubuntu firefox的cookie文件位置：$HOME/.mozilla/firefox/xxxx.default/目录下的cookie.sqlite文件。</p>
<p>　　11、 今日备份：快盘。</p>
<p><strong>&nbsp;[7.20 周一]</strong></p>
<p>　　1、 今日任务：余额记录重复、遗漏、数值计算错误的问题(错误多是因为并发操作没有加锁引起的)<br />　　　　这几个表：balancehistory(余额变化记录),shop(shop_balance),customer_shop_follow(用户在某店铺中存的余额),order(是依据)</p>
<p>　　2、 今天装公司新电脑ubuntu系统装完以后开机遇到这个问题，且每次开机都会出现：<br />　　　　System program problem detected<br />　　　　Do you want to report the problem now?</p>
<p>　　3、 昨天的订单送达时间问题，今天测试又发现没有问题，还是要在多家店铺上面进行测试才行。</p>
<p>　　4、 mysql将查询记录及结果记录写入到外部文件中的方法：<br />　　方法1:<br />　　　　使用tee命令(登入数据库的时候要加sudo)：<br />　　　　　　mysql &gt; tee /home/senguo/log.txt;<br />　　　　　　mysql &gt; use mysql;<br />　　　　　　mysql &gt; show tables;<br />　　　　　　mysql &gt; notee; //关闭记录功能<br />　　方法2(按照格式写入excel文件):<br />　　　　select * from shop<br />　　　　into outfile '/tmp/test.xls'<br />　　　　fields terminated by ',' <br />　　　　optionally enclosed by '"'<br />　　　　lines terminated by '\n';<br />　　　　注：路径必须是/tmp/xxx.xxx，否则没有权限。</p>
<p>　　5、 今日任务数据库分析：<br />　　(1)shop表：<br />　　　　*shop_balance字段：当前店铺的余额<br />　　　　*available_balance：该店铺当前的可提现余额<br />　　　　*正确的情况下：同一时刻available_balance &lt;= shop_balanc</p>
<p>　　(2)order表：<br />　　　　*pay_type = Column(TINYINT, default=1)#付款方式：1：货到付款，2：余额 3:在线支付<br />　　(3)balancehistory表：<br />　　　　*balance_type = Column(Integer,default = 1) # 0:代表充值 ，1:余额消费 2:提现 3:在线支付 4:商家删除订单 5:用户自己取消订单 6:余额消费完成 ，可提现额度的变化<br />　　　　*这个表是从2015-5-3开始有记录的。<br />　　(4)customer_shop_follow表：<br />　　　　*shop_balance:该用户在该店铺存的余额</p>
<p>　　6、 python3相比python2的输入函数的变化：<br />　　　　python3删除了raw_input，用input代替： <br />　　　　2.X:guess = int(raw_input('Enter an integer : ')) # 读取键盘输入的方法 <br />　　　　3.X:guess = int(input('Enter an integer : '))</p>
<p>　　7、 mysql用select 1 into outfile '/home/senguo/test/test.xls';命令将查询结果写入外部文件出错：ERROR 1 (HY000): Can't create/write to file '/home/senguo/test/test.xls' (Errcode: 13)<br />　　　　修改了test文件夹权限：sudo chmod -R 777 /home/senguo/test仍然不行，如果先创建test.xls文件然后修改其权限为777,则在数据库中再执行命令：select 1 into outfile '/home/senguo/test/test.xls';又会出现错误：ERROR 1086 (HY000): File '/home/senguo/test.xls' already exists<br />　　　　解决方法：在系统根目录下有一个'/tmp/'目录，将上面的sql命令的文件路径改为'/tmp/test.xls'即可成功执行。</p>
<p>　　8、 ubuntu中在命令行下当不知道用什么程序打开某一个文件的时候，可以使用:xdg-open file.xxx 的命令自动用默认的对应的程序打开。<br />　　　　比如：xdg-open test.xls，会自动用excel程序打开当前目录的test.xls文件。</p>
<p>　　9、 mysql改变某一列：alter table senguocc.order change fruits fruits varchar(2000) default NULL;</p>
<p>　　10、 店铺后台是根据浏览器cookie判断当前店铺是哪个店铺的，如果线上系统和本地系统同时运行，那么因为cookie的原因，会导致点击链接跳到另外一个店铺的问题。所以以后测试的时候还是不要同时开线上的和线下的比较好。</p>
<p>　　11、 admin-sell-count bug:第三张单种类目销售统计表，当某种类目中的商品数非常多的时候，会出现图例(legend)很拥挤的情况，非常影响美观，因此最后去掉legend.（ok）</p>
<p>　　12、 admin-sell-count bug:第三张单种类目销售统计表，当添加新商品并有销售记录后，前几天的销售记录的数据会出问题。<br />　　　　主要原因：js中object的元素是无序排列的，python的字典也是无序排列的,后台给js传参的时候没有注意到这个问题。</p>
<p>　　13、 python中把一个字典aa中的元素按照键名排序并存到一个列表中的方法：<br />　　　　先获得字典aa的键名列表:bb = list(aa.keys())<br />　　　　然后把列表bb排序：bb.sort()<br />　　　　然后再以bb的元素为索引读取aa中的值：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> another_list =<span style="color: #000000;"> [ ]
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span><span style="color: #000000;"> range(len(bb)):
</span><span style="color: #008080;">3</span>     tmp =<span style="color: #000000;"> { }
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">print</span>(bb[i],<span style="color: #800000;">"</span><span style="color: #800000;">:</span><span style="color: #800000;">"</span><span style="color: #000000;">,aa[bb[i]])
</span><span style="color: #008080;">5</span>     tmp[bb[i]] =<span style="color: #000000;"> aa[bb[i]]
</span><span style="color: #008080;">6</span>     another_list.append(tmp)</pre>
</div>
<p>&nbsp;　　14、 今日备份：快盘。</p>
<p><strong>&nbsp;[7.21 周二]</strong></p>
<p>　　1、 admin-sell-count a big bug:查询数据库的时候用的是商品名称而不是id导致的很多错误，而且还没考虑到商品的名称是可以修改的。经过大规模修改后才解决问题。</p>
<p>　　　　这给了以后一个教训：所有数据库查询必须用不变且唯一的值进行操作（如id）,不能想当然用自己觉得对的字段。</p>
<p>　　2、 让echarts在后台查询数据的时候就显示loading画面的方法：<br />　　　　将chart和options都定义成全局变量，先初始化chart和option，同时在初始化的function中定义loading函数，不隐藏，然后再发post请求，等到返回成功数据以后再往chart的option里面添加数据，添加数据后再隐藏loading函数，最后显示图表。</p>
<p>　　3、 小问题：admin sell count前两个图表的排序方式和下面图表距离太近了，如果图表太高添加滚动条以后两者就挨在了一起，要增大间距。</p>
<p>　　4、 python将整数强制转换成字符串：str(123)</p>
<p>　　5、 python文件操作：<br />　　　　(1)打开文件：f = open("./test.txt","w+")<br />　　　　(2)向文件写入字符串：f.write("") (只能写入字符串，如果想把列表等用write函数写入文件，则要先转化成字符串才行。)<br />　　　　(3)关闭文件：f.close()</p>
<p><strong>　</strong>　6、 今日备份：快盘。</p>
<p><strong>&nbsp; [7.22 周三]</strong></p>
<p>　　1、 &nbsp;今日任务：余额记录重复、遗漏、数值计算错误的问题(错误多是因为并发操作没有加锁引起的)<br />　　　　这几个表：balancehistory(余额变化记录),shop(shop_balance),customer_shop_follow(用户在某店铺中存的余额),order(是依据)<br /><br />　　2、 &nbsp;js实现遮罩层：<br />　　　　(1)首先在html　body块中写如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &lt;body&gt;
<span style="color: #008080;">2</span> 　　&lt;input id="btn-check" type="button" value="Showa" onclick="showdiv();"/&gt; 
<span style="color: #008080;">3</span> 　　&lt;div id="checkinput_bg"&gt;&lt;/div&gt;
<span style="color: #008080;">4</span> 　　&lt;div id="div-input"&gt;　　<span style="color: #008000;">//</span><span style="color: #008000;">这个div中的内容为自定义的内容    </span>
<span style="color: #008080;">5</span> 　　　　&lt;input id="btnclose" type="button" value="Close" onclick="hidediv();"/&gt; 
<span style="color: #008080;">6</span> 　　&lt;/div&gt;
<span style="color: #008080;">7</span> &lt;/body&gt; </pre>
</div>
<p>　　　　(2)然后在css中写如下样式：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #800000;">&lt;style type="text/css"&gt;
</span><span style="color: #008080;">2</span> <span style="color: #800000;">　　#checkinput_bg</span>{<span style="color: #ff0000;"> display</span>:<span style="color: #0000ff;"> none</span>;<span style="color: #ff0000;"> position</span>:<span style="color: #0000ff;"> absolute</span>;<span style="color: #ff0000;"> top</span>:<span style="color: #0000ff;"> 0%</span>;<span style="color: #ff0000;"> left</span>:<span style="color: #0000ff;"> 0%</span>;<span style="color: #ff0000;"> width</span>:<span style="color: #0000ff;"> 100%</span>;<span style="color: #ff0000;"> height</span>:<span style="color: #0000ff;"> 100%</span>;<span style="color: #ff0000;"> background-color</span>:<span style="color: #0000ff;"> black</span>;<span style="color: #ff0000;"> z-index</span>:<span style="color: #0000ff;">1001</span>;<span style="color: #ff0000;">-moz-opacity</span>:<span style="color: #0000ff;">0.7</span>;<span style="color: #ff0000;">-khtml-opacity</span>:<span style="color: #0000ff;"> 0.7</span>;<span style="color: #ff0000;">opacity</span>:<span style="color: #0000ff;">.70</span>;<span style="color: #ff0000;"> filter</span>:<span style="color: #0000ff;"> alpha(opacity=70)</span>;}
<span style="color: #008080;">3</span> <span style="color: #800000;">　　#div-input</span>{<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;"> none</span>;<span style="color: #ff0000;"> position</span>:<span style="color: #0000ff;"> absolute</span>;<span style="color: #ff0000;"> top</span>:<span style="color: #0000ff;"> 25%</span>;<span style="color: #ff0000;"> left</span>:<span style="color: #0000ff;"> 22%</span>;<span style="color: #ff0000;"> width</span>:<span style="color: #0000ff;"> 53%</span>;<span style="color: #ff0000;"> height</span>:<span style="color: #0000ff;"> 49%</span>;<span style="color: #ff0000;"> padding</span>:<span style="color: #0000ff;"> 8px</span>;<span style="color: #ff0000;"> border</span>:<span style="color: #0000ff;"> 8px solid #E8E9F7</span>;<span style="color: #ff0000;"> background-color</span>:<span style="color: #0000ff;"> white</span>;<span style="color: #ff0000;"> z-index</span>:<span style="color: #0000ff;">1002</span>;<span style="color: #ff0000;"> overflow</span>:<span style="color: #0000ff;"> auto</span>;}
<span style="color: #008080;">4</span> <span style="color: #800000;">&lt;/style&gt;</span></pre>
</div>
<p>　　　　(3)最后在js中写如下代码添加按钮的回调函数，控制div的显示和隐藏：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> &lt;script language="javascript" type="text/javascript"&gt;
<span style="color: #008080;"> 2</span> 　　<span style="color: #0000ff;">function</span><span style="color: #000000;"> showdiv() { 
</span><span style="color: #008080;"> 3</span> 　　　　document.getElementById("checkinput_bg").style.display ="block"<span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span> 　　　　document.getElementById("div-input").style.display ="block"<span style="color: #000000;">;
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">　　}
</span><span style="color: #008080;"> 6</span> 　　<span style="color: #0000ff;">function</span><span style="color: #000000;"> hidediv() {
</span><span style="color: #008080;"> 7</span> 　　　　document.getElementById("checkinput_bg").style.display ='none'<span style="color: #000000;">;
</span><span style="color: #008080;"> 8</span> 　　　　document.getElementById("div-input").style.display ='none'<span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">　　}
</span><span style="color: #008080;">10</span> &lt;/script&gt;</pre>
</div>
<p>　　3、 SQLServer [sikəu 'sə:və]</p>
<p>　　4、 mysql改变某一列的结构和属性：alter table senguocc.order change fruits fruits varchar(2000) default NULL;<br />　　　　改变某一列的值：update student set name="jyj" where id = 001;</p>
<p>　　5、 bug:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> File <span style="color: #800000;">"</span><span style="color: #800000;">/home/senguo/KuaiPan/Senguo/gitwork/senguo.cc/admin/handlers/admin.py</span><span style="color: #800000;">"</span>, line 495, <span style="color: #0000ff;">in</span><span style="color: #000000;"> post
</span><span style="color: #008080;"> 2</span> fruit_id = self.session.query(models.Fruit.id).join(models.ChargeType).filter(models.ChargeType.id ==<span style="color: #000000;"> int(key)).all()[0][0]
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">IndexError: list index out of range
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> File <span style="color: #800000;">"</span><span style="color: #800000;">/home/senguo/KuaiPan/Senguo/gitwork/senguo.cc/admin/handlers/admin.py</span><span style="color: #800000;">"</span>, line 608, <span style="color: #0000ff;">in</span><span style="color: #000000;"> post
</span><span style="color: #008080;"> 6</span> fruit_id = self.session.query(models.Fruit.id).join(models.ChargeType).filter(models.ChargeType.id ==<span style="color: #000000;"> int(key)).all()[0][0]
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">IndexError: list index out of range
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> File <span style="color: #800000;">"</span><span style="color: #800000;">/home/senguo/KuaiPan/Senguo/gitwork/senguo.cc/admin/handlers/admin.py</span><span style="color: #800000;">"</span>, line 717, <span style="color: #0000ff;">in</span><span style="color: #000000;"> post
</span><span style="color: #008080;">10</span> fruit_id = self.session.query(models.Fruit.id).join(models.ChargeType).filter(models.ChargeType.id ==<span style="color: #000000;"> int(key)).all()[0][0]
</span><span style="color: #008080;">11</span> IndexError: list index out of range</pre>
</div>
<p>　　　　问题所在：没有对自定义商品进行处理的问题。</p>
<p>　　6、 严重问题：现在从订单的fruits字段查询店铺的销售情况，在数据量较大的时候这样的方式查询效率非常低，用户体验非常差。<br />&nbsp;　　&nbsp;　 解决方案：<br />　　　　(1)千方百计优化目前算法。<br />　　　　(2)在数据库中为每一个店铺新建一张销售情况表，该表保存了该店铺每一笔订单的每种商品的销售情况。从而在查询销售情况的时候可以直接从这个 &nbsp;　　　　 &nbsp; 表中查询，大大提高查询效率。<br />　　　　(3)在order表中新增加销售情况字段，每次在订单完成后就往该字段中加入这个订单中每种商品的如下信息，：(商品类目id1:{{商品id1:销售额,商品id2: &nbsp; &nbsp;　　　　 &nbsp;&nbsp;销售额,...},该类目销售额},商品类目id2:{{商品id1:销售额,商品id2:销售额,...},该类目销售额},...)　　(存为字符串格式)</p>
<p>　　7、 admin-sell-count添加新功能：点击一个按钮的时候会出来图表的全屏浏览大图(需要遮罩层技术)。<br />　　　　问题：把图表放在遮罩层中，显示不出来图表线条。</p>
<p>　　8、 admin-sell-count在店铺还没有商品的情况下会出错。</p>
<p>　　9、 第三个表要加上图例</p>
<p>　　10、 第一个表的tooltip要加上每种类目包含的商品名称<br />　　　　解决方案：从后台返回每一种类目包含的商品名称，把包含的所有商品连成一个字符串，然后把所有类目的数据以字符串数组的形式返回给前台．前 &nbsp; 　　　　　　　　　台把数据加入到series[1]的data数组中，然后tooltip的formatter函数读取该数组内容并显示出来：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> options.tooltip.formatter = 
<span style="color: #008080;"> 2</span> 　　<span style="color: #0000ff;">function</span><span style="color: #000000;">(params,ticket,callback){
</span><span style="color: #008080;"> 3</span> 　　　　<span style="color: #0000ff;">var</span> res = "单类目销售情况&lt;br/&gt;" + params[0].name + "："<span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span> 　　　　res += params[0].data + "&lt;br/&gt;"<span style="color: #000000;">;
</span><span style="color: #008080;"> 5</span> 　　　　res += "包含商品：" + params[1<span style="color: #000000;">].data;
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> 　　　　setTimeout(<span style="color: #0000ff;">function</span><span style="color: #000000;"> (){
</span><span style="color: #008080;"> 8</span> 　　　　　　<span style="color: #008000;">//</span><span style="color: #008000;"> 仅为了模拟异步回调</span>
<span style="color: #008080;"> 9</span> <span style="color: #000000;">　　　　　　callback(ticket, res);
</span><span style="color: #008080;">10</span> 　　　　}, 0<span style="color: #000000;">)
</span><span style="color: #008080;">11</span> 　　};</pre>
</div>
<p>　　11、 今日备份：快盘，github.&nbsp;<strong>&nbsp;</strong></p>
<p><strong>[7.23 周四]</strong></p>
<p><strong>　　</strong>1、 今日任务：深度优化销售统计算法。</p>
<p>　　2、 echarts的tooltip的formatter（内容格式器）属性中可以加入函数。<br />　　　　用法举例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> formatter:<span style="color: #0000ff;">function</span><span style="color: #000000;"> (params,ticket,callback){
</span><span style="color: #008080;"> 2</span> 　　<span style="color: #0000ff;">var</span> res = "单类目销售情况&lt;br/&gt;" + params[0].name + "："<span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> 　　res += params[0<span style="color: #000000;">].data;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> 　　setTimeout(<span style="color: #0000ff;">function</span><span style="color: #000000;"> (){
</span><span style="color: #008080;"> 6</span> 　　　　<span style="color: #008000;">//</span><span style="color: #008000;"> 仅为了模拟异步回调</span>
<span style="color: #008080;"> 7</span> <span style="color: #000000;">　　　　callback(ticket, res);
</span><span style="color: #008080;"> 8</span> 　　}, 0<span style="color: #000000;">)
</span><span style="color: #008080;"> 9</span> 　　<span style="color: #008000;">//</span><span style="color: #008000;"> return 'loading';</span>
<span style="color: #008080;">10</span> <span style="color: #000000;">}
</span><span style="color: #008080;">11</span> <span style="color: #008000;">//</span><span style="color: #008000;">注：其中每个params[i]对应一个series中的object</span></pre>
</div>
<p>　　3、 js取字符串的子串：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> str = str.substr(start,lenth)</pre>
</div>
<p>　　4、 Echarts legend覆盖图表问题:<br />　　　　echarts的legend选项值过多的时候会覆盖到下面的图表，这个问题最后这样解决：<br />　　　　在循环中控制给legend的data赋值的个数，当超过这个个数的时候，就给data赋值空字符串即可．</p>
<p>　　5、 店铺后台销售统计bug:当店铺还没有商品的时候前台和后台都报错．<br />　　　　解决方法：js第一次发post请求，后台先查询该店铺的商品列表是不是为空，如果为空就直接返回前台一个标记，前台在后面的所有post请求都没必要 　　　　　　　　　发了，直接在页面显示该店铺没有商品即可．</p>
<p>　　6、 现在m_goods及相关的几张表都弃用了，所有商品都存到了fruits表中．之前order表有一个fruits字段和一个mgoods字段，现在mgoods字段也弃用了， 　　　　只用fruits字段．</p>
<p>　　7、 dbinitdata.py文件中有所有水果的信息．</p>
<p>　　8、 问题：echarts放在新的图层上，新图层初始化为hidden，为一个按钮绑定点击事件，点击的时候显示这个图层，但点击按钮后发现只能显示坐标轴， 　　　　数据并不难显示出来．<br />　　　　解决方法：把新图层div初始化隐藏的方式改为：.invisiable{visibility: hidden;}即可．</p>
<p>　　9、 居中问题：<br />　　　　div居中：<br />　　　　　　margin: 0 auto;<br />　　　　text居中：<br />　　　　　　text-align:center;</p>
<p>　　10、 销售统计添加遮罩层显示大图功能成功！剩下的就是各种性能优化，以及对于用户自定义商品的错误处理的修正．</p>
<p>　　11、 把除水果和干果以外的＂其他＂商品都当做＂其他＂处理．</p>
<p>　　12、 在js中代码任意处加"debugger;"，则可以进行断点调试，而且调试的时候变量的值也会自动显示处理，这个很厉害．</p>
<p>　　13、 chrome浏览器模拟手机：打开小手机的图标，然后在上方的UA栏中输入MicroMessenger即可．</p>
<p>　　14、 新任务：店铺后台的统计项目（前30）<br />　　　　　　　　统计同种类目的销售额前十名店铺</p>
<p><strong>　　</strong>15、 今日备份：快盘，github.　　</p>
<p><strong>[7.24 周五]</strong><br />　　1、 今日任务：<br />　　　　优化店铺后台的销售统计<br />　　　　总后台的销售统计<br />　　2、 python计算一段程序的执行时间：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #008080;">2</span> start =<span style="color: #000000;"> time.clock()
</span><span style="color: #008080;">3</span> <span style="color: #008000;">#</span><span style="color: #008000;">这里是要测试的代码段</span>
<span style="color: #008080;">4</span> <span style="color: #000000;">...
</span><span style="color: #008080;">5</span> end =<span style="color: #000000;"> time.clock()
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">print</span>(<span style="color: #800000;">"</span><span style="color: #800000;">所用时间为：</span><span style="color: #800000;">"</span>,end-start,<span style="color: #800000;">"</span><span style="color: #800000;">秒</span><span style="color: #800000;">"</span><span style="color: #000000;">)
</span><span style="color: #008080;">7</span> <span style="color: #008000;">#</span><span style="color: #008000;">注：时间单位为秒，可以转化为毫秒（python的时间戳单位也是毫秒）：</span>
<span style="color: #008080;">8</span> <span style="color: #0000ff;">print</span>((<span style="color: #800000;">"</span><span style="color: #800000;">所用时间为：%.3fms</span><span style="color: #800000;">"</span>) % ((end - start)/1000))</pre>
</div>
<p>　　3、 经过断点测试每一段代码的执行时间，发现店铺后台销售统计的程序执行时间主要花在了处理订单中的fruits字段并将fruits字段的数据转化成单种商品的销售额这一块了，数据量稍大的时候这一部分的执行时间占了总执行时间的90%以上，所以主要在这里进行性能优化．<br />　　　　优化方案:<br />　　　　(1)经过分析发现,消耗时间较多的代码段主要是在两个方面消耗时间:<br />　　　　　　多重循环和多重循环中的数据库查询操作.<br />　　　　　　因此考虑将每次循环中相同或重复的数据库查询操作在循环开始之前就查好并把结果存在列表里面,等到要查的时候直接在列表中找,这样可以大大优化效率.<br />　　　　　　主要的可优化查询操作有:<br />　　　　　　①select id from charge_type where fruit_id in (select id from fruit where shop_id = self.current_shop.id); ---&gt;查询当前店铺的所有商品的计价方式的id,并存放在列表中:shop_charge_type_id_list<br />　　　　　　②然后建立一个字典,该字典的键表示该店铺的所有计价方式id,值表示每种计价方式id对应的fruit_id<br />select fruit_id from charge_type where id in (select id from charge_type where fruit_id in (select id from fruit where shop_id = 4));<br />　　　　　　　　即:select fruit_id from charge_type where id in (select id from charge_type where fruit_id in shop_charge_type_id_list;<br />　　　　　　③再遍历上一步的字典的每个fruit_id,根据fruit_id从数据库中查出对应的所有的fruit_name,并添加到fruit_id的后面,与fruit_id构成一个子字典.<br />　　　　　　④每次在循环中的查询都可以优化为判断每个order表的fruits字段的计价方式是否在(3)中字典的键列表中,如果在则再查对应的fruit_id和fruit_name,这样可以初步大大提高效率.<br />　　　　　　⑤对于之前order表的mgoods字段的商品,这样处理:<br />　　　　　　　　先根据menu表和m_goods表的联合查询,查询当前店铺所有的自定义商品的id和name,并保存到:shop_mgoods_list表中:<br />　　　　　　　　　　select m_goods.id,m_goods.name from m_goods,menu where m_goods.menu_id = menu.id and menu.shop_id = self.current_shop.id;<br />　　　　　　　　然后遍历shop_mgoods_list表,查询m_charge_type表中所有和shop_mgoods_list表中m_goods_id相同的计价方式id,并存在一个表中:shop_mgoods_ charge_type;<br />　　　　　　⑥最后建立一个字典列表,每个字典以上述第二步的计价方式id为键,以mgoods_id和mgoods_name组成的列表为值.<br />　　　　　　　　每次在循环中的查询都可以优化为判断每个order表的mgoods字段的计价方式在上面字典中对应的mgoods_id和mgoods_name,这样也可以初步大大提高效率.</p>
<p>　　4、 python中合并两个字典的方法(假设a,b是两个字典):<br />　　　　方法1:c = dict(a,**b)<br />　　　　方法2:c = a.copy()<br />　　　　　　　c.update(b)<br />　　　　从效率上来讲方法2的效率更高.</p>
<p>　　5、 python获取字典的键列表(假设d为一个字典):<br />　　　　　　key_list = list(d.keys())<br />　　　　获取字典的值的列表:<br />　　　　　　value_list = list(d.values())<br />　　　　获取字典的键和值组成的元组的列表:<br />　　　　　　item_list = list(d.items())</p>
<p>　　6、 python以下代码并不会改变列表a:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> a = [1,2,3,4,5<span style="color: #000000;">]
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">for</span> e <span style="color: #0000ff;">in</span><span style="color: #000000;"> a:
</span><span style="color: #008080;">3</span>     e = e+1</pre>
</div>
<p>　　　　注：但用sqlalchemy对数据库进行查询并且做修改的时候，这种方法是能改变原来列表的。这一点要特别注意。</p>
<p>　　7、 店铺后台销售统计前两个表的左边距太小.</p>
<p>　　8、 今日数据备份：快盘，github.</p>
<p><strong>[7.25 周六]</strong></p>
<p>　　1、 今日任务:整个森果系统的余额错误对账<br />　　2、 昨天陈明遇到一个问题:在数据库中加表以后,推到线上测试的时候因为数据库的编码问题导致线上git分支不能用了,解决方法是:<br />　　　　在admin.py顶部加入:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> codecs 
</span><span style="color: #008080;">2</span> codecs.register(<span style="color: #0000ff;">lambda</span> name: codecs.lookup(&lsquo;utf8&rsquo;) <span style="color: #0000ff;">if</span> name == &lsquo;utf8mb4&rsquo; <span style="color: #0000ff;">else</span> None)</pre>
</div>
<p>　　3、 上午完成了店铺后台的销售统计的优化,大大提高了查询速度,将原来数据量大的时候的5秒左右的执行时间优化到了300ms左右,提高了用户体验.<br />　　　　还有一个问题:每个销售统计图的后台重复代码略多,可以考虑进行合并和封装.</p>
<p>　　4、 今日任务数据库分析：<br />　　　　(1)shop表：<br />　　　　　　*shop_balance字段：当前店铺的余额<br />　　　　　　*available_balance：该店铺当前的可提现余额<br />　　　　　　*正确的情况下：同一时刻available_balance &lt;= shop_balance<br />　　　　　　*mysql&gt; select id from shop where shop_code = 'czneau';<br />　　　　　　+----+<br />　　　　　　| id |<br />　　　　　　+----+<br />　　　　　　| 4 |<br />　　　　　　+----+</p>
<p>　　　　　　注：&ldquo;吃在东农&rdquo;店铺的数据量比较大，为了数据统计的方便性，以该店铺为例.</p>
<p>　　　　(2)order表：<br />　　　　　　*pay_type = Column(TINYINT, default=1)#付款方式：1：货到付款，2：余额 3:在线支付<br />　　　　(3)balancehistory表：<br />　　　　　　*balance_type = Column(Integer,default = 1) # 0:代表充值 ，1:余额消费 2:提现 3:在线支付 4:商家删除订单 5:用户自己取消订单 6:余额消费完成 ，可提现额度的变化<br />　　　　　　*这个表是从2015-5-3开始有记录的。<br />　　　　(4)customer_shop_follow表：<br />　　　　　　*shop_balance:该用户在该店铺存的余额</p>
<p>　　5、 python中保留小数位数的两种方法:<br />　　　　　　round(1.2222,2),结果为1.22,类型为float<br />　　　　　　format(1.2222,".2f"),结果为'1.22',类型为str</p>
<p>　　6、 当然果园:id = 1163;果缤纷:id = 1080</p>
<p>　　7、 sqlalchemy的几种查询结果的形式总结:<br />　　　　(1)self.session.query(models.Shop).filter(...).count()<br />　　　　　　查询结果是一个整数,表示满足条件的结果的条数.<br />　　　　(2)self.session.query(models.Shop).filter(...).all()<br />　　　　　　查询结果是一个list,每一个元素都是&lt;class 'dal.models.Shop'&gt;类型的对象.如果查询结果为空,则返回一个空的list.<br />　　　　(3)self.session.query(models.Shop).filter(...).first()<br />　　　　　　查询结果是一个&lt;class 'dal.models.Shop'&gt;类型的对象.如果查询结果为空,则返回一个&lt;class 'NoneType'&gt;类型的对象.<br />　　　　(4)self.session.query(models.Shop.id,models.Shop.shop_name,...).filter(...).all()<br />　　　　　　查询结果是一个list,每一个元素都是一个元组,该元组包含了id,shop_name,...这些信息.如果查询结果为空,则返回一个空的列表.<br />　　　　(5)self.session.query(models.Shop.id,models.Shop.shop_name,...).filter(...).first()<br />　　　　　　查询结果是一个元组,类型为&lt;class 'sqlalchemy.util._collections.result'&gt;,该元组包含了id,shop_name,...这些信息.如果查询结果为空,则返回一个None.<br />　　　　(6)self.session.query(models.Shop).filter(...)<br />　　　　　　查询结果是一个&lt;class 'sqlalchemy.orm.query.Query'&gt;类型的数据,具体内容是一个mysql查询语句,类似于这样:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">SELECT</span> shop.id <span style="color: #0000ff;">AS</span><span style="color: #000000;"> shop_id 
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">FROM</span><span style="color: #000000;"> shop 
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">WHERE</span> shop.shop_status <span style="color: #808080;">=</span> <span style="color: #808080;">%</span>(shop_status_1)s</pre>
</div>
<p>　　8、 数据查询：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> 　　　　<span style="color: #0000ff;">select</span> shop.shop_name,balancehistory.create_time,shop.shop_balance,shop.available_balance,balance_record,balancehistory.balance_value, balancehistory.available_balance,balance_type <span style="color: #0000ff;">from</span> balancehistory,shop <span style="color: #0000ff;">where</span> shop.id <span style="color: #808080;">=</span> balancehistory.shop_id <span style="color: #808080;">and</span> shop.id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span> <span style="color: #0000ff;">order</span>  <span style="color: #0000ff;">by</span><span style="color: #000000;"> balancehistory.create_time;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> 　　　　<span style="color: #0000ff;">select</span> senguocc.<span style="color: #0000ff;">order</span>.id,senguocc.<span style="color: #0000ff;">order</span>.shop_id,senguocc.<span style="color: #0000ff;">order</span>.create_date,senguocc.<span style="color: #0000ff;">order</span>.totalPrice,senguocc.<span style="color: #0000ff;">order</span>.pay_type <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">235</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> 　　　　<span style="color: #0000ff;">select</span> create_time,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1163</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 6</span> 　　　　<span style="color: #0000ff;">select</span> create_time,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> create_time;
</span><span style="color: #008080;"> 7</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">0</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;"> 8</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;"> 9</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">10</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">11</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">12</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">13</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">6</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">14</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">7</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> 　　　　<span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">in</span> (<span style="color: #800000; font-weight: bold;">4</span>,<span style="color: #800000; font-weight: bold;">5</span>) <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span> 　　　　<span style="color: #0000ff;">select</span> senguocc.<span style="color: #0000ff;">order</span>.create_date,senguocc.<span style="color: #0000ff;">order</span>.pay_type,senguocc.<span style="color: #0000ff;">order</span>.num,senguocc.<span style="color: #0000ff;">order</span>.totalPrice,senguocc.<span style="color: #0000ff;">order</span>.today, senguocc.<span style="color: #0000ff;">order</span>.arrival_time <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> senguocc.<span style="color: #0000ff;">order</span>.shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">and</span> senguocc.<span style="color: #0000ff;">order</span>.status <span style="color: #808080;">&gt;=</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">and</span>  date_format(senguocc.<span style="color: #0000ff;">order</span>.create_date,"<span style="color: #808080;">%</span>Y<span style="color: #808080;">-%</span>m<span style="color: #808080;">-%</span>d")<span style="color: #808080;">&gt;</span>"<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">05</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">02</span>" <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.create_date;
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span> 　　　　<span style="color: #0000ff;">select</span> senguocc.<span style="color: #0000ff;">order</span>.create_date,senguocc.<span style="color: #0000ff;">order</span>.pay_type,senguocc.<span style="color: #0000ff;">order</span>.num,senguocc.<span style="color: #0000ff;">order</span>.totalPrice,senguocc.<span style="color: #0000ff;">order</span>.today, senguocc.<span style="color: #0000ff;">order</span>.arrival_time <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> senguocc.<span style="color: #0000ff;">order</span>.shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">and</span> senguocc.<span style="color: #0000ff;">order</span>.status <span style="color: #808080;">&gt;=</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">and</span> 
<span style="color: #008080;">23</span>  date_format(senguocc.<span style="color: #0000ff;">order</span>.create_date,"<span style="color: #808080;">%</span>Y<span style="color: #808080;">-%</span>m<span style="color: #808080;">-%</span>d")<span style="color: #808080;">&gt;</span>"<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">05</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">02</span>" <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.create_date;
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span> 　　　　<span style="color: #0000ff;">select</span> senguocc.<span style="color: #0000ff;">order</span>.create_date,senguocc.<span style="color: #0000ff;">order</span>.pay_type,senguocc.<span style="color: #0000ff;">order</span>.num,senguocc.<span style="color: #0000ff;">order</span>.totalPrice,senguocc.<span style="color: #0000ff;">order</span>.today, senguocc.<span style="color: #0000ff;">order</span>.arrival_time <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> senguocc.<span style="color: #0000ff;">order</span>.shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">and</span> senguocc.<span style="color: #0000ff;">order</span>.status <span style="color: #808080;">&gt;=</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">and</span> 
<span style="color: #008080;">26</span>  senguocc.<span style="color: #0000ff;">order</span>.pay_type <span style="color: #808080;">in</span> (<span style="color: #800000; font-weight: bold;">2</span>,<span style="color: #800000; font-weight: bold;">3</span>) <span style="color: #808080;">and</span> date_format(senguocc.<span style="color: #0000ff;">order</span>.create_date,"<span style="color: #808080;">%</span>Y<span style="color: #808080;">-%</span>m<span style="color: #808080;">-%</span>d")<span style="color: #808080;">&gt;</span>"<span style="color: #800000; font-weight: bold;">2015</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">05</span><span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">02</span>" <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> senguocc.<span style="color: #0000ff;">order</span><span style="color: #000000;">.create_date;
</span><span style="color: #008080;">27</span> 
<span style="color: #008080;">28</span> 　　　　<span style="color: #0000ff;">select</span> create_time,balance_record <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">in</span> (<span style="color: #800000; font-weight: bold;">1</span>,<span style="color: #800000; font-weight: bold;">3</span>) <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> create_time;</pre>
</div>
<p>&nbsp;</p>
<p>　　9、 order表pay_type每个值表示的意思:<br />　　　　1：货到付款，2：余额 3:在线支付</p>
<p>　　10、 店铺shop_totalPrice分析:<br />　　　　balance_type的每个值表示的意思:<br />　　　　[tee /home/senguo/log.txt]（这个语句用于将mysql的输出结果存储到一个文本文档里，在数据量较大的时候方便分析）<br />　　　　0:用户充值;1:余额消费;2:商家提现;3:在线支付(未完成);4:商家删除订单;5:用户自己取消订单;6:余额消费完成;7:在线支付完成<br />　　　　(1)shop表的shop_balance的值和balancehistory表的该店铺对应的按时间升序排序的记录的最后一条记录的shop_totalPrice的值应该是一致的.<br />　　　　(2)对于一个特定的shop_id,balancehistory表的该店铺对应的按时间升序排序的记录中,当balance_type in [0,1,3]时,应该有:shop_totalPrice = shop_totalPrice' + balance_value,其中shop_totalPrice表示当前记录中的shop_totalPrice,shop_totalPrice'表示离当前最近的一次的相同的操作记录的shop_totalPrice.同时available_balance不应该发生变化.<br />　　　　(3)对于一个特定的shop_id,balancehistory表的该店铺对应的按时间升序排序的lx记录中,当balance_type = 2时,应该有:shop_totalPrice = shop_totalPrice' - balance_value同时available_balance = available_balance' - balance_value,其中shop_totalPrice表示当前记录中的shop_totalPrice,shop_totalPrice'表示离当前最近的一次的操作记录的shop_totalPrice.available_balance表示当前记录中的shop_totalPrice,available_balance'表示离当前最近的一次的提现或者可提现额度入账的操作记录(balance_type in [2,6,7])的available_balance.&nbsp; <br />　　　　(4)对于一个特定的shop_id,balancehistory表的该店铺对应的按时间升序排序的记录中,当balance_type in [4,5]时,应该有:shop_totalPrice = shop_totalPrice' - balance_value,其中shop_totalPrice表示当前记录中的shop_totalPrice,shop_totalPrice'表示离当前最近的一次的balance_type in [0,1,3]的操作记录的shop_totalPrice.同时available_balance不应该发生变化.</p>
<p>　　11、 店铺available_balance分析:<br />　　　　(1)对于一个特定的shop_id,balancehistory表的该店铺对应的按时间升序排序的记录中,当balance_type in [6,7]时,available_balance = available_balance' + balance_value,其中available_balance表示当前记录中的shop_totalPrice,available_balance'表示离当前最近的一次的相同的操作记录的available_balance.同时shop_totalPrice不应该发生变化. <br />　　　　(2)对于一个特定的shop_id,balancehistory表的该店铺对应的按时间升序排序的记录中,当balance_type = 2时,应该有:shop_totalPrice = shop_totalPrice' - balance_value同时available_balance = available_balance' - balance_value,其中shop_totalPrice表示当前记录中的shop_totalPrice,shop_totalPrice'表示离当前最近的一次的操作记录的shop_totalPrice.available_balance表示当前记录中的shop_totalPrice,available_balance'表示离当前最近的一次的提现或者可提现额度入账的操作记录(balance_type in [2,6,7])的available_balance. </p>
<p>　　12、 balance_type分析:<br />　　　　(1)能导致shop_totalPrice增大的balance_type有:[0,1,3];能导致shop_totalPrice减小的balance_type有:[2,4,5];shop_totalPrice不变的balance_type有:[6,7]<br />　　　　(2)能导致available_balance增大的balance_type有:[6,7];能导致available_balance减小的balance_type有:[2];available_balance不变的balance_type有:[0,1,3,4,5].</p>
<p>　　13、 总额分析:<br />　　　　(1)对于某一个店铺的balancehistory,在按照时间升序排列的记录中,所有balance_type in [6,7]的记录的balance_value加起来并减去所有balance_type=2的记录的balance_value,结果应该等于店铺当前最新的available_balance. <br />　　　　(2)同一时刻应该有available_balance &lt;= shop_balanc<br />　　　　(3)因为有些订单因为并发等原因并没有记录到balancehistory表中,所以对账的时候要以order表为依据.</p>
<p>　　14、 发现的问题整理:<br />　　　　(1)shop_id = 1163<br />+---------------------+--------------+------------------------------------------------+---------------+-----------------+-------------------+<br />| create_time | balance_type | balance_record | balance_value | shop_totalPrice | available_balance |<br />+---------------------+--------------+------------------------------------------------+---------------+-----------------+-------------------+<br />| 2015-06-05 16:31:45 | 7 | 可提现额度入账：订单1163000001完成 | 2.5 | 2.5 | 2.5 |<br />| 2015-06-05 16:32:31 | 3 | 在线支付(支付宝)：订单1163000002 | 6.5 | 9 | 0 |<br />　　　　</p>
<p>　　　　(2)shop_id = 1163<br />| 2015-06-07 13:49:57 | 3 | 在线支付(微信)：订单1163000132 | 6.5 | 1051.6 | 0 |<br />| 2015-06-07 14:00:51 | 7 | 可提现额度入账：订单1163000118完成 | 9 | 1051.6 | 11.5 |</p>
<p><br />　　　　(3)shop_id = 1163<br />| 2015-06-07 14:05:24 | 7 | 可提现额度入账：订单1163000084完成 | 7.5 | 1051.6 | 993.1 |<br />| 2015-06-07 14:11:53 | 3 | 在线支付(支付宝)：订单1163000134 | 14 | 1065.6 | 0 |</p>
<p><br />　　　　(4)<br />| 2015-06-07 14:05:24 | 7 | 可提现额度入账：订单1163000084完成 | 7.5 | 1051.6 | 993.1 |<br />| 2015-06-07 14:11:53 | 3 | 在线支付(支付宝)：订单1163000134 | 14 | 1065.6 | 0 |</p>
<p><br />　　　　(5)<br />| 2015-06-07 18:55:21 | 3 | 在线支付(支付宝)：订单1163000158 | 14.3 | 1333.5 | 0 |<br />| 2015-06-07 19:04:28 | 7 | 可提现额度入账：订单1163000153完成 | 20.3 | 1333.5 | 1013.4 |</p>
<p><br />　　　　(6)<br />| 2015-06-08 09:45:36 | 3 | 在线支付(支付宝)：订单1163000255 | 2.5 | 2254.7 | 0 |<br />| 2015-06-08 09:46:04 | 2 | 提现：管理员 欧先森&bull;当然果园 | 1350 | 904.7 | 29.9 |<br />| 2015-06-08 09:46:57 | 3 | 在线支付(微信)：订单1163000259 | 16 | 920.7 | 0 |</p>
<p><br />　　　　(7)<br />| 2015-06-08 19:31:59 | 3 | 在线支付(微信)：订单1163000451 | 6 | 2594.6 | 0 |<br />| 2015-06-08 19:34:01 | 7 | 可提现额度入账：订单1163000331完成 | 3 | 2594.6 | 32.9 |</p>
<p><br />　　　　(8)<br />| 2015-06-09 10:58:55 | 3 | 在线支付(支付宝)：订单1163000597 | 13.8 | 3966.4 | 0 |<br />| 2015-06-09 10:59:23 | 2 | 提现：管理员 欧先森&bull;当然果园 | 2600 | 1366.4 | 64.9 |<br />| 2015-06-09 11:03:34 | 3 | 在线支付(微信)：订单1163000599 lx | 15 | 1381.4 | 0 |</p>
<p><br />　　　　(9)<br />| 2015-06-09 22:08:48 | 3 | 在线支付(微信)：订单1163000719 | 5.8 | 2531.1 | 0 |<br />| 2015-06-09 22:32:53 | 2 | 提现：管理员 欧先森&bull;当然果园 | 2400 | 131.1 | 64.1 |<br />| 2015-06-09 22:36:34 | 3 | 在线支付(支付宝)：订单1163000720 | 13.3 | 144.4 | 0 |<br />　　　　注：以上问题是因为在生成记录的时候根本就没有记录当前操作不会改变的项的值,只要保证离当前最近的一次的相同的操作的该项的值正确就可以.这一点不会造成数据错误.</p>
<p>　　15、 订单号组成:前若干位是店铺id,后6位是该店铺的订单的累计个数.</p>
<p>　　16、 在以下c语言代码段中只能修改或增加或删除一个字符,使得输出结果是20个'-',给出三种方法（今天陈明不知道从哪找的一个题）<br />　　　　代码段:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> #include &lt;stdio.h&gt;
<span style="color: #008080;">2</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> main()
</span><span style="color: #008080;">3</span> <span style="color: #000000;">{
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">int</span> n = <span style="color: #800080;">20</span><span style="color: #000000;">;
</span><span style="color: #008080;">5</span>     <span style="color: #0000ff;">int</span><span style="color: #000000;"> i;
</span><span style="color: #008080;">6</span>     <span style="color: #0000ff;">for</span>(i = <span style="color: #800080;">0</span>; i &lt; n;i--<span style="color: #000000;">){
</span><span style="color: #008080;">7</span>         printf(<span style="color: #800000;">"</span><span style="color: #800000;">-</span><span style="color: #800000;">"</span><span style="color: #000000;">);    
</span><span style="color: #008080;">8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">9</span> }    </pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">//</span><span style="color: #008000;">方法1:</span>
<span style="color: #008080;"> 2</span> #include &lt;stdio.h&gt;
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> main()
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">int</span> n = <span style="color: #800080;">20</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">int</span><span style="color: #000000;"> i;
</span><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">for</span>(i = <span style="color: #800080;">0</span>; i + n;i--<span style="color: #000000;">){
</span><span style="color: #008080;"> 8</span>         printf(<span style="color: #800000;">"</span><span style="color: #800000;">-</span><span style="color: #800000;">"</span><span style="color: #000000;">);    
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> <span style="color: #000000;">}
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #008000;">//</span><span style="color: #008000;">方法2:</span>
<span style="color: #008080;">13</span> #include &lt;stdio.h&gt;
<span style="color: #008080;">14</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> main()
</span><span style="color: #008080;">15</span> <span style="color: #000000;">{
</span><span style="color: #008080;">16</span>     <span style="color: #0000ff;">int</span> n = <span style="color: #800080;">20</span><span style="color: #000000;">;
</span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">int</span><span style="color: #000000;"> i;
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">for</span>(i = <span style="color: #800080;">0</span>; i &lt; n;n--<span style="color: #000000;">){
</span><span style="color: #008080;">19</span>         printf(<span style="color: #800000;">"</span><span style="color: #800000;">-</span><span style="color: #800000;">"</span><span style="color: #000000;">);    
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">21</span> <span style="color: #000000;">}
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #008000;">//</span><span style="color: #008000;">方法3:</span>
<span style="color: #008080;">24</span> #include &lt;stdio.h&gt;
<span style="color: #008080;">25</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> main()
</span><span style="color: #008080;">26</span> <span style="color: #000000;">{
</span><span style="color: #008080;">27</span>     <span style="color: #0000ff;">int</span> n = <span style="color: #800080;">20</span><span style="color: #000000;">;
</span><span style="color: #008080;">28</span>     <span style="color: #0000ff;">int</span><span style="color: #000000;"> i;
</span><span style="color: #008080;">29</span>     <span style="color: #0000ff;">for</span>(i = <span style="color: #800080;">0</span>; -i &lt; n;i--<span style="color: #000000;">){
</span><span style="color: #008080;">30</span>         printf(<span style="color: #800000;">"</span><span style="color: #800000;">-</span><span style="color: #800000;">"</span><span style="color: #000000;">);    
</span><span style="color: #008080;">31</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">32</span> }            </pre>
</div>
<p>　　17、 sqlalchemy查询中,filter和filter_by的区别:<br />　　　　(1)filter:<br />　　　　　　self.session.query(models.Shop.shop_name).filter(models.Shop.id == 888).all()<br />　　　　(2)filter_by:<br />　　　　　　self.session.query(models.Shop.shop_name).filter(id = 888).all()<br />　　　　结论:还是filter_by的写法比较简单,以后如果只判断相等关系都用filter_by.如果判断其他的如不等关系、in关系等，还是要用filter.</p>
<p>　　18、 sqlalchemy如果某一个表类的某一个字段和另外一张表有relationship关系,那么可以直接引用该relationship字段的子字段,比如在order表中有如下shop字段:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Order(MapBase, _CommonApi):
</span><span style="color: #008080;">2</span> <span style="color: #000000;">　　　　　　...
</span><span style="color: #008080;">3</span> 　　　　　　shop = relationship(<span style="color: #800000;">"</span><span style="color: #800000;">Shop</span><span style="color: #800000;">"</span>, uselist=False,join_depth=1<span style="color: #000000;">)
</span><span style="color: #008080;">4</span> 　　　　　　...</pre>
</div>
<p>　　　　那么可以直接这样写:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> shop_order = self.session.query(models.Order).filter_by(shop_id = 4<span style="color: #000000;">).first()
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">print</span>(shop_order.shop.shop_name)</pre>
</div>
<p><span style="line-height: 1.5;">　　　　输出结果是id = 4的店铺的名称.</span></p>
<p>&nbsp;　　19、 今日数据：快盘，github.</p>
<p><strong>[7.27 周一]</strong></p>
<p>　　1、 今日任务:余额错误对账<br />　　2、 提取字符串中第若干位到倒数第三位之间的数字子串:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> str0 = <span style="color: #800000;">"</span><span style="color: #800000;">可提现额度入账：订单1234002379121完成</span><span style="color: #800000;">"</span>
<span style="color: #008080;">2</span> i = -1
<span style="color: #008080;">3</span> <span style="color: #0000ff;">while</span> i &lt;<span style="color: #000000;"> len(str0):
</span><span style="color: #008080;">4</span> i += 1
<span style="color: #008080;">5</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> str0[i].isdigit():
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">break</span>
<span style="color: #008080;">7</span> <span style="color: #0000ff;">print</span>(str0[-(len(str0) - i) : -2])</pre>
</div>
<p>　　　　输出结果:1234002379121</p>
<p>　　3、 查找一下balancehistory表中最早是从什么开始将shop_totalPrice和available_balance分离的(即在balance_record字段中balance_type in (6,7)第一次出现的记录).<br />　　　　select create_time,balance_type,balance_record,balance_value,shop_totalPrice,available_balance from balancehistory where balance_type in (6,7) order by create_time;<br />　　　　查询结果第一条为:<br />+---------------------+--------------+------------------------------------------------+---------------+-----------------+-------------------+<br />| create_time | balance_type | balance_record | balance_value | shop_totalPrice | available_balance |<br />+---------------------+--------------+------------------------------------------------+---------------+-----------------+-------------------+<br />| 2015-05-09 11:35:00 | 6 | 可提现额度入账：订单607000133完成 | 27 | 173 | 109 |</p>
<p>　　　　查询所有用余额支付或在线支付方式的订单的信息:<br />select senguocc.order.create_date,senguocc.order.pay_type,senguocc.order.num,senguocc.order.totalPrice,senguocc.order.today,senguocc.order.arrival_time from senguocc.order where senguocc.order.status &gt;= 5 and senguocc.order.pay_type in (2,3) and date_format(senguocc.order.create_date,"%Y-%m-%d")&gt;"2015-05-02" order by senguocc.order.create_date; <br />　　　　从查询结果中查订单号为的订单信息是:<br />+---------------------+----------+------------+------------+-------+--------------+<br />| create_date | pay_type | num | totalPrice | today | arrival_time |<br />+---------------------+----------+------------+------------+-------+--------------+<br />| 2015-05-08 12:06:55 | 2 | 607000133 | 27 | 1 | 11:35 |</p>
<p>　　4、 查错思路:<br />　　　　*范围一:所有余额支付和在线支付(还未支付完成)的订单<br />　　　　(1)先查询balancehistory表所有balance_type in (1,3)的balance_record字段,按时间升序排列,分离balance_record字段中的订单号,并存到一个list balance_type_1_3中.<br />　　　　(2)然后查询order表中所有pay_type in (2,3)并且status &gt;= 5的shop_id和num字段,按时间升序排列,将每一组shop_id和num字段组成一个子列表,并存到一个list pay_type_2_3中.<br />　　　　(3)循环遍历pay_type_2_3,每次循环查找pay_type_2_3的元素的第二项(订单编号)是否在表balance_type_1_3中,如果不在,输出该元素的第一项和第二项.</p>
<p><br />　　　　*范围二:所有余额支付和在线支付(支付完成)的订单<br />　　　　(1)先查询balancehistory表所有balance_type in (6,7)的balance_record字段,按时间升序排列,分离balance_record字段中的订单号,并存到一个列表listbalance_type_6_7中.&nbsp;<br />　　　　(2)然后查询order表中所有pay_type in (2,3)并且status &gt;= 5的shop_id和num字段,按时间升序排列,将每一组shop_id和num字段组成一个子列表,并存到一个list pay_type_2_3中.<br />　　　　(3)循环遍历pay_type_2_3,每次循环查找pay_type_2_3的元素的第二项(订单编号)是否在表list balance_type_6_7中,如果不在,输出该元素的第一项和第二项.</p>
<p><span style="line-height: 1.5;">　　5、&nbsp;</span>所有订单表中有的余额和在线支付(未完成)记录要插入到balancehistory表中,时间用订单的create_date;<br />　　　　所有订单表中有的余额和在线支付完成的记录要插到balancehistory表中,时间用订单的arrival_day和arrival_time合起来的时间.<br />　　　　注:插入时候balancehistory的id还是按照自动增长的方式,依次排列.</p>
<p>　　<span style="line-height: 1.5;">6、&nbsp;</span><span style="line-height: 1.5;">balancehistory在5.14和5.15两天有八条balance_record异常的记录,要通过时间查询订单号,然后修正过来.</span></p>
<p>　　　　select create_time,id,customer_id,balance_record,balance_value from balancehistory where balance_type in (1,3) order by create_time;<br />　　　　select create_date,num,customer_id,shop_id,arrival_day,arrival_time,totalPrice from senguocc.order where date_format(create_date,"%Y-%m-%d %H") like "2015-05-15 12" and customer_id = 33111;<br />+---------------------+-------+-------------+--------------------------------------------+---------------+<br />| create_time | id | customer_id | balance_record | balance_value |<br />+---------------------+-------+-------------+--------------------------------------------+---------------+<br />| 2015-05-14 23:56:44 | 698 | 1 | 在线支付(微信)：用户 黄铁森 | 0.01 |<br />| 2015-05-15 00:29:07 | 699 | 16435 | 在线支付(微信)：用户 托物言志 | 14 |<br />| 2015-05-15 01:25:44 | 700 | 1854 | 在线支付(微信)：用户 Woody | 4.46 |<br />| 2015-05-15 01:28:44 | 701 | 1 | 在线支付(微信)：用户 黄铁森 | 0.01 |<br />| 2015-05-15 09:01:27 | 719 | 29452 | 在线支付(微信)：用户 美然 | 8.98 |<br />| 2015-05-15 12:29:18 | 728 | 32843 | 在线支付(微信)：用户 96line7 | 13 |<br />| 2015-05-15 12:38:14 | 729 | 10788 | 在线支付(微信)：用户 冯艺 | 22.5 |<br />| 2015-05-15 12:43:06 | 731 | 33111 | 在线支付(微信)：用户 张淑娜。 | 10 |</p>
<p>+---------------------+-----------+-------------+---------+-------------+--------------+------------+<br />| create_date | num | customer_id | shop_id | arrival_day | arrival_time | totalPrice |<br />+---------------------+-----------+-------------+---------+-------------+--------------+------------+<br />| 2015-05-14 23:56:23 | 197000176 | 1 | 197 | NULL | NULL | 0.01 |<br />| 2015-05-15 00:27:36 | 615000311 | 16435 | 615 | 2015-05-15 | 18:59 | 14 |<br />| 2015-05-15 01:24:33 | 271000022 | 1854 | 271 | 2015-05-15 | 11:39 | 4.46 |<br />| 2015-05-15 01:28:24 | 197000177 | 1 | 197 | NULL | NULL | 0.01 |<br />| 2015-05-15 09:00:29 | 624001065 | 29452 | 624 | 2015-05-16 | 22:19 | 8.98 |<br />| 2015-05-15 12:29:06 | 848000584 | 32843 | 848 | 2015-05-15 | 19:01 | 13 |<br />| 2015-05-15 12:37:51 | 624001076 | 10788 | 624 | 2015-05-16 | 22:20 | 22.5 |<br />| 2015-05-15 12:42:41 | 848000585 | 33111 | 848 | 2015-05-15 | 19:02 | 10 |<br />+---------------------+-----------+-------------+---------+-------------+--------------+------------+</p>
<p>　　　　select num from senguocc.order where date_format(create_date,"%Y-%m-%d %H-%M-%S") like "2015-05-14 12:36:00";<br />　　　　问题:因为订单的create_date和balancehistory的create_time字段存在几秒到几分钟的时间延迟,所以通过时间反查订单号的方法行不通.<br />　　　　解决方案:手动修改这八条记录.</p>
<p>　　<span style="line-height: 1.5;">7、&nbsp;</span><span style="line-height: 1.5;">Mysql中如何创建一个表让id自动增长?</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">CREATE</span> <span style="color: #0000ff;">TABLE</span><span style="color: #000000;"> users (
</span><span style="color: #008080;">2</span>     id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">5</span>) <span style="color: #808080;">NOT</span> <span style="color: #0000ff;">null</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;">3</span>     name <span style="color: #0000ff;">varchar</span>(<span style="color: #800000; font-weight: bold;">20</span>)<span style="color: #808080;">NOT</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">PRIMARY</span> <span style="color: #0000ff;">KEY</span><span style="color: #000000;"> (`id`)
</span><span style="color: #008080;">5</span> )</pre>
</div>
<p>　　　　举例:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span> test_autoid (id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span> auto_increment,name <span style="color: #0000ff;">char</span>(<span style="color: #800000; font-weight: bold;">5</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">insert</span> <span style="color: #0000ff;">into</span> test_autoid(name) <span style="color: #0000ff;">values</span>(<span style="color: #ff0000;">'</span><span style="color: #ff0000;">jyj</span><span style="color: #ff0000;">'</span><span style="color: #000000;">);
</span><span style="color: #008080;">3</span> <span style="color: #000000;">...(省略了八条插入)
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> test_autoid;</pre>
</div>
<p>+----+------+<br />| id | name |<br />+----+------+<br />| 1 | jyj |<br />| 2 | aa |<br />| 3 | bb |<br />| 4 | cc |<br />| 5 | d |<br />| 6 | eee |<br />| 7 | ff |<br />| 8 | gg |<br />| 9 | hh |<br />+----+------+</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">delete</span> <span style="color: #0000ff;">from</span> test_autoid <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">3</span><span style="color: #000000;">;
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> test_autoid;</pre>
</div>
<p>+----+------+<br />| id | name |<br />+----+------+<br />| 1 | jyj |<br />| 2 | aa |<br />| 4 | cc |<br />| 5 | d |<br />| 6 | eee |<br />| 7 | ff |<br />| 8 | gg |<br />| 9 | hh |<br />+----+------+</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">insert</span> <span style="color: #0000ff;">into</span> test_autoid(name) <span style="color: #0000ff;">values</span>(<span style="color: #ff0000;">'</span><span style="color: #ff0000;">new</span><span style="color: #ff0000;">'</span><span style="color: #000000;">);
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> test_autoid;</pre>
</div>
<p>+----+------+<br />| id | name |<br />+----+------+<br />| 1 | jyj |<br />| 2 | aa |<br />| 4 | cc |<br />| 5 | d |<br />| 6 | eee |<br />| 7 | ff |<br />| 8 | gg |<br />| 9 | hh |<br />| 10 | new |<br />+----+------+</p>
<p><span style="line-height: 1.5;">　　8、&nbsp;</span>改错步骤:<br />　　　　mysql&gt; select balance_record from balancehistory where balance_type = 3 and (balance_record not like '在线支付(微信)：订单%' and balance_record not like '在线支付(支付宝)：订单%');<br />+--------------------------------------------+<br />| balance_record |<br />+--------------------------------------------+<br />| 在线支付(微信)：用户 黄铁森 |<br />| 在线支付(微信)：用户 托物言志 |<br />| 在线支付(微信)：用户 Woody |<br />| 在线支付(微信)：用户 黄铁森 |<br />| 在线支付(微信)：用户 美然 |<br />| 在线支付(微信)：用户 96line7 |<br />| 在线支付(微信)：用户 冯艺 |<br />| 在线支付(微信)：用户 张淑娜。 |<br />+--------------------------------------------+<br />　　　　select id,create_time,shop_id,balance_type,balance_record,balance_value,customer_id,customer_totalPrice,shop_totalPrice,available_balance, is_cancel from balancehistory where shop_id = 197&nbsp;order by create_time;</p>
<p>　　　　(1)先手动将balancehistory的八条异常记录修正:在线支付(微信)：订单% 在线支付(支付宝)：订单</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单197000176" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">698</span><span style="color: #000000;">;
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单615000311" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">699</span><span style="color: #000000;">;
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单271000022" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">700</span><span style="color: #000000;">;
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单197000177" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">701</span><span style="color: #000000;">; 
</span><span style="color: #008080;">5</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单624001065" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">719</span><span style="color: #000000;">;
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单848000584" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">728</span><span style="color: #000000;">;
</span><span style="color: #008080;">7</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单624001076" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">729</span><span style="color: #000000;">;
</span><span style="color: #008080;">8</span> <span style="color: #0000ff;">update</span> balancehistory <span style="color: #0000ff;">set</span> balance_record<span style="color: #808080;">=</span>"在线支付(微信)：订单848000585" <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">731</span>;</pre>
</div>
<p>　　　　临时记录：'197000176','615000311','271000022','197000177','624001065','848000584','624001076','848000585'<br />698,699,700,701,719,728,729,731</p>
<p>　　　　(2)删除shop_id = 0的记录。<br />　　　　　　delete from balancehistory where shop_id = 0 or id = 19088;<br />　　　　(3)查询balancehistory表所有balance_type in (1,3)的balance_record字段,按时间升序排列,分离balance_record字段中的订单号,并存到一个list balance_type_1_3中:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> balance_type_1_3 =<span style="color: #000000;"> []
</span><span style="color: #008080;">2</span> query_list = self.session.query(models.BalanceHistory.create_time,models.BalanceHistory.balance_record).filter(models.BalanceHistory.balance_type.in_([1,3<span style="color: #000000;">])).all()
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">for</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> query_list:
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(len(item[1<span style="color: #000000;">])):
</span><span style="color: #008080;">5</span>     <span style="color: #0000ff;">if</span> item[1<span style="color: #000000;">][i].isdigit():
</span><span style="color: #008080;">6</span>         <span style="color: #0000ff;">break</span>
<span style="color: #008080;">7</span>     balance_type_1_3.append(item[1][i : len(item[1])])    </pre>
</div>
<p>　　　　(4)查询order表中所有pay_type in (2,3)并且status &gt;= 5的shop_id和num字段,按时间升序排列,将每一组shop_id和num字段组成一个子列表,并存到一个list pay_type_2_3中;</p>
<p>　　　　*注意事项：因为balancehistory中每一条记录与其他记录的店铺余额和可提现余额都是相互关联的，所以为了避免混乱，首先只需把缺少的不包括这两项的记录插到表中，然后再依据其他信息依次推出这两项的值。</p>
<p><br />　　<span style="line-height: 1.5;">9、&nbsp;</span><span style="line-height: 1.5;">python的format的用法:</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt;&gt;&gt;<span style="color: #800000;">"</span><span style="color: #800000;">i am {0} years old,i am now in {1}</span><span style="color: #800000;">"</span>.format(22,<span style="color: #800000;">'</span><span style="color: #800000;">wuhan</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #008080;">2</span> <span style="color: #800000;">'</span><span style="color: #800000;">i am 22 years old,i am now in wuhan</span><span style="color: #800000;">'</span></pre>
</div>
<p>　　<span style="line-height: 1.5;">10、 今日数据：快盘，github.</span></p>
<p><span style="line-height: 1.5;"><strong>[7.28 周二]</strong></span></p>
<p>　　1、 今日任务:余额错误对账<br />　　2、 查询每个店铺的当前shop表中的shop_balance，available_balance两个值是否与balancehistory表中该店铺最后一条记录的两者的值是否相吻合.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> id,shop_id,create_time,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">in</span>(<span style="color: #800000; font-weight: bold;">0</span>,<span style="color: #800000; font-weight: bold;">1</span>,<span style="color: #800000; font-weight: bold;">2</span>,<span style="color: #800000; font-weight: bold;">3</span>,<span style="color: #800000; font-weight: bold;">4</span>,<span style="color: #800000; font-weight: bold;">5</span>) <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> shop_id,create_time <span style="color: #0000ff;">desc</span><span style="color: #000000;">;
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">select</span> shop_id,shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">in</span>(<span style="color: #800000; font-weight: bold;">2</span>,<span style="color: #800000; font-weight: bold;">6</span>,<span style="color: #800000; font-weight: bold;">7</span>) <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span> shop_id <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> create_time <span style="color: #0000ff;">desc</span> limit <span style="color: #800000; font-weight: bold;">0</span>,<span style="color: #800000; font-weight: bold;">1</span>;</pre>
</div>
<p>　　　　注：因为分组查询再取limit会出现错误，即分组后查询后再取每组的第一个值的问题没有解决，所以分组查询后在python中进行处理取最新一条记录的值。</p>
<p><br />　　3、 mysql取分组后每组最后一条数据的一个方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span> test_group(id0 <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">5</span>) <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span>,id <span style="color: #0000ff;">int</span>,name <span style="color: #0000ff;">char</span>(<span style="color: #800000; font-weight: bold;">5</span><span style="color: #000000;">));
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">...(几个insert语句)
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span><span style="color: #000000;"> test_group;
</span><span style="color: #008080;"> 4</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+------+</span>
<span style="color: #008080;"> 5</span> <span style="color: #808080;">|</span> id0 <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span>
<span style="color: #008080;"> 6</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+------+</span>
<span style="color: #008080;"> 7</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">100</span> <span style="color: #808080;">|</span> aa <span style="color: #808080;">|</span>
<span style="color: #008080;"> 8</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">100</span> <span style="color: #808080;">|</span> bb <span style="color: #808080;">|</span>
<span style="color: #008080;"> 9</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">100</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span>
<span style="color: #008080;">10</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">101</span> <span style="color: #808080;">|</span> dd <span style="color: #808080;">|</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">101</span> <span style="color: #808080;">|</span> ee <span style="color: #808080;">|</span>
<span style="color: #008080;">12</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">6</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">102</span> <span style="color: #808080;">|</span> ff <span style="color: #808080;">|</span>
<span style="color: #008080;">13</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">7</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">102</span> <span style="color: #808080;">|</span> gg <span style="color: #808080;">|</span>
<span style="color: #008080;">14</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">8</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">102</span> <span style="color: #808080;">|</span> hh <span style="color: #808080;">|</span>
<span style="color: #008080;">15</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">9</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">102</span> <span style="color: #808080;">|</span> ii <span style="color: #808080;">|</span>
<span style="color: #008080;">16</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">10</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">103</span> <span style="color: #808080;">|</span> jj <span style="color: #808080;">|</span>
<span style="color: #008080;">17</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+------+</span>
<span style="color: #008080;">18</span> <span style="color: #0000ff;">select</span> id0,name <span style="color: #0000ff;">from</span> test_group X <span style="color: #0000ff;">where</span> id0 <span style="color: #808080;">in</span> (<span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">max</span>(id0) <span style="color: #0000ff;">from</span> test_group Y <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> (id));
</span><span style="color: #008080;">19</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+</span>
<span style="color: #008080;">20</span> <span style="color: #808080;">|</span> id0 <span style="color: #808080;">|</span> name <span style="color: #808080;">|</span>
<span style="color: #008080;">21</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+</span>
<span style="color: #008080;">22</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> cc <span style="color: #808080;">|</span>
<span style="color: #008080;">23</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">|</span> ee <span style="color: #808080;">|</span>
<span style="color: #008080;">24</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">9</span> <span style="color: #808080;">|</span> ii <span style="color: #808080;">|</span>
<span style="color: #008080;">25</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">10</span> <span style="color: #808080;">|</span> jj <span style="color: #808080;">|</span>
<span style="color: #008080;">26</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+</span></pre>
</div>
<p>　　4、 mysql子查询不支持limit问题解决<br />　　　　This version of MySQL doesn&rsquo;t yet support &lsquo;LIMIT &amp; IN/ALL/ANY/SOME 错误解决<br />　　　　在一个Mysql表达式中使用嵌套查询，出现了这个错误。原因是内层select语句带有limit子句。<br />　　　　在网上查了下，有文章指出：<br />　　　　比如这样的语句是不能正确执行的。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> <span style="color: #0000ff;">table</span> <span style="color: #0000ff;">where</span> id <span style="color: #808080;">in</span> (<span style="color: #0000ff;">select</span> id <span style="color: #0000ff;">from</span> <span style="color: #0000ff;">table</span> limit <span style="color: #800000; font-weight: bold;">12</span>);</pre>
</div>
<p>　　　　但是，只要你再加一层就行。如：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> <span style="color: #0000ff;">table</span> <span style="color: #0000ff;">where</span> id <span style="color: #808080;">in</span> (<span style="color: #0000ff;">select</span> t.id <span style="color: #0000ff;">from</span> (<span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> <span style="color: #0000ff;">table</span> limit <span style="color: #800000; font-weight: bold;">12</span>)<span style="color: #0000ff;">as</span> t)</pre>
</div>
<p>　　　　这样就可以绕开limit子查询的问题。<br />　　　　问题解决。<br />　　　　后来我发现，上述是解决问题的一个方法，其实还有一个更好的做法，就是把限制条件放到from而非where子句中，就不必出现嵌套再嵌套。<br />如上例，可以改为：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> (<span style="color: #0000ff;">select</span> id <span style="color: #0000ff;">from</span> <span style="color: #0000ff;">table</span> limit <span style="color: #800000; font-weight: bold;">12</span>) <span style="color: #0000ff;">as</span> foo;</pre>
</div>
<p>　　　　注意：其实as foo特别重要，如果不写成from () as xxx的形式，即不给from后的select语句构成表名，那么最后系统仍会报错。</p>
<p>　　5、 balancehistory表中balance_type in (4,5)的记录表示的是商家删除订单或者用户取消订单的记录，但这样的记录的订单号在order表中对应的status都为0，所以如果order表中有遗漏的status=0的记录没有插入到balancehistory表中，那么插入的时候都按照balance_type=5进行插入。</p>
<p>　　　　#用户在线支付成功的订单不能取消也不能删除，但余额支付的订单可以。<br />　　　　#余额支付的订单不会有&ldquo;未付款&rdquo;的状态，因为在提交订单的同时会进行余额支付操作，而在线支付提交订单并不会同时支付，而是还要进入支付页面进行支付。<br />　　　　#经过检测，发现不存在balancehistory中店铺以外的店铺没有插入相关记录的情况，因此只考虑balancehistory表中的店铺的错漏，所以shop_list_query2可以先不考虑。<br />　　　　#order表中online_type字段表示在线支付的类型（'wx'或'alipay'）<br />　　　　#设定一个change_shop_id列表,把balancehistory表中修改过的店铺的id都存进去.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> create_date,pay_type,totalPrice <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span> <span style="color: #808080;">and</span> num <span style="color: #808080;">=</span> "<span style="color: #800000; font-weight: bold;">1080000332</span><span style="color: #000000;">";
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">select</span> num,pay_type,status,totalPrice <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">48338</span><span style="color: #000000;">;
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_ value, shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> create_time;</pre>
</div>
<p>　　6、 sqlalchemy修改数据库中某一个表的某些字段的值的方法：</p>
<div class="cnblogs_code">
<pre>query <span style="color: #808080;">=</span> self.session.query(models.<span style="color: #0000ff;">Order</span>).filter_by(num <span style="color: #808080;">=</span> "<span style="color: #800000; font-weight: bold;">1203000000</span><span style="color: #000000;">").first()
query.pay_type </span><span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">22</span><span style="color: #000000;">
self.session.</span><span style="color: #0000ff;">commit</span>()</pre>
</div>
<p>　　7、 sqlalchemy向表中添加记录的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> balance_history = models.BalanceHistory(customer_id =<span style="color: #000000;"> insert_list[i][0],\
</span><span style="color: #008080;">2</span> shop_id = insert_list[i][1] ,name = insert_list[i][2],balance_value = insert_list[i][3<span style="color: #000000;">] ,\
</span><span style="color: #008080;">3</span> balance_record = insert_list[i][4],create_time = insert_list[i][5],balance_type = 1<span style="color: #000000;">)
</span><span style="color: #008080;">4</span> <span style="color: #000000;">self.session.add(balance_history)
</span><span style="color: #008080;">5</span> self.session.commit()</pre>
</div>
<p>　　8、 sqlalchemy上锁方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> query = self.session.query(models.Order).filter_by(num = <span style="color: #800000;">"</span><span style="color: #800000;">1203000000</span><span style="color: #800000;">"</span>).with_lockmode(<span style="color: #800000;">"</span><span style="color: #800000;">update</span><span style="color: #800000;">"</span>).first()</pre>
</div>
<p>　　9、 元组中的元素不能进行自加操作，只能先把元组转化为字符串（用list方法），然后才能执行自加操作</p>
<p>　　10、 今日数据：快盘，github.</p>
<p><strong>[7.30 周四]</strong><br />　　1、 今日任务:余额错误对账</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> create_time,shop_id,balance_type,balance_record,balance_ value, shop_totalPrice,available_balance <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">select</span> shop_id,<span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #808080;">&lt;</span> (<span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> senguocc.<span style="color: #0000ff;">order</span>.shop_id <span style="color: #808080;">=</span> balancehistory.shop_id <span style="color: #808080;">and</span> senguocc.<span style="color: #0000ff;">order</span>.pay_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">3</span>) <span style="color: #0000ff;">group</span> 
<span style="color: #008080;">3</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id;
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">select</span> shop_id,<span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #0000ff;">group</span> <span style="color: #0000ff;">by</span> shop_id;</pre>
</div>
<p>　　2、 异常数据：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">totalprice: 39 10.4 0
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">totalprice: 259 66.5 0
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">available_balance: 271 0.0 8.92
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">totalprice: 287 16.5 0
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">totalprice: 444 70.0 0
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">totalprice: 563 26.4 0
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">totalprice: 838 1.0 0
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">totalprice: 1037 10.0 0
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">available_balance: 1037 10.0 0
</span><span style="color: #008080;">10</span> <span style="color: #000000;">totalprice: 1057 1.0 0
</span><span style="color: #008080;">11</span> <span style="color: #000000;">available_balance: 1057 0.01 0
</span><span style="color: #008080;">12</span> <span style="color: #000000;">totalprice: 1108 2.0 0
</span><span style="color: #008080;">13</span> <span style="color: #000000;">totalprice: 1115 11.0 0
</span><span style="color: #008080;">14</span> <span style="color: #000000;">totalprice: 1141 3.0 0
</span><span style="color: #008080;">15</span> <span style="color: #000000;">totalprice: 1230 4.0 0
</span><span style="color: #008080;">16</span> <span style="color: #000000;">totalprice: 1284 1.0 0
</span><span style="color: #008080;">17</span> <span style="color: #000000;">totalprice: 1317 0.01 0
</span><span style="color: #008080;">18</span> <span style="color: #000000;">totalprice: 1340 1.01 0
</span><span style="color: #008080;">19</span> totalprice: 1473 38.0 0</pre>
</div>
<p>　　3、 零散后台打印数据记录：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">!!@@@11111111111111 197
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">@@@@ 7
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">4
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">['197000154', '197000155', '197000156']
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">!!@@@11111111111111 661
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">@@@@ 2
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">0
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">['661000036', '661000037']
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">!!@@@11111111111111 848
</span><span style="color: #008080;">10</span> <span style="color: #000000;">@@@@ 2
</span><span style="color: #008080;">11</span> <span style="color: #000000;">1
</span><span style="color: #008080;">12</span> ['848000285']</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 69, 69, 69, 69, 69, 69, 69, 69, 197, 197, 197, 197, 197, 197, 235, 272, 289, 289, 289, 488, 488, 549, 549, 607, 607, 607, 
</span><span style="color: #008080;">2</span> <span style="color: #000000;">607, 607, 607, 607, 615, 624, 624, 624, 624, 624, 624, 624, 624, 661, 661, 661, 661, 661, 848, 866, 866, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 1037, 1057, 
</span><span style="color: #008080;">3</span> 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1194]</pre>
</div>
<p>　　4、 零散mysql查询记录：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;"> 2</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;"> 3</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #808080;">|</span>
<span style="color: #008080;"> 4</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;"> 5</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">18723</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 6</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;"> 7</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.01</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> shop_balance,available_balance <span style="color: #0000ff;">from</span> shop <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">;
</span><span style="color: #008080;">10</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">|</span> shop_balance <span style="color: #808080;">|</span> available_balance <span style="color: #808080;">|</span>
<span style="color: #008080;">12</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">13</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">129.42</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">37.1</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">14</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">15</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">;
</span><span style="color: #008080;">18</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;">19</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #808080;">|</span>
<span style="color: #008080;">20</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;">21</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1388</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">22</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;"> 2</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;"> 3</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #808080;">|</span>
<span style="color: #008080;"> 4</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;"> 5</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">18723</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 6</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;"> 7</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.01</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> shop_balance,available_balance <span style="color: #0000ff;">from</span> shop <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">;
</span><span style="color: #008080;">10</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">|</span> shop_balance <span style="color: #808080;">|</span> available_balance <span style="color: #808080;">|</span>
<span style="color: #008080;">12</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">13</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">129.42</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">37.1</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">14</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">15</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">;
</span><span style="color: #008080;">18</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;">19</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #808080;">|</span>
<span style="color: #008080;">20</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span>
<span style="color: #008080;">21</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1388</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">22</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">--------+</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">197</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> (<span style="color: #0000ff;">select</span> customer_id <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> num <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">197000154</span><span style="color: #ff0000;">'</span><span style="color: #000000;">) ;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">197</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> (<span style="color: #0000ff;">select</span> customer_id <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> num <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">197000155</span><span style="color: #ff0000;">'</span><span style="color: #000000;">) ;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">197</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> (<span style="color: #0000ff;">select</span> customer_id <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> num <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">197000156</span><span style="color: #ff0000;">'</span><span style="color: #000000;">) ;
</span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">661</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> (<span style="color: #0000ff;">select</span> customer_id <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> num <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">661000036</span><span style="color: #ff0000;">'</span><span style="color: #000000;">) ;
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">661</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> (<span style="color: #0000ff;">select</span> customer_id <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> num <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">661000037</span><span style="color: #ff0000;">'</span><span style="color: #000000;">) ;
</span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">848</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> (<span style="color: #0000ff;">select</span> customer_id <span style="color: #0000ff;">from</span> senguocc.<span style="color: #0000ff;">order</span> <span style="color: #0000ff;">where</span> num <span style="color: #808080;">=</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">848000285</span><span style="color: #ff0000;">'</span><span style="color: #000000;">) ;
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">count</span>(<span style="color: #808080;">*</span>) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> shop_id,create_time;
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> <span style="color: #0000ff;">select</span> id,create_time,shop_id,balance_type,balance_record,balance_value,shop_totalPrice,available_balance,is_cancel <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> shop_id,create_time;</pre>
</div>
<p><span style="line-height: 1.5;">　　5、 order表中的del_reason字段可以判断订单删除或取消的原因:若del_reason字段为'timeout'则表示是在线支付未付款(status = -1)超时造成的订单取消;若del_reason为空,则表示是用户取消的;若del_reason非空且不为'timeout',则表示是商家删除的.此外,因为现有订单表中没有记录订单的取消或删除时间,所以默认设定创建时间后的15分钟为删除时间.&nbsp;</span></p>
<p><span style="line-height: 1.5;">　　6、&nbsp;</span><span style="line-height: 1.5;">*筛选出shop_id错误的记录并修正.</span></p>
<p>　　　　*将balancehistory表中的所有店铺id查出来存放在列表shop_list_query1中<br />　　　　*将系统中的所有status &gt; -1的订单的数量不为0店铺的id查询出来存在一个列表shop_list_query2中<br />　　　　*然后从列表shop_list_query2中除去shop_list_query1中的id <br />　　　　*设定一个change_shop_id列表,把balancehistory表中修改过的店铺的id都存进去.<br />　　　　*遍历shop_id_list1每一个shop的id<br />　　　　*查询店铺号在balancehistory中对应的shop_totalprice最新记录<br />　　　　*查询店铺号在balancehistory中对应的available_balance最新记录<br />　　　　*查询店铺号在shop表中对应的shop_totalprice和available_balance字段值<br />　　　　*检查每一个店铺的店铺余额是否与balancehistory中的一致<br />　　　　*判断shop表和balancehistory表两表中的shop_totalPrice和available_balance两个字段是否分别一致<br />　　　　*查询balancehistory表中的所有余额支付（balance_type = 1）的记录的订单号并存到列表balance_type_1中<br />　　　　*查询order表中的所有余额支付（pay_type = 2）的记录的订单号并存到列表pay_type_2中<br />　　　　*判断pay_type_2的长度是否大于balance_type_1，若大于，则说明order表中肯定有余额支付的订单记录没有插入到balancehistory表中，这时就要把相关记录插入到balancehistory表中.<br />　　7、 python获取过15分钟以后的时间:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt;&gt;&gt;<span style="color: #0000ff;">import</span><span style="color: #000000;"> datetime
</span><span style="color: #008080;">2</span> &gt;&gt;&gt; now = datetime.datetime(2015,12,31,23,59,50<span style="color: #000000;">)
</span><span style="color: #008080;">3</span> &gt;&gt;&gt;<span style="color: #000000;"> now
</span><span style="color: #008080;">4</span> datetime.datetime(2015, 12, 31, 23, 59, 50<span style="color: #000000;">)
</span><span style="color: #008080;">5</span> &gt;&gt;&gt; now = now + datetime.timedelta(minutes=15<span style="color: #000000;">)
</span><span style="color: #008080;">6</span> &gt;&gt;&gt;<span style="color: #000000;"> now
</span><span style="color: #008080;">7</span> datetime.datetime(2016, 1, 1, 0, 14, 50)</pre>
</div>
<p>　　8、 python列表去重的二种方法:<br />　　　　第一种</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> delRepeat(liebiao):
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">for</span> x <span style="color: #0000ff;">in</span><span style="color: #000000;"> liebiao:
</span><span style="color: #008080;">3</span>         <span style="color: #0000ff;">while</span> liebiao.count(x)&gt;1<span style="color: #000000;">:
</span><span style="color: #008080;">4</span>         <span style="color: #0000ff;">del</span><span style="color: #000000;"> liebiao[liebiao.index(x)]
</span><span style="color: #008080;">5</span>     <span style="color: #0000ff;">return</span> liebiao    </pre>
</div>
<p>　　　　第二种 无法保持原有顺序</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> liebiao=set(liebiao)</pre>
</div>
<p>　　9、 sqlalchemy存储过程</p>
<p>　　10、 现在已经把order表中漏的记录都插到balancehistory表中了，期间遇到的最大的问题就是5月10号之前因为没有开通在线支付，只有余额支付才能在balancehistory表中产生记录，而且当时可能也还没有available_balance字段，换句话说，在5月10号之前这个时间段中，只要用户往一个店铺中充了余额，那么不管这个余额用还是没有用，店铺管理员都是可以提现的。折腾了这么几天发现出错的地方也绝大部分都集中在这个时间段，大多都是余额支付或者余额支付的订单完成或者余额支付的订单删除的记录没有插入到表中，只有一少部分可能是因为线程竞争或者并发操作等其他原因导致的错误。牵一发而动全身，下一步就是修改balancehistory表中凡是出现了上述问题的所有shop_totalPrice和available_balance字段的值。&nbsp;&nbsp; <br />　　　　修改的大致思路如下：按照时间升序和按照店铺id分组遍历整张balancehistory表，当前记录的shop_totalPrice和available_balance字段的值可以根据当前的balance_value，balance_type以及上一条记录的shop_totalPrice和available_balance字段的值推算出来。 <br />　　　　鉴于有这么个特殊情况：当balance_type not in [2,6,7]时，available_balance都为0，所以当要推算当前记录的available_balance字段的值时，可能上一条记录中并没有available_balance的正确值（上一条的balance_type not in [2,6,7],故available_balance为无效的0），所以还要从当前位置开始往前遍历，直到遍历到第一条balance_type in [2,6,7]的记录，并读取其available_balance值，然后加上当前记录的balance_value值即可得当前记录的available_balance值。&nbsp; <br />　　　　实现方式上，一开始想的是利用mysql的存储过程遍历整张表，然后按照上面的方法修改，但是后来考虑了一下，存储过程还是有点复杂了，还不如先循环遍历表中所有的店铺id(或者只遍历进行了修改的店铺的id),然后在每一次循环中按照时间升序，把当前店铺对应的每条记录的：id,create_time,balance_type,balance_value ,shop_totalPrice,available_balance这些字段查询出来并且存放到一个二维的列表中。然后遍历这个列表，从第二项开始，第i项的shop_totalPrice和available_balance元素的值都可以用上面的算法计算出来然后存到原处。等遍历完这个列表以后，就可以根据id项通过sqlalchemy修改相应的字段了.<br />　　11、 今日数据：快盘，github.</p>
<p><br /><strong>[7.31 周五]</strong></p>
<p>　　1、 今日任务:余额错误对账<br />　　2、 数据临时记录：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #808080;">//</span><span style="color: #000000;">(改错前):
</span><span style="color: #008080;"> 2</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> id,shop_name,shop_balance,available_balance <span style="color: #0000ff;">from</span> shop <span style="color: #0000ff;">where</span> shop_balance <span style="color: #808080;">&lt;</span><span style="color: #000000;"> available_balance;
</span><span style="color: #008080;"> 3</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+-----------+--------------+-------------------+</span>
<span style="color: #008080;"> 4</span> <span style="color: #808080;">|</span> id <span style="color: #808080;">|</span> shop_name <span style="color: #808080;">|</span> shop_balance <span style="color: #808080;">|</span> available_balance <span style="color: #808080;">|</span>
<span style="color: #008080;"> 5</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+-----------+--------------+-------------------+</span>
<span style="color: #008080;"> 6</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">1080</span> <span style="color: #808080;">|</span> 果缤纷 <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">125</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">206.5</span> <span style="color: #808080;">|</span>
<span style="color: #008080;"> 7</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+-----------+--------------+-------------------+</span>
<span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> shop_balance,available_balance <span style="color: #0000ff;">from</span> shop <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">;
</span><span style="color: #008080;">10</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">|</span> shop_balance <span style="color: #808080;">|</span> available_balance <span style="color: #808080;">|</span>
<span style="color: #008080;">12</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">13</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">155.42</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">58.1</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">14</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> <span style="color: #808080;">//</span><span style="color: #000000;">(改错后):
</span><span style="color: #008080;">18</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> shop_balance,available_balance <span style="color: #0000ff;">from</span> shop <span style="color: #0000ff;">where</span> id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">;
</span><span style="color: #008080;">19</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">20</span> <span style="color: #808080;">|</span> shop_balance <span style="color: #808080;">|</span> available_balance <span style="color: #808080;">|</span>
<span style="color: #008080;">21</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">22</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">155.42</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">311.6</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">23</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+-------------------+</span>
<span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> shop_balance <span style="color: #0000ff;">from</span> customer_shop_follow <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2105</span><span style="color: #000000;">;
</span><span style="color: #008080;">26</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+</span>
<span style="color: #008080;">27</span> <span style="color: #808080;">|</span> shop_balance <span style="color: #808080;">|</span>
<span style="color: #008080;">28</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+</span>
<span style="color: #008080;">29</span> <span style="color: #808080;">|</span> <span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">75</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">30</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------+</span>
<span style="color: #008080;">31</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">0</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2105</span> <span style="color: #808080;">and</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span><span style="color: #000000;">;
</span><span style="color: #008080;">34</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">35</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #808080;">|</span>
<span style="color: #008080;">36</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">37</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">22</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">38</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">39</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">40</span> 
<span style="color: #008080;">41</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2105</span> <span style="color: #808080;">and</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span><span style="color: #000000;">;
</span><span style="color: #008080;">42</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">43</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #808080;">|</span>
<span style="color: #008080;">44</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">45</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">98.29999947547913</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">46</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">47</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">in</span> (<span style="color: #800000; font-weight: bold;">6</span>,<span style="color: #800000; font-weight: bold;">7</span>) <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2105</span> <span style="color: #808080;">and</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span><span style="color: #000000;">;
</span><span style="color: #008080;">50</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">51</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #808080;">|</span>
<span style="color: #008080;">52</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">53</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">61.19999957084656</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">54</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">55</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">56</span> 
<span style="color: #008080;">57</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">0</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2105</span> <span style="color: #808080;">and</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span><span style="color: #000000;">;
</span><span style="color: #008080;">58</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">59</span> <span style="color: #808080;">|</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #808080;">|</span>
<span style="color: #008080;">60</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">61</span> <span style="color: #808080;">|</span> <span style="color: #800000; font-weight: bold;">22</span> <span style="color: #808080;">|</span>
<span style="color: #008080;">62</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">------------------+</span>
<span style="color: #008080;">63</span> <span style="color: #800000; font-weight: bold;">1</span> row <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span> sec)</pre>
</div>
<p>　　3、 修改思路可以简化:还是按之前的流程,只不过每一个店铺从头到尾balancehistory的每一条记录都赋上相应的值,为了简便计算.<br />　　　　此外,在往balancehistory表中插入遗漏的记录之前,还要先找出错插的记录(比如一个店铺的记录的店铺id错误的记成了另外一个店铺的id),然后把店铺id改成正确的.</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">select</span> id,create_time,shop_id,balance_type,balance_record,balance_value,customer_id,customer_totalPrice,shop_totalPrice,available_balance,is_cancel <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span> 
<span style="color: #008080;">2</span> <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span><span style="color: #000000;"> create_time;
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">select</span> <span style="color: #ff00ff;">sum</span>(balance_value) <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">and</span> customer_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">2105</span> <span style="color: #808080;">and</span> shop_id <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1080</span><span style="color: #000000;">;
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">select</span> id,create_time,shop_id,balance_type,balance_record,balance_value,customer_id,customer_totalPrice,shop_totalPrice,available_balance,is_cancel <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> 
<span style="color: #008080;">5</span> <span style="color: #000000;">shop_id,create_time;
</span><span style="color: #008080;">6</span> <span style="color: #0000ff;">select</span> balance_record <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">where</span> balance_type <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">and</span> (balance_record <span style="color: #808080;">not</span> <span style="color: #808080;">like</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">在线支付(微信)：订单%</span><span style="color: #ff0000;">'</span> <span style="color: #808080;">or</span> balance_record <span style="color: #808080;">not</span> <span style="color: #808080;">like</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">在线支付(支付宝)：订单%</span><span style="color: #ff0000;">'</span><span style="color: #000000;">);
</span><span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span> <span style="color: #0000ff;">select</span> id,create_time,shop_id,balance_type,balance_record,balance_value,customer_id,customer_totalPrice,shop_totalPrice,available_balance,is_cancel <span style="color: #0000ff;">from</span> balancehistory <span style="color: #0000ff;">order</span> <span style="color: #0000ff;">by</span> 
<span style="color: #008080;">9</span> shop_id,create_time;</pre>
</div>
<p>　　4、 从数据库中删除数据示例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> self.session.query(models.CheckProfit).filter(models.CheckProfit.create_time == end_date,models.CheckProfit.is_checked==0).delete()</pre>
</div>
<p>　　5、 今日数据：快盘，github.&nbsp;</p>
<p>【8.3 周一】</p>
<p>　　1、 今日任务：总后台销售统计功能<br />　　　　*框架搭建：url,页面布局，echarts框架<br />　　　　*后台数据获取：数据获取数据结果及算法</p>
<p>　　2、 加功能流程:<br />　　①先确定在哪个模板网页（xxxbase.html）上加功能（方法：根据要添加新功能页面的url从urls.py文件中反查到对应的py文件中的类，然后到相应的py文件中找到这个类的get方法，到get方法的最后找到render方法，render方法中渲染的html页面即为当前的页面，然后找到这个html页面文件，即可找到它继承的base页面）---&gt;②在该网页上加上需要的html元素---&gt;③在该网页的顶部设置该元素的激活状态变量,并设定激活条件,以及该元素的跳转href名称,这样写:href={{reverse_url('superCheckCash')}}---&gt;④在urls.py中添加该名称对应的路由以及superadmin.py中的新增加类的名称---&gt;⑤在superadmin.py中增加新的类,实现后台功能.先从简单开始,只写get方法,return渲染到新页面，之后再丰富功能---&gt;⑥添加名字为第⑤步中的渲染的网页名称的新网页,引用需要的基本框架,在其中添加简单的字符,以及在下方添加引用其对应的js文件---&gt;⑦新建第⑥步中需要的js空文件---&gt;⑧运行系统,看新增加的链接和页面能否正常加载.如果正常加载,则进一步丰富系统功能（写后台post方法，html页面的元素，js的事件处理等）.</p>
<p>　　3、 系统预定义的水果的名称，id及其他信息存在db_initdata.py文件中.</p>
<p>　　4、 功能简述：<br />　　　　1.商品按类目销售统计（按照日／周／月，分别统计不同时间段的系统中总销售额前30名的商品类目及销售额）<br />　　　　2.同种类目商品销售额前10名店铺统计（按照日／周／月，分别统计不同时间段同种类目商品(限于1中的30个类目)销售额达到系统前十名的店铺的详细信息）<br />　　　　3.相同分组商品店铺销售额Top30店铺<br />　　　　4.不同分组商品销售额排行（就三组：水果，干果，其他商品）（最后再加上个饼形图）</p>
<p>　　5、 注意事项：<br />　　　　1.因为每个店铺的每单种商品的id具有唯一性，同一种商品（比如阿克苏香梨）不同店铺的叫法也可能不同，而且不同店铺同一类目下的商品都不相同，所以总后台的销售统计中类目销售统计不能统计类目下具体商品的销售情况． <br />　　　　2.统计销售额最大的前若干种商品具有现实意义，可以通过分析不同时间（或季节）不同热卖的商品的变化趋势，得出一些有价值的结论，为商城商家提供信息．<br />　　　　3.因为图表比较长，所以要加查看大图功能．<br />　　　　4.图表名称：<br />　　　　　　商品销售额Top30 - 按商品类目排序<br />　　　　　　同类商品店铺销售额Top10 - 按店铺名排序<br />　　　　　　同组商品店铺销售额Top10 - 按店铺名排序</p>
<p>　　6、 微信公众号文章排版工具：秀米</p>
<p>　　7、 想要给总后台的订单统计的echarts添加loading，但改了半天发现出各种错误，还是当初在似懂非懂的时候写出的代码太混乱了，结构不清晰，变量不规范，有必要进行重构．</p>
<p>　　8、 今天总后台订单统计出现一个bug:下单时间曲线和收货时间曲线又完全一样了，提示错误：KeyError:26<br />　　　　马上意识到又是数组下标越界了，把superadmin.py的954行左右的代码改成如下即可：<br />if order[1].hour + (order[1].minute+order[3])//60 &gt;= 24:<br />data[order[1].hour + (order[1].minute+order[3])//60 - 24] += 1</p>
<p>【8.4 周二】<br />　　1、 今日任务：总后台销售统计功能<br />　　2、 后台数据获取算法：<br />　　　　*销售额Top30商品类目：<br />　　　　(1)从fruit_type表中查出所有商品类目的id和名称，存到一个字典fruit_type_price_dict中，键为id，值为名称和销售额组成的列表，且销售额都初始化为0．<br />　　　　　　select id,name from fruit_type;<br />　　　　(2)获取指定时间段内的所有订单的fruits字段和mgoods字段并分别存到两个列表中：fruit_list,mgoods_list<br />　　　　(3)从fruit_list列表的每一项中分离出charge_type_id和对应的金额，然后从charge_type_id反查到fruit_type_id,最后将fruit_type_price_dict中与此id相同的项的金额自加这个金额．<br />　　　　　　计价方式-商品类目id对照表：select distinct charge_type.id,fruit_type_id from fruit,charge_type where fruit.id = charge_type.fruit_id;<br />　　　　(4)从mgoods_list列表的每一项中分离出对应的金额，直接将fruit_type_price_dict中id=2000项(其他商品)的金额自加这个金额．<br />　　　　(5)将字典fruit_type_price_dict转化成列表fruit_type_price_list,该列表的每一个元素都为一个子列表，子列表有三个元素：商品类目id,名称，金额．将fruit_type_price_list列表按照每一项的金额降序排序，取前30个元素作为output_data，返回给前台．<br />　　　　*同类商品销售额Top10店铺:<br />　　　　(1)在网页刷新的时候发一个post请求，用于获取所有商品类目的id和名称，按id升序排列，然后传到js中为下拉选择二级菜单赋值，将类目名称赋给下拉按钮的text,将id赋给下拉按钮的data-id属性．令cur_selected_type_id　= 当前显示的选中那个类目的id.<br />　　　　(2)通过post请求将cur_selected_type_id连带其他参数(起止时间等)传到后台，后台shop_count方法进行处理．<br />　　　　(3)先从fruit表和charge_type表联合查询查出所有fruit_type_id等于cur_selected_type_id的charge_type.id,shop_id,并建立一个字典charge_type_shop_dict，该字典的键是charge_type.id，值是一个列表，列表的第一项是shop_id，第二项是金额，初始化为0.<br />select charge_type.id,shop_id from charge_type,fruit where charge_type.fruit_id = fruit.id;<br />　　　　(4)用self.get_order方法获取选取时间段的所有订单的fruits字段和mgoods字段并存入fruit_list和mgoods_list中，并判断如果cur_selected_type_id != 2000则不对mgoods进行处理，只对fruit_list进行处理．<br />　　　　(5)从fruit_list列表的每一项中分离出charge_type_id和对应的金额，然后将charge_type_shop_dict键等于charge_type_id的项的金额自加对应的金额.如果查不到计价方式对应的shop_id（可能计价方式已经被删除了）那么直接continue.需要建立一个列表cur_charge_type_list，该列表包含cur_selected_type_id对应的所有计价方式的id.<br />　　　　(6)将字典charge_type_shop_dict的值([shop_id,price])存到一个列表中，考虑到shop_id会有重复的情况(因为同一个charge_type_id可能对应多个shop_id)，所以先要把shop_id存到一个列表cur_shop_id中，然后将该列表去重，然后再遍历charge_type_shop_dict的值，累加每个店铺的price，存到each_shop_price_dict字典中，键为shop_id,值为price．<br />　　　　(7)如果cur_selected_type_id == 2000：从m_charge_type,m_goods,menu三表联合查询，查出所有m_charge_type中id对应的menu表中的shop_id,并建立字典，键为m_charge_type_id,值为shop_id,然后根据shop_id将金额累加到charge_type_shop_dict中去．如果查不到计价方式对应的shop_id（可能计价方式已经被删除了）那么直接continue.<br />完了以后再遍历当前字典，如果shop_id在each_shop_price_dict的键列表中，则将这这个键对应的price自加，否则新增键值对.<br />　　　　(8)最后新建一个列表each_shop_price_list，每一个元素为一个子列表，子列表的第一项为shop_id,第二项为shop_name,第三项为price,将each_shop_price_list按照price降序排列，然后取each_shop_price_list的前十项返回到前台．<br />　　　　*同组商品销售额Top10店铺：<br />　　　　(1)先设定三个分组的id:水果1,干果2,其他商品0,页面刷新的时候前台就发post请求，传分组id，然后后台group_count方法进行处理<br />　　　　(2)后面处理算法与前面类似.</p>
<p>　　3、 注意事项：<br />　　　　(1)fruit_type_id &lt; 999:水果<br />　　　　(2)fruit_type_id = 999:其他水果<br />　　　　(3)1000 &lt; fruit_type_id &lt; 1999:干果<br />　　　　(4)fruit_type_id = 1999:其他干果<br />　　　　(5)fruit_type_id　= 2000:其他商品<br />　　　　(6)之前的mgoods现在都算成是'其他商品'<br />　　　　(7)有大量的fruits字段中的计价方式被删掉了，这样就找不到该种水果所属的类别了，那金额就统一归为'其他水果'的类目中．<br />　　　　(8)第二个图的下拉选项按钮考虑用二级菜单实现，列出所有的商品类目供选择．</p>
<p>　　4、 python在当前类中调用当前类的其他方法，在其他方法名前一定要加'self.'才行，否则会提示方法未定义．</p>
<p>　　5、 jquery两个关联元素绑定hover事件(这个问题好麻烦，网上找了很多资料都很麻烦，最后发现了setTimeout函数)<br />　　　　解决方案1：用延时函数解决．</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> setTimeout(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">2</span> ... <span style="color: #008000;">//</span><span style="color: #008000;">这里是要延时500ms执行的代码</span>
<span style="color: #008080;">3</span> },500);</pre>
</div>
<p>　　　　因为给第二级菜单加了mouseover事件来显示第三级菜单，同时也给第二级菜单加了mouseleave事件在鼠标离开第二级菜单的时候隐藏第三级菜单，但是在鼠标从第二级菜单向第三级菜单移动的时候，本来是不期望隐藏掉第三级菜单的，因为那样就找不到第三级菜单了，所以为第二级菜单的mouseleave事件加上延时，这样鼠标指针就可以在第三级菜单隐藏掉之前滑到它上面，同时在第二级菜单的延时时间到达的那一瞬间用show()方法显示．这样就解决了问题，但是会出现闪烁的现象．</p>
<p>　　　　解决方案2:用联动的addClass("hidden")和removeClass("hidden")方法实现，此种方法可以方案一的闪烁现象，但也有缺陷．<br />　　　　　　　　　假设第二级菜单有两个选项，id分别为second1,second2,点击second1,second2弹出的第三级菜单的id分别为third1,third2,先给second1添加mouseover事件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $("#third1").removeClass("hidden"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> $("#third2").addClass("hidden"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> //<span style="color: #000000;">再给third1添加mouseover事件：
</span><span style="color: #008080;">4</span> $("third1").removeClass("hidden"<span style="color: #000000;">)
</span><span style="color: #008080;">5</span> //<span style="color: #000000;">给third1添加mouseout事件：
</span><span style="color: #008080;">6</span> $("third1).addClass("hidden")</pre>
</div>
<p>　　　　　　　　　对second2和third2的处理同理，只要保证third1和third2的隐藏和消失互斥即可．</p>
<p>【8.5 周三】<br />　　1、 今日任务：总后台销售统计</p>
<p>　　2、 jquery有时候要显示一个元素，仅仅使用removeClass("hidden")属性是不管用的，display属性仍然为none,还要再加个show()方法．</p>
<p>　　3、 jquery display:none与visible:hidden的区别:<br />　　　　display:none和visible:hidden都能把网页上某个元素隐藏起来，但两者有区别:<br />　　　　display:none ---　不为被隐藏的对象保留其物理空间，即该对象在页面上彻底消失，通俗来说就是看不见也摸不到。<br />　　　　visible:hidden--- 使对象在网页上不可见，但该对象在网页上所占的空间没有改变，通俗来说就是看不见但摸得到。<br />　　　　例子：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>display:none和visible:hidden的区别<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body </span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="display:none; background-color:Blue"</span><span style="color: #0000ff;">&gt;</span>隐藏区域，同时把位置让出来<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">=" background-color:Green"</span><span style="color: #0000ff;">&gt;</span>显示区域，显示的地方会占据原先隐藏区域的位置<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br </span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;">7</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="visibility:hidden; background-color:Blue"</span><span style="color: #0000ff;">&gt;</span>隐藏区域，虽然隐藏但是位置依然占着<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="background-color:Green"</span><span style="color: #0000ff;">&gt;</span>显示区域<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">8</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">9</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　4、 jquery中调用post方法所在的函数可能会出现这个问题：<br />　　　　前一个调用还没有执行完（比如因为数据量大等因素），后一个调用紧接着就执行了，这会带来相互之间的影响，引发未知的错误．<br />　　　　可以这样解决：定义一个全局的标志变量，类似于一个锁，用该变量的状态控制每次的调用是否能够执行即可．或者关闭异步：$.ajaxSetup({async:false});</p>
<p>　　5、 用echarts的hideLoading方法时遇到一个奇怪的问题：刷新页面的时候js出现异常，出现错误：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> Uncaught TypeError: Cannot read property 'hideLoading' of <span style="color: #0000ff;">null</span>(anonymous <span style="color: #0000ff;">function</span>) @ superadmin-count_sell.js?v=03a80c5e1ec3f44ec6876f69099b1146:862m.Callbacks.j @ jquery.min.js:2m.Callbacks.k.fireWith @ jquery.min.js:2x @ jquery.min.js:4m.ajaxTransport.send.b @ jquery.min.js:4
<span style="color: #008080;">2</span> echarts.js:1 Dom&rsquo;s width &amp; height should be ready before init.</pre>
</div>
<p>　　　　而且这个问题有时出现有时又正常．<br />　　　　但当点击选项的时候调用同样的post请求函数，又恢复正常．<br />　　　　最后发现问题出在：初始化echarts的时候没有为echarts所在的div设定高度，导致echarts初始化失败，只需提前为div设置高度即可．<br />　　　　但偶尔数据返回成功以后，还会出现异常:Uncaught TypeError: Cannot read property 'hideLoading' of null，也就是echarts还是没有初始化成功．这个异常只是偶尔出现，别的时候恢复正常，可是这更加让人困惑．<br />　　　　找了半天原因发现有这么一个现象：在浏览器中用ctrl+R或者f5刷新才会偶尔出现上述问题，而从get方法进入或者从url回车进入并不会出现这个问题，所以猜测可能是用ctrl+R或f5刷新的时候导致浏览器强制清空了变量的缓存，而这时函数可能还没有执行完，接着再执行到了用到刚刚清空了缓存的变量的地方，就会出现变量诡异的变成了null的现象．<br />　　　　而且还有就是做店铺后台销售统计的时候也并没有提前设置高度，而且没有出现异常，这个问题有待进一步探究．<br />　　　　后来研究echarts官网的demo发现，返回数据后需要对hideLoading方法进行一个延时处理，所以考虑可能是因为echarts异步刷新的问题，但是延时处理以后还会偶尔出现异常，也可能是echarts的一个bug.</p>
<p>　　6、 在浏览器中打开一个纯文本txt编辑器页面：<br />　　　　在地址栏中输入：data:text/html, &lt;textarea style='height:100%;width:100%;margin:auto'&gt;&lt;/textarea&gt;然后回车即可；<br />　　　　如果想保留文本的格式和图片，则只需输入这行代码即可：data:text/html, &lt;html contenteditable&gt;<br />　　　　还可以把这两个页面保存为书签，或在输入内容以后保存成文件，以后点开就能用．</p>
<p>　　7、 总后台添加了省级代理管理员，增加管理员的level(总超级管理员:0,省级代理管理员:1,已删除:-1)</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">self.current_user.level
</span><span style="color: #008080;">2</span> shop_province = self.current_user.province</pre>
</div>
<p>【8.6 周四】<br />　　1、 今日任务：<br />　　　　(1)已经完成了总后台销售统计功能，但是考虑到系统新增加了总后台省级代理管理员，所以要根据管理员的level和province对数据进行筛选．<br />　　　　(2)为店铺后台-商品管理-商品分组中的分组添加链接，跳转到'所有商品'并显示相应分组的商品．<br />　　　　(3)店铺后台-商品关联-所有商品的排序有bug，修复之．<br />　　2、 根据总后台管理员的level和province对数据进行筛选的基本方式举例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> level =<span style="color: #000000;"> self.current_user.level
</span><span style="color: #008080;">2</span> shop_provice =<span style="color: #000000;"> self.current_user.province
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">if</span> level ==<span style="color: #000000;"> 0:
</span><span style="color: #008080;">4</span> 　　order_list_data = self.session.query(models.Order).filter(models.Order.status == 6<span style="color: #000000;">).order_by(desc(models.Order.comment_create_date))
</span><span style="color: #008080;">5</span> <span style="color: #0000ff;">elif</span> level == 1<span style="color: #000000;">:
</span><span style="color: #008080;">6</span> 　　order_list_data = self.session.query(models.Order).join(models.Shop,models.Order.shop_id == models.Shop.id).filter(models.Order.status == 6,models.Shop.shop_province == shop_province).distinct(models.Order.id).order_by(desc(models.Order.comment_create_date))</pre>
</div>
<p>　　　　测试用数据：level = 1,shop_province = 420000</p>
<p>　　3、 完成数据分省筛选！</p>
<p>　　4、 echarts中series添加属性barWidth:[number]可以设置柱状条的宽度．</p>
<p>　　5、 sqlalchemy三表联合查询示例：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> query_list <span style="color: #808080;">=</span> self.session.query(models.TableA.a_name).<span style="color: #808080;">join</span>(models.TableB,models.TableA.b_id <span style="color: #808080;">==</span> models.TableB.id).<span style="color: #808080;">join</span>(models.TableC,models.TableB.c_id <span style="color: #808080;">=</span> models.TableC.id).filter(models.TableC.name <span style="color: #808080;">==</span> <span style="color: #ff0000;">'</span><span style="color: #ff0000;">ccc</span><span style="color: #ff0000;">'</span>).<span style="color: #808080;">all</span>()</pre>
</div>
<p>　　6、 html中如何让鼠标箭头移到某个div上就变为手型，移出后再变为原型:给这个div的样式加一条：'cursor:pointer;'如果被覆盖了，就在pointer后面加一个'!important'</p>
<p>　　7、 jquery中网址跳转示例('?'后面的是参数)：window.location.href = "/admin?data=data_str&amp;&amp;page=0";</p>
<p>　　8、 jquery,点击DIV触发事件,但是点击DIV的子元素不触发事件,该如何写选择器?<br />　　　　解决方法：即取消事件冒泡：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $('.div a').click(<span style="color: #0000ff;">function</span><span style="color: #000000;">(e){
</span><span style="color: #008080;">2</span> <span style="color: #000000;">e.stopPropagation();
</span><span style="color: #008080;">3</span> 　　　...<span style="color: #008000;">//</span><span style="color: #008000;">a标签的其他事件处理</span>
<span style="color: #008080;">4</span> });</pre>
</div>
<p>　　　　然后为div添加点击事件即可．<br />　　　　主要就是让a标签点击了以后停止冒泡,'.div'就是a标签外层容器的class．</p>
<p>　　9、 chrome事件调试：<br />　　　　在要检查的元素上单击右键选择查看元素，然后，右边的面板中会显示style标签，切换到EventListenrs标签，可以看到相关的事件绑定信息。点击最右边的文件名称还可以跳转到事件定义代码在脚本文件中的位置。<br />　　　　或者可以使用一个更强大的插件：chrome VisualEvent，直接搜索VisualEvent.crx下载后直接拖放到浏览器中安装即可．</p>
<p>　　10、 util.js里面有很多好方法．<br />　　　　 &nbsp;base.py里面也有很多好方法．</p>
<p>【8.7 周五】<br />　　今日任务:店铺后台-商品关联-所有商品的排序有bug，修复之．<br />　　1、 关于reverse_url和static_url两个函数:<br />　　　　(1)reverse_url:<br />　　　　　　①在goods-set-base.html中,有几个链接,其中用到reverse_url函数:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="subnav pull-left order-type"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="text-center aall"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('adminGoods')}}"</span><span style="color: #0000ff;">&gt;</span>所有商品<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="text-center agroup"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('adminGoodsGroup')}}"</span><span style="color: #0000ff;">&gt;</span>商品分组<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">4</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="text-center adelete"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('adminGoodsDelete')}}"</span><span style="color: #0000ff;">&gt;</span>已删除商品<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">5</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="text-center ml40 aclassify"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('adminGoodsClassify')}}"</span><span style="color: #0000ff;">&gt;</span>商品类目<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">6</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　　　②在urls.py中有如下几个url:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">...
</span><span style="color: #008080;">2</span> (r<span style="color: #800000;">"</span><span style="color: #800000;">/admin/goods/all</span><span style="color: #800000;">"</span>, handlers.admin.Goods, {<span style="color: #800000;">"</span><span style="color: #800000;">action</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">all</span><span style="color: #800000;">"</span>}, <span style="color: #800000;">"</span><span style="color: #800000;">adminGoods</span><span style="color: #800000;">"</span><span style="color: #000000;">),
</span><span style="color: #008080;">3</span> (r<span style="color: #800000;">"</span><span style="color: #800000;">/admin/goods/classify</span><span style="color: #800000;">"</span>, handlers.admin.Goods, {<span style="color: #800000;">"</span><span style="color: #800000;">action</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">classify</span><span style="color: #800000;">"</span>}, <span style="color: #800000;">"</span><span style="color: #800000;">adminGoodsClassify</span><span style="color: #800000;">"</span><span style="color: #000000;">),
</span><span style="color: #008080;">4</span> (r<span style="color: #800000;">"</span><span style="color: #800000;">/admin/goods/group</span><span style="color: #800000;">"</span>, handlers.admin.Goods, {<span style="color: #800000;">"</span><span style="color: #800000;">action</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">group</span><span style="color: #800000;">"</span>}, <span style="color: #800000;">"</span><span style="color: #800000;">adminGoodsGroup</span><span style="color: #800000;">"</span><span style="color: #000000;">),
</span><span style="color: #008080;">5</span> (r<span style="color: #800000;">"</span><span style="color: #800000;">/admin/goods/delete</span><span style="color: #800000;">"</span>, handlers.admin.Goods, {<span style="color: #800000;">"</span><span style="color: #800000;">action</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">delete</span><span style="color: #800000;">"</span>}, <span style="color: #800000;">"</span><span style="color: #800000;">adminGoodsDelete</span><span style="color: #800000;">"</span><span style="color: #000000;">),
</span><span style="color: #008080;">6</span> ...</pre>
</div>
<p>　　　　　　③在admin.py的Goods类中,有初始化方法:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@tornado.web.authenticated
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> initialize(self,action);
</span><span style="color: #008080;">3</span> 　　self._action = action</pre>
</div>
<p>　　　　　　④在Goods类的get方法中调用action:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@AdminBaseHandler.check_arguments(...)
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> get(self):
</span><span style="color: #008080;">3</span>     action =<span style="color: #000000;"> self._action
</span><span style="color: #008080;">4</span>     ...</pre>
</div>
<p>　　　　　　⑤reverse_url是tornado自带的函数,用来根据name来反查url.<br />　　　　(2)static_url,也是tornado自带的函数:<br />　　　　　　①在application.py文件的setting中有:static_path=os.path.join(os.path.dirname(__file__),"static")<br />　　　　　　②在template/index.html中有:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">link </span><span style="color: #ff0000;">rel</span><span style="color: #0000ff;">="stylesheet"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="text/css"</span><span style="color: #ff0000;"> href</span><span style="color: #0000ff;">="{{ static_url('css/style.css')}}"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">3</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　2、 python销毁一个变量x:del x</p>
<p>　　3、 js中ajax的使用:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> getData(action,id,page){
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">var</span><span style="color: #000000;"> url;
</span><span style="color: #008080;"> 3</span> url = "/admin/goods/all?action=" + action + "&amp;id=" + id + "&amp;page=" +<span style="color: #000000;"> page;
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">$.ajax({
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">url:url,
</span><span style="color: #008080;"> 6</span> type:"get"<span style="color: #000000;">,
</span><span style="color: #008080;"> 7</span> success:<span style="color: #0000ff;">function</span><span style="color: #000000;">(res){
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">if</span><span style="color: #000000;">(res.success){
</span><span style="color: #008080;"> 9</span> output_data =<span style="color: #000000;"> res.output_data;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">console.log(output_data);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">}
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">13</span> <span style="color: #000000;">Tip(res.error_text);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">}
</span><span style="color: #008080;">15</span> <span style="color: #000000;">}
</span><span style="color: #008080;">16</span> <span style="color: #000000;">})    
</span><span style="color: #008080;">17</span> }</pre>
</div>
<p>　　　　然后在后台的相应类的get方法中要这样写:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">...
</span><span style="color: #008080;">2</span> @AdminBaseHandler.check_arguments(<span style="color: #800000;">"</span><span style="color: #800000;">action:str</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">id:int</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">page:int</span><span style="color: #800000;">"</span><span style="color: #000000;">)
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> get(self):
</span><span style="color: #008080;">4</span>     action = self.args[<span style="color: #800000;">"</span><span style="color: #800000;">action</span><span style="color: #800000;">"</span><span style="color: #000000;">]
</span><span style="color: #008080;">5</span>     id = self.args[<span style="color: #800000;">"</span><span style="color: #800000;">id</span><span style="color: #800000;">"</span><span style="color: #000000;">]
</span><span style="color: #008080;">6</span>     page = self.args[<span style="color: #800000;">"</span><span style="color: #800000;">page</span><span style="color: #800000;">"</span><span style="color: #000000;">]
</span><span style="color: #008080;">7</span>     output_data =<span style="color: #000000;"> [action,id,page]
</span><span style="color: #008080;">8</span>     <span style="color: #0000ff;">return</span> self.render(<span style="color: #800000;">"</span><span style="color: #800000;">admin/goods-all.html</span><span style="color: #800000;">"</span>,output_data=<span style="color: #000000;">output_data)
</span><span style="color: #008080;">9</span>     ...</pre>
</div>
<p>　　4、 js实现这样一个功能：点击一个页面A中的a标签跳到另外一个页面B,同时向B页面的后台发送请求返回相应的数据刷新页面:<br />　　　　(1)在A页面的html文件中为要添加跳转链接的a标签的href属性赋值（包括js中动态添加的a标签也要赋值）,其中前半部分为要跳转到的B页面的url,后半部分为自定义的要传递的参数．这里的data["user_id"]需要提前向A页面的后台请求获取到．</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="/super/user?out_link=true&amp;&amp;data_id={{data["</span><span style="color: #ff0000;">user_id"]}}" ...</span><span style="color: #0000ff;">&gt;</span>...<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　或者用reverse_url函数：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="{{reverse_url('superUser')}}?out_link=true&amp;&amp;data_id={{data["</span><span style="color: #ff0000;">user_id"]}}" ...</span><span style="color: #0000ff;">&gt;</span>...<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　(2)在B页面的js中的$(document).ready(function(){})中添加类似于如下的代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> out_link = $.getUrlParam("out_link"<span style="color: #000000;">);
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">if</span>(out_link == "true"<span style="color: #000000;">){
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">var</span> data_id = $.getUrlParam("data_id"<span style="color: #000000;">);
</span><span style="color: #008080;">4</span> page = 0<span style="color: #000000;">;
</span><span style="color: #008080;">5</span> getSearchContent('out_link',data_id,page); <span style="color: #008000;">//</span><span style="color: #008000;">这里getSearchContent为B页面的js中原来就有的搜索函数，这里借用一下，只是把action</span>
<span style="color: #008080;">6</span> <span style="color: #008000;">//</span><span style="color: #008000;">从'search'改成了'out_link',把传给后台的参数从inputinfo改成了data_id</span>
<span style="color: #008080;">7</span> <span style="color: #008000;">//</span><span style="color: #008000;">当然也可以自己重新再写一个函数向后台请求数据．</span>
<span style="color: #008080;">8</span> }</pre>
</div>
<p>　　　　(3)在B页面的后台中，增加如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">...
</span><span style="color: #008080;">2</span> action = self.args[<span style="color: #800000;">"</span><span style="color: #800000;">action</span><span style="color: #800000;">"</span><span style="color: #000000;">]
</span><span style="color: #008080;">3</span> <span style="color: #000000;">...
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">if</span> action == <span style="color: #800000;">"</span><span style="color: #800000;">out_link</span><span style="color: #800000;">"</span><span style="color: #000000;">:
</span><span style="color: #008080;">5</span> user_id = int(self.args[<span style="color: #800000;">"</span><span style="color: #800000;">inputinfo</span><span style="color: #800000;">"</span>])　　//这里的参数inputinfo正是(2<span style="color: #000000;">)中js传过来的参数data_id.
</span><span style="color: #008080;">6</span> q = q.filter(models.Accountinfo.id ==<span style="color: #000000;"> user_id)
</span><span style="color: #008080;">7</span> ... <span style="color: #008000;">#</span><span style="color: #008000;">后面的是对q进行处理从而返回给js数据的代码</span></pre>
</div>
<p>　　　　注:跳转后要把跳转到的页面的"上一页/下一页"按钮隐藏掉</p>
<p>　　5、 python eval函数的强大:<br />　　　　可以将字符串str当成有效的表达式来求值并返回计算结果。<br />　　　　例如:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">if</span> sort_way = <span style="color: #800000;">"</span><span style="color: #800000;">group</span><span style="color: #800000;">"</span><span style="color: #000000;">:
</span><span style="color: #008080;">2</span>     case = <span style="color: #800000;">'</span><span style="color: #800000;">models.Fruit.group_id</span><span style="color: #800000;">'</span>
<span style="color: #008080;">3</span> <span style="color: #0000ff;">elif</span> sort_way = <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span><span style="color: #000000;">:
</span><span style="color: #008080;">4</span>     case = <span style="color: #800000;">'</span><span style="color: #800000;">models.Fruit.fruit_type_id</span><span style="color: #800000;">'</span>
<span style="color: #008080;">5</span>     goods = self.session.query(models.Fruit.name).order_by(eval(case_one)).all()</pre>
</div>
<p>　　6、 mysql中按照拼音排序的方法:<br />　　　　select name from user order by convert(name using gbk) asc;<br />　　　　但这种方法在sqlalchemy中用不了,无论是这样用:<br />　　　　　　name_list = self.session.query(models.User.name).order_by(func.convert(models.User.name.using('gbk'))<br />　　　　还是这样用:<br />　　　　　　name_list = self.session.query(models.User.name).order_by(func.convert(models.User.name,'gbk'))<br />　　　　或者这样用:<br />　　　　　　name_list = self.session.query(models.User.name).order_by(func.convert(models.User.name,'gbk','utf-8'))<br />　　　　或者这样用:<br />　　　　　　name_list = self.session.query(models.User.name).order_by(func.encode(models.User.name,'gbk'))<br />　　　　结果都会报错,看来sqlalchemy是不支持这种编码转换的.</p>
<p>【8.8 周六】</p>
<p>　　1、 python 3中只有unicode str，把decode方法去掉了<br />　　2、 python多维排序示例(用operator):</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt;&gt;&gt; <span style="color: #0000ff;">from</span> operator <span style="color: #0000ff;">import</span><span style="color: #000000;"> itemgetter
</span><span style="color: #008080;">2</span> &gt;&gt;&gt; c = [[1,2,5],[2,43,23],[1,1,32],[3,34,6],[3,2,5],[3,2,4<span style="color: #000000;">]]
</span><span style="color: #008080;">3</span> &gt;&gt;&gt; c.sort(key=operator.itemgetter(0,1,2<span style="color: #000000;">))
</span><span style="color: #008080;">4</span> &gt;&gt;&gt;<span style="color: #000000;"> c
</span><span style="color: #008080;">5</span> [[1, 1, 32], [1, 2, 5], [2, 43, 23], [3, 2, 4], [3, 2, 5], [3, 34, 6<span style="color: #000000;">]]
</span><span style="color: #008080;">6</span> &gt;&gt;&gt; b = [{<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 211, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 100}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 21, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 100}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 323, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 101}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 12, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 100<span style="color: #000000;">}]
</span><span style="color: #008080;">7</span> &gt;&gt;&gt; b.sort(key = itemgetter(<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span><span style="color: #000000;">))
</span><span style="color: #008080;">8</span> &gt;&gt;&gt;<span style="color: #000000;"> b
</span><span style="color: #008080;">9</span> [{<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 12, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 100}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 21, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 100}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 211, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 100}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 323, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 101}]</pre>
</div>
<p>　　3、 因为gbk/gb2312的坑爹编码方式,前几千个一级汉子是连续的且按拼音排序的，但后面的汉子却不是按照拼音排序的，所以中文拼音排序仍然还是一个问题,有待解决.</p>
<p>　　4、 gb2312是gbk的子集,两者都是16位的,gbk是gb18030的子集,gb18030是32位的.</p>
<p>　　5、 总后台用户名链接的精确跳转的a标签href属性设置：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> href="/super/user?out_link=true&amp;<span style="color: #ff0000;">&amp;data_id</span><span style="color: #000000;">={{shop.admin.accountinfo.id}}" target="_blank" title="点击查看用户详细信息"
</span><span style="color: #008080;">2</span> href="{{reverse_url('superUser')}}?out_link=true&amp;<span style="color: #ff0000;">&amp;data_id</span>={{shop.admin.accountinfo.id}}" target="_blank" title="点击查看用户详细信息"</pre>
</div>
<p>&nbsp;</p>
<p>【8.10 周一】</p>
<p>　　1、 sqlalchemy执行原生sql语句的方法:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> entries = self.session.execute(<span style="color: #800000;">"</span><span style="color: #800000;">select name from fruit where shop_id = 4</span><span style="color: #800000;">"</span><span style="color: #000000;">)
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">print</span><span style="color: #000000;">(entries)
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">for</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> entries:
</span><span style="color: #008080;">4</span>  　　<span style="color: #0000ff;">print</span>(item)</pre>
</div>
<p>　　　　输出结果为：<br />　　　　&lt;sqlalchemy.engine.result.ResultProxy object at 0x7f771a669860&gt;<br />　　2、 近期的店铺后台加了防DDoS攻击的代码，因此导致如果后台操作过于频繁会出现503错误，之前写的销售统计也会出现这个问题．<br />　　　　解决方法：在js中每次发post请求之前都进行延时(这里延时了250ms)<br />　　3、 503错误:503 (Service Temporarily Unavailable)：<br />　　　　日志文件中，其中的s-reason项：<br />　　　　(1)若为AppShutdown，可能是由于CPU占用率太高导致自动关闭应用程序池。<br />　　　　(2)若为AppOffline，可能是由于应用程序标识出错引起的。<br />　　　　(3)若为Disabled，可能是由管理员手工关闭应用程序池引起的。<br />　　　　(4)若为QueueFull，可能是因为请求时应用程序池队列已满而生成该错误。<br />　　4、 DDos攻击的比喻说明：<br />　　一群恶霸试图让对面那家有着竞争关系的商铺无法正常营业，他们会采取什么手段呢？（只为举例，切勿模仿）恶霸们扮作普通客户一直拥挤在对手的商铺，赖着不走，真正的购物者却无法进入；或者总是和营业员有一搭没一搭的东扯西扯，让工作人员不能正常服务客户；也可以为商铺的经营者提供虚假信息，商铺的上上下下忙成一团之后却发现都是一场空，最终跑了真正的大客户，损失惨重。此外恶霸们完成这些坏事有时凭单干难以完成，需要叫上很多人一起。嗯，网络安全领域中DoS和DDoS攻击就遵循着这些思路。<br />　　在信息安全的三要素&mdash;&mdash;&ldquo;保密性&rdquo;、&ldquo;完整性&rdquo;和&ldquo;可用性&rdquo;中，DoS（Denial of Service），即拒绝服务攻击，针对的目标正是&ldquo;可用性&rdquo;。该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。<br />　　DdoS的攻击方式有很多种，最基本的DoS攻击就是利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应。单一的DoS攻击一般是采用一对一方式的，当攻击目标CPU速度低、内存小或者网络带宽小等等各项指标不高的性能，它的效果是明显的。随着计算机与网络技术的发展，计算机的处理能力迅速增长，内存大大增加，同时也出现了千兆级别的网络，这使得DoS攻击的困难程度加大了-目标对恶意攻击包的"消化能力"加强了不少。这时候分布式的拒绝服务攻击手段（DDoS）就应运而生了。DDoS就是利用更多的傀儡机（肉鸡）来发起进攻，以比从前更大的规模来进攻受害者.<br />　　5、 总后台余额和对账有bug，提示404错误和一个返回数据undefined错误.<br />　　　　错误原因：一个公用的html文件引入了子html文件的js，导致查询不到数据，把这个多余的js去掉即可.<br />　　6、 如何提高python服务器的并发度？瓶颈在哪？如何打破瓶颈？<br />　　　　node.js和python的区别．<br />　　　　操作系统/linux的知识．<br />　　　　缓存持久化<br />　　7、 压缩的js或html文件还原工具：<a href="http://jsbeautifier.org/">http://jsbeautifier.org/</a><br />　　8、 新功能：后台-用户管理的排序规则完善：建议添加用户积分、充值金额的排序规则．<br />　　9、 用get方法代替post,比较简单!方法总结.<br />　　10、 联合查询后的分页问题(分页错乱)．<br />【8.11 周二】</p>
<p>　　今日任务：de各种bug,增加店铺后台用户管理的排序功能．<br />　　新功能：商品秒杀的店铺后台前端与后端实现．<br />　　1、 昨天的任务完成!分页错乱的问题是因为联合查询的时候没有筛选店铺id导致的．<br />　　2、 下拉选择按钮的实现总结：<br />　　(1)首先在html的适当位置加入如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="pull-right set-right10"</span><span style="color: #0000ff;">&gt;</span> 
<span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tit cate-title"</span><span style="color: #0000ff;">&gt;</span>排序规则：<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="dropdown slide-down-select w130"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 4</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="btn btn-default dropdown-toggle area height25 slide-btn"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="dropdownMenu1"</span><span style="color: #ff0000;"> data-toggle</span><span style="color: #0000ff;">="dropdown"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span>                     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">em </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="pull-left filter_status"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="cur-sort-way"</span><span style="color: #ff0000;"> data-id</span><span style="color: #0000ff;">="time"</span><span style="color: #0000ff;">&gt;</span>关注时间<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">em</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span>                     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="caret pull-right no-margin-left rotate0"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 7</span>                 <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 8</span>                 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="dropdown-menu dropdown-menu-right w130 condition-list"</span><span style="color: #ff0000;"> role</span><span style="color: #0000ff;">="menu"</span><span style="color: #ff0000;"> aria-labelledby</span><span style="color: #0000ff;">="dropdownMenu1"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="sort-way-list"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 9</span>                         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">data-id</span><span style="color: #0000ff;">="time"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="item sort-time"</span><span style="color: #0000ff;">&gt;</span>关注时间<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">10</span>                         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">data-id</span><span style="color: #0000ff;">="point"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="item sort-point"</span><span style="color: #0000ff;">&gt;</span>用户积分<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">11</span>                         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li </span><span style="color: #ff0000;">data-id</span><span style="color: #0000ff;">="balance"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="item sort-balance"</span><span style="color: #0000ff;">&gt;</span>账户余额<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">12</span>                 <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">13</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">14</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　　　分析：①最外层的li有两个css属性，分别是向右浮动和右边距为10.css样式如下：<br />　　　　　　　　.pull-right{float:right !important;}<br />　　　　　　　　.set-right10{margin-right:10px;}<br />　　　　　　②第一个div有两个css属性,分别如下：<br />　　　　　　　　.tit{display:inline-block;overflow:hidden;}<br />　　　　　　　　.cate-title{font-size: 14px;color: #999;height: 28px;line-height: 28px;float: left;margin-right: 5px;}<br />　　　　　　③第三个div,有三个css属性，第一个属性用于下面的判断，后面两个属性分别如下：<br />　　　　　　　　.slide-down-select{display:inline-block;width:100%;background:#fff;color:#000;border:1px solid #ddd;margin-left:0;}<br />　　　　　　　　.w130{width:130px !important;}<br />　　　　　　④button中有很多属性，btn属性如下：<br />　　　　　　　　.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none; -ms-user-select:none;user-select:none;background-image:none;border:1px solid transparent;border-radius: 6px;}<br />　　　　　　⑤btn-default属性如下(应该是bootstrap自带属性)：<br />　　　　　　　　.btn-default{color:#333;background-color:#fff;border-color:#ccc}<br />　　　　　　　　data-toggle为数据切换属性．<br />　　　　　　⑥其他属性如下：<br />　　　　　　　　.dropdown-toggle{padding:0 4px;}<br />　　　　　　　　.area{display:inline-block;width:100%;background:#fff;color:#222;border:1px solid #e7e7eb;margin-left:0;}<br />　　　　　　　　.height25{height:25px;}<br />　　　　　　　　.slide-down-select .slide-btn{height: 24px;line-height: 24px;display: block;border: none;outline: none;width: 100%;}<br />　　　　　　⑦所有属性整理如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #800000;">.dropdown-menu</span>{<span style="color: #ff0000;">overflow</span>:<span style="color: #0000ff;"> hidden</span>;<span style="color: #ff0000;">max-height</span>:<span style="color: #0000ff;"> 210px</span>;<span style="color: #ff0000;">overflow-y</span>:<span style="color: #0000ff;"> auto</span>;}
<span style="color: #008080;"> 2</span> <span style="color: #800000;">.category-list&gt;li</span>{<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;"> left</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;"> 25%</span>;}
<span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #800000;">.cate-title</span>{<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;"> 14px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #999</span>;<span style="color: #ff0000;">height</span>:<span style="color: #0000ff;"> 28px</span>;<span style="color: #ff0000;">line-height</span>:<span style="color: #0000ff;"> 28px</span>;<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;"> left</span>;<span style="color: #ff0000;">margin-right</span>:<span style="color: #0000ff;"> 5px</span>;}
<span style="color: #008080;"> 5</span> <span style="color: #800000;">.slide-down-select</span>{<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;">inline-block</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">100%</span>;<span style="color: #ff0000;">background</span>:<span style="color: #0000ff;">#fff</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;">#000</span>;<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;">1px solid #ddd</span>;<span style="color: #ff0000;">margin-left</span>:<span style="color: #0000ff;">0</span>;}
<span style="color: #008080;"> 6</span> <span style="color: #800000;">.slide-down-select .slide-btn</span>{<span style="color: #ff0000;">height</span>:<span style="color: #0000ff;"> 24px</span>;<span style="color: #ff0000;">line-height</span>:<span style="color: #0000ff;"> 24px</span>;<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;"> block</span>;<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;"> none</span>;<span style="color: #ff0000;">outline</span>:<span style="color: #0000ff;"> none</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;"> 100%</span>;}
<span style="color: #008080;"> 7</span> <span style="color: #800000;">.slide-down-select em</span>{<span style="color: #ff0000;">font-style</span>:<span style="color: #0000ff;">normal</span>;<span style="color: #ff0000;">display</span>:<span style="color: #0000ff;">inline-block</span>;<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">110px</span>;<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;">14px</span>;<span style="color: #ff0000;">overflow</span>:<span style="color: #0000ff;">hidden</span>;<span style="color: #ff0000;">padding-left</span>:<span style="color: #0000ff;"> 10px</span>;<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> left</span>;}
<span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #800000;">.dropdown-toggle</span>{<span style="color: #ff0000;">padding</span>:<span style="color: #0000ff;">0 4px</span>;}
<span style="color: #008080;">10</span> <span style="color: #800000;">.dropdown-menu li</span>{<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">100%</span>;<span style="color: #ff0000;">padding</span>:<span style="color: #0000ff;">0</span>;}
<span style="color: #008080;">11</span> <span style="color: #800000;">.dropdown-menu .item</span>{<span style="color: #ff0000;">padding-left</span>:<span style="color: #0000ff;">14px</span>;}
<span style="color: #008080;">12</span> <span style="color: #800000;">.dropdown-menu li a:hover</span>{<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;">#fff</span>;<span style="color: #ff0000;">background-color</span>:<span style="color: #0000ff;"> #6ba4ef</span>;}
<span style="color: #008080;">13</span> <span style="color: #800000;">.caret</span>{<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;">10px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #c6c6c6</span>;}
<span style="color: #008080;">14</span> <span style="color: #800000;">.borderc</span>{<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;"> 1px solid #e7e7eb</span>;}
<span style="color: #008080;">15</span> <span style="color: #800000;">.pointer</span>{<span style="color: #ff0000;">cursor</span>:<span style="color: #0000ff;"> pointer</span>;}
<span style="color: #008080;">16</span> <span style="color: #800000;">.min80</span>{<span style="color: #ff0000;">min-width</span>:<span style="color: #0000ff;"> 80px</span>;}
<span style="color: #008080;">17</span> <span style="color: #800000;">.mt2</span>{<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;"> 2px</span>;}
<span style="color: #008080;">18</span> <span style="color: #800000;">.txt-center</span>{<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> center !important</span>;}
<span style="color: #008080;">19</span> <span style="color: #800000;">.txt-left</span>{<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> left !important</span>;}
<span style="color: #008080;">20</span> <span style="color: #800000;">.hig</span>{<span style="color: #ff0000;">border</span>:<span style="color: #0000ff;"> 1px dashed #ff6666 !important</span>;}
<span style="color: #008080;">21</span> <span style="color: #800000;">.no-title</span>{<span style="color: #ff0000;">font-size</span>:<span style="color: #0000ff;"> 20px</span>;<span style="color: #ff0000;">text-align</span>:<span style="color: #0000ff;"> center</span>;<span style="color: #ff0000;">margin-top</span>:<span style="color: #0000ff;"> 40px</span>;<span style="color: #ff0000;">color</span>:<span style="color: #0000ff;"> #333</span>;}
<span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #800000;">.pull-left</span>{<span style="color: #ff0000;">float</span>:<span style="color: #0000ff;">left !important</span>;}
<span style="color: #008080;">24</span> <span style="color: #800000;">.w130</span>{<span style="color: #ff0000;">width</span>:<span style="color: #0000ff;">130px !important</span>;}
<span style="color: #008080;">25</span> <span style="color: #800000;">.ml20</span>{<span style="color: #ff0000;">margin-left</span>:<span style="color: #0000ff;"> 20px</span>;}</pre>
</div>
<p>　　　　(2)然后在js中要为ul中的li添加点击事件，点击事件要做两件事，一是点击的时候为em的text赋值为当前li的a标签的text,二是要调用相关函数向后台发post请求显示数据．<br />　　　　(3)ul在一开始的时候也可以是空的，在js中先向后台发post请求获取ul的项的数据，然后在js中动态添加上去，再添加点击事件．<br />　　3、 用get方法替代post方法请求数据的方法(这种方法特别适合于页面结构特别复杂，写artTemplate很困难的情况的数据请求，也适合于翻页的数据请求)：<br />　　　　(1)先在后台写get方法，设置所需的参数检查，比如：<br />　　　　　　@AdminBaseHandler.check_arguments("order_by:str","page:int")<br />　　　　　　其中order_by表示在url中的排序方式参数，page表示页码．<br />　　　　(2)在get方法中根据order_by和page向数据库查询数据，并做排序和分页处理，然后用数据渲染页面．<br />　　　　(3)在js中，将order_by和page设置为全局变量，利用下拉选项按钮的点击事件改变order_by的值，利用上一页和下一页按钮的点击事件改变page的值，然后在这些点击事件中用这样的方法向后台请求数据和刷新页面：<br />　　　　　　var url = "/XXX?order_by="+order_by+"&amp;&amp;page="+page;<br />　　　　　　window.location.href = url;<br />　　　　当然这只是一个简单的例子，还可以添加更为复杂的参数．<br />　　　　注：在后台参数检查的时候判断某一个参数是否不在参数列表中的方法：<br />　　　　if 'page' in self.args:<br />&nbsp;　　　　　　...<br />　　4、 数据库联合查询：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> (<span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">)mysql中，建立了两个表A和B:
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span> A (aID <span style="color: #0000ff;">int</span> auto_increment <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span>,aNum <span style="color: #0000ff;">char</span>(<span style="color: #800000; font-weight: bold;">10</span><span style="color: #000000;">));
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span> B(bID <span style="color: #0000ff;">int</span> <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> auto_increment <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span>,bName <span style="color: #0000ff;">char</span>(<span style="color: #800000; font-weight: bold;">10</span><span style="color: #000000;">));
</span><span style="color: #008080;"> 4</span> (<span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;">)向A和B表中插入数据，结果如下：
</span><span style="color: #008080;"> 5</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span><span style="color: #000000;"> A;
</span><span style="color: #008080;"> 6</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+</span>
<span style="color: #008080;"> 7</span> <span style="color: #808080;">|</span> aID <span style="color: #808080;">|</span> aNum <span style="color: #808080;">|</span>
<span style="color: #008080;"> 8</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+</span>
<span style="color: #008080;"> 9</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> a101 <span style="color: #808080;">|</span>
<span style="color: #008080;">10</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> a102 <span style="color: #808080;">|</span>
<span style="color: #008080;">11</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> a103 <span style="color: #808080;">|</span>
<span style="color: #008080;">12</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> a104 <span style="color: #808080;">|</span>
<span style="color: #008080;">13</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">|</span> a105 <span style="color: #808080;">|</span>
<span style="color: #008080;">14</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+</span>
<span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span><span style="color: #000000;"> B;
</span><span style="color: #008080;">17</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+-------+</span>
<span style="color: #008080;">18</span> <span style="color: #808080;">|</span> bID <span style="color: #808080;">|</span> bName <span style="color: #808080;">|</span>
<span style="color: #008080;">19</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+-------+</span>
<span style="color: #008080;">20</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> b201  <span style="color: #808080;">|</span>
<span style="color: #008080;">21</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> b202  <span style="color: #808080;">|</span>
<span style="color: #008080;">22</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> b203  <span style="color: #808080;">|</span>
<span style="color: #008080;">23</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> b204  <span style="color: #808080;">|</span>
<span style="color: #008080;">24</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">8</span> <span style="color: #808080;">|</span> b209  <span style="color: #808080;">|</span>
<span style="color: #008080;">25</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+-------+</span>
<span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> (<span style="color: #800000; font-weight: bold;">3</span>)测试左联接(<span style="color: #808080;">left</span> <span style="color: #808080;">join</span><span style="color: #000000;">):
</span><span style="color: #008080;">28</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> A <span style="color: #808080;">left</span> <span style="color: #808080;">join</span> B <span style="color: #0000ff;">on</span> A.aID <span style="color: #808080;">=</span><span style="color: #000000;"> B.bID;
</span><span style="color: #008080;">29</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+------+-------+</span>
<span style="color: #008080;">30</span> <span style="color: #808080;">|</span> aID <span style="color: #808080;">|</span> aNum <span style="color: #808080;">|</span> bID  <span style="color: #808080;">|</span> bName <span style="color: #808080;">|</span>
<span style="color: #008080;">31</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+------+-------+</span>
<span style="color: #008080;">32</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> a101 <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> b201  <span style="color: #808080;">|</span>
<span style="color: #008080;">33</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> a102 <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> b202  <span style="color: #808080;">|</span>
<span style="color: #008080;">34</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> a103 <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> b203  <span style="color: #808080;">|</span>
<span style="color: #008080;">35</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> a104 <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> b204  <span style="color: #808080;">|</span>
<span style="color: #008080;">36</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">5</span> <span style="color: #808080;">|</span> a105 <span style="color: #808080;">|</span> <span style="color: #0000ff;">NULL</span> <span style="color: #808080;">|</span> <span style="color: #0000ff;">NULL</span>  <span style="color: #808080;">|</span>
<span style="color: #008080;">37</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+------+-------+</span>
<span style="color: #008080;">38</span> <span style="color: #800000; font-weight: bold;">5</span> rows <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">39</span> 结果分析：<span style="color: #808080;">left</span> join是以A表的记录为基础的，A表可以看成是左表，B表可以看成是右表，<span style="color: #808080;">left</span><span style="color: #000000;"> join是以左表为基准的.换句话说，作为基准的左表(A)的记录将会全部表示出来，而右表(B)
</span><span style="color: #008080;">40</span> 
<span style="color: #008080;">41</span> 只会显示符合搜索条件的记录（上例中为：B.bID<span style="color: #808080;">=</span><span style="color: #000000;">A.aID）,B表没有记录的地方都为NULL.
</span><span style="color: #008080;">42</span> 
<span style="color: #008080;">43</span> (<span style="color: #800000; font-weight: bold;">4</span>)测试右联接(<span style="color: #808080;">right</span> <span style="color: #808080;">join</span><span style="color: #000000;">):
</span><span style="color: #008080;">44</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> A <span style="color: #808080;">right</span> <span style="color: #808080;">join</span> B <span style="color: #0000ff;">on</span> A.aID <span style="color: #808080;">=</span><span style="color: #000000;"> B.bID;
</span><span style="color: #008080;">45</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+------+-----+-------+</span>
<span style="color: #008080;">46</span> <span style="color: #808080;">|</span> aID  <span style="color: #808080;">|</span> aNum <span style="color: #808080;">|</span> bID <span style="color: #808080;">|</span> bName <span style="color: #808080;">|</span>
<span style="color: #008080;">47</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+------+-----+-------+</span>
<span style="color: #008080;">48</span> <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> a101 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> b201  <span style="color: #808080;">|</span>
<span style="color: #008080;">49</span> <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> a102 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> b202  <span style="color: #808080;">|</span>
<span style="color: #008080;">50</span> <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> a103 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> b203  <span style="color: #808080;">|</span>
<span style="color: #008080;">51</span> <span style="color: #808080;">|</span>    <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> a104 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> b204  <span style="color: #808080;">|</span>
<span style="color: #008080;">52</span> <span style="color: #808080;">|</span> <span style="color: #0000ff;">NULL</span> <span style="color: #808080;">|</span> <span style="color: #0000ff;">NULL</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">8</span> <span style="color: #808080;">|</span> b209  <span style="color: #808080;">|</span>
<span style="color: #008080;">53</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">----+------+-----+-------+</span>
<span style="color: #008080;">54</span> <span style="color: #800000; font-weight: bold;">5</span> rows <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">55</span> <span style="color: #000000;">结果分析：刚好和left join的结果相反，这次是以右表(B)为基准的，A表不足的地方用NULL填充．
</span><span style="color: #008080;">56</span> 
<span style="color: #008080;">57</span> 
<span style="color: #008080;">58</span> (<span style="color: #800000; font-weight: bold;">5</span>)测试inner <span style="color: #808080;">join</span><span style="color: #000000;">(相等联接或内联接)
</span><span style="color: #008080;">59</span> mysql<span style="color: #808080;">&gt;</span> <span style="color: #0000ff;">select</span> <span style="color: #808080;">*</span> <span style="color: #0000ff;">from</span> A <span style="color: #0000ff;">inner</span> <span style="color: #808080;">join</span> B <span style="color: #0000ff;">on</span> A.aID <span style="color: #808080;">=</span><span style="color: #000000;"> B.bID;
</span><span style="color: #008080;">60</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+-----+-------+</span>
<span style="color: #008080;">61</span> <span style="color: #808080;">|</span> aID <span style="color: #808080;">|</span> aNum <span style="color: #808080;">|</span> bID <span style="color: #808080;">|</span> bName <span style="color: #808080;">|</span>
<span style="color: #008080;">62</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+-----+-------+</span>
<span style="color: #008080;">63</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> a101 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">1</span> <span style="color: #808080;">|</span> b201  <span style="color: #808080;">|</span>
<span style="color: #008080;">64</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> a102 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">2</span> <span style="color: #808080;">|</span> b202  <span style="color: #808080;">|</span>
<span style="color: #008080;">65</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> a103 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">3</span> <span style="color: #808080;">|</span> b203  <span style="color: #808080;">|</span>
<span style="color: #008080;">66</span> <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> a104 <span style="color: #808080;">|</span>   <span style="color: #800000; font-weight: bold;">4</span> <span style="color: #808080;">|</span> b204  <span style="color: #808080;">|</span>
<span style="color: #008080;">67</span> <span style="color: #808080;">+</span><span style="color: #008080;">--</span><span style="color: #008080;">---+------+-----+-------+</span>
<span style="color: #008080;">68</span> <span style="color: #800000; font-weight: bold;">4</span> rows <span style="color: #808080;">in</span> <span style="color: #0000ff;">set</span> (<span style="color: #800000; font-weight: bold;">0.00</span><span style="color: #000000;"> sec)
</span><span style="color: #008080;">69</span> <span style="color: #000000;">结果分析：这次只列出了A.aID和B.bID相等且不为NULL的记录，并不以哪个表为基准．
</span><span style="color: #008080;">70</span> 
<span style="color: #008080;">71</span> <span style="color: #000000;">注：数据库中表名是分大小写的．
</span><span style="color: #008080;">72</span> sqlalchemy中只有join和outerjoin(为左外联接)．</pre>
</div>
<p>　　5、 QQ分享API</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> &lt;script type="text/javascript"&gt;
<span style="color: #008080;"> 2</span> (<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">var</span> p =<span style="color: #000000;"> {
</span><span style="color: #008080;"> 4</span> url:location.href, <span style="color: #008000;">/*</span><span style="color: #008000;">获取URL，可加上来自分享到QQ标识，方便统计</span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 5</span> desc:'', <span style="color: #008000;">/*</span><span style="color: #008000;">分享理由(风格应模拟用户对话),支持多分享语随机展现（使用|分隔）</span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 6</span> title:'', <span style="color: #008000;">/*</span><span style="color: #008000;">分享标题(可选)</span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 7</span> summary:'', <span style="color: #008000;">/*</span><span style="color: #008000;">分享摘要(可选)</span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 8</span> pics:'', <span style="color: #008000;">/*</span><span style="color: #008000;">分享图片(可选)</span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 9</span> flash: '', <span style="color: #008000;">/*</span><span style="color: #008000;">视频地址(可选)</span><span style="color: #008000;">*/</span>
<span style="color: #008080;">10</span> site:'', <span style="color: #008000;">/*</span><span style="color: #008000;">分享来源(可选) 如：QQ分享</span><span style="color: #008000;">*/</span>
<span style="color: #008080;">11</span> style:'101'<span style="color: #000000;">,
</span><span style="color: #008080;">12</span> width:96<span style="color: #000000;">,
</span><span style="color: #008080;">13</span> height:24
<span style="color: #008080;">14</span> <span style="color: #000000;">};
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">var</span> s =<span style="color: #000000;"> [];
</span><span style="color: #008080;">16</span> <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> i <span style="color: #0000ff;">in</span><span style="color: #000000;"> p){
</span><span style="color: #008080;">17</span> s.push(i + '=' + encodeURIComponent(p[i]||''<span style="color: #000000;">));
</span><span style="color: #008080;">18</span> <span style="color: #000000;">}
</span><span style="color: #008080;">19</span> document.write(['&lt;a class="qcShareQQDiv" href="http://connect.qq.com/widget/shareqq/index.html?',s.join('&amp;'),'" target="_blank"&gt;分享到QQ&lt;/a&gt;'].join(''<span style="color: #000000;">));
</span><span style="color: #008080;">20</span> <span style="color: #000000;">})();
</span><span style="color: #008080;">21</span> &lt;/script&gt;
<span style="color: #008080;">22</span> &lt;script src="http://connect.qq.com/widget/loader/loader.js" widget="shareqq" charset="utf-8"&gt;&lt;/script&gt;</pre>
</div>
<p>　　6、 商品秒杀(seckill)任务分析：<br />　　　　(1)原型图中'点击查看使用教程'的跳转链接为：'/bbs/detail/xxx',其中'xxx'为bbs中教程的编号，是一个整数．<br />　　　　(2)原型-秒杀管理中，列表中'秒杀商品后面的数字去掉；'领取/下单/库存'列的数值为秒杀商品的总数．<br />　　　　　　('领取'是个什么意思？？)<br />　　　　(3)当过了秒杀的时间，该行秒杀管理文字颜色全部变为灰色，操作为：'已结束'．<br />　　　　(4)当点击'停用'时，该行秒杀管理文字全部变为灰色，操作为：'已失效'．<br />　　　　(5)未开始状态下，'编辑'的选项都可使用；进行中，只能编辑库存．<br />　　　　(6))原型-新建秒杀中，商品名需要细分至具体的商品名，不能为整组秒杀（这里的商品名是指商品类目名还是单个商品名？？）<br />　　　　(7)原型-新建秒杀中，原价显示该商品所有的价格，为单选．<br />　　　　(8)数据库表设计：<br />　　　　*表名：seckill<br />　　　　*各列分析:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> id(该条秒杀数据项的id,id<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span>False,primary_key<span style="color: #808080;">=</span><span style="color: #000000;">True))
</span><span style="color: #008080;"> 2</span> activity_id(秒杀活动id,不具有唯一性，可以有多行的activity_id相同，activity_id<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False);设定activity_id为当前秒杀的店铺id字符串加上当前秒杀活动的整形时间戳字符串)
</span><span style="color: #008080;"> 3</span> shop_id(该条秒杀所在的店铺的id,shop_id<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False))
</span><span style="color: #008080;"> 4</span> start_time(秒杀开始时间,时间戳类型,start_time<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;"> 5</span> end_time(秒杀结束时间,时间戳类型,end_time<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;"> 6</span> continue_time(秒杀持续的时间,时间戳类型,continue_time<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;"> 7</span> fruit_id(商品id,fruit_id <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">,ForeignKey(Fruit.id)))
</span><span style="color: #008080;"> 8</span> charge_type_id(当前秒杀商品的计价方式id,charge_type_id <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">,ForeignKey(ChargeType.id)))
</span><span style="color: #008080;"> 9</span> former_price(原价，浮点型，former_price<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Float</span><span style="color: #000000;">))
</span><span style="color: #008080;">10</span> seckill_price(秒杀价,浮点型，计价方式与former_price相同，seckill_price<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Float</span><span style="color: #000000;">))
</span><span style="color: #008080;">11</span> storage_piece(剩余库存换算成当前计价方式的份数，浮点型,storage_piece<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Float</span><span style="color: #000000;">))
</span><span style="color: #008080;">12</span> activity_piece(活动库存的份数,浮点型，activity_piece<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Float</span><span style="color: #000000;">))
</span><span style="color: #008080;">13</span> status(当前秒杀商品的状态，整形，status <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">TINYINT</span>);取值：<span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">1</span>(已停用)，<span style="color: #800000; font-weight: bold;">0</span>(已结束),<span style="color: #800000; font-weight: bold;">1</span>(未开始)，<span style="color: #800000; font-weight: bold;">2</span>(进行中))</pre>
</div>
<p>　　　　(9)'推广'链接跳到'发现'页面.<br />　　　　(10)marketing表中新增加一个字段,控制店铺秒杀活动是否开启:seckill_active=Column(Integer,default=1) #0:关闭&nbsp; 1:开启<br />　　7、 注意事项：<br />　　　　(1)因为秒杀对时间的精度要求比较高，所以数据库中用时间戳存储和时间日期有关的数据.<br />　　8、和时间戳有关的函数：<br />　　　　①时间戳转换成datetime格式的字符串：<br />　　　　　　重写base.py中GlobalBaseHandler类中的timestamp_to_str方法（原方法中没有精确到秒）：<br />　　　　　　def timestamp_to_str(self, timestamp):<br />&nbsp;　　　　　　　　return time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(timestamp))<br />　　　　　　或者使用该类中的通用工具函数code_to_text(column_name,code),调用时候column_name为'create_date_timestamp',code为整形的时间戳．<br />　　　　②获取当前时间的时间戳：now = datetime.datetime.now().timestamp()<br />　　　　③将时间戳转化为日期：<br />　　　　　　b_time_stamp = 776361600<br />　　　　　　dateArray = datetime.datetime.utcfromtimestamp(b_time_stamp)<br />　　　　　　birthday = dateArray.strftime("%Y年%m月%d日")<br />　　　　　　print(birthday)<br />　　　　　　输出：1994年08月08日<br />　　　　④mysql把时间戳转化为日期：<br />　　　　　　mysql&gt;SELECT FROM_UNIXTIME( 1249488000, '%Y-%m-%d' )&nbsp; <br />　　　　　　-&gt;2007-11-20 </p>
<p>【8.12 周三】</p>
<p>　　今日任务：商品秒杀<br />　　1、 wdatepicker只显示时分秒<br />　　2、 选中时候为绿色的方形单选按钮；switch开关按钮；<br />　　3、 确认对话框的使用：<br />　　4、 js查找离最近的具有某种属性的元素：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $( document ).bind("click", <span style="color: #0000ff;">function</span><span style="color: #000000;">( e ) {
</span><span style="color: #008080;">2</span>     $( e.target ).closest("li").toggleClass("hilight"<span style="color: #000000;">);
</span><span style="color: #008080;">3</span> });</pre>
</div>
<p>　　5、 jquery查找具有某种属性的元素的个数：<br />　　　　$(".new-seckill-item").length<br />　　6、 jquery not()方法：<br />　　　　从包含所有段落的集合中删除 id 为 "selected" 的段落：<br />　　　　　　$("p").not("#selected")<br />　　7、 jquery可见性筛选：<br />　　　　所有可见的表格：<br />　　　　　　$("table:visible")<br />　　8、 使用jquery prev()方法找到同级的前一个元素:<br />　　　　$("p").prev(".selected")<br />　　9、 jquery查找当前元素相对于第一个具有属性aaa的元素的index值：<br />　　　　$(".aaa").index($this);<br />　　10、 jquery获取第i个有属性aaa的元素：<br />　　　　$(".aaa:eq(" + i+ ")");<br />　　11、 datePicker最小时间要为当前时间<br />　　12、 商品计价方式代码-汉字转换在base.py基类中有一个方法。<br />　　13、 店铺推荐和默认分组这两个分组在goods_group表中是没有的，它们在group_priority表中：<br />　　　　&nbsp; id = -1:推荐分组<br />　　　　&nbsp; id = 0:默认分组<br />　　14、 python将列表转换成字典：<br />　　　　&nbsp; lista = [(-1, '推荐分组'), (0, '默认分组'), (22, '水果单品'), (25, '青年果汁'), (26, '青年果切')]<br />　　　　&nbsp; lista = dict(lista)<br />　　　　执行操作后，lista变为：<br />　　　　　　{0: '默认分组', 25: '青年果汁', 26: '青年果切', 22: '水果单品', -1: '推荐分组'}<br />　　　　注：字典可以以整数为下标。<br />　　15、 将商品计价方式编码转换为计价方式文字显示(在base.py中)</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> getUnit(self,unit):
</span><span style="color: #008080;"> 2</span>   <span style="color: #0000ff;">if</span> unit == 1<span style="color: #000000;">:
</span><span style="color: #008080;"> 3</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">个</span><span style="color: #800000;">'</span>
<span style="color: #008080;"> 4</span>   <span style="color: #0000ff;">elif</span> unit == 2<span style="color: #000000;"> :
</span><span style="color: #008080;"> 5</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">斤</span><span style="color: #800000;">'</span>
<span style="color: #008080;"> 6</span>   <span style="color: #0000ff;">elif</span> unit == 3<span style="color: #000000;"> :
</span><span style="color: #008080;"> 7</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">份</span><span style="color: #800000;">'</span>
<span style="color: #008080;"> 8</span>   <span style="color: #0000ff;">elif</span> unit == 4<span style="color: #000000;"> :
</span><span style="color: #008080;"> 9</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">kg</span><span style="color: #800000;">'</span>
<span style="color: #008080;">10</span>   <span style="color: #0000ff;">elif</span> unit == 5<span style="color: #000000;"> :
</span><span style="color: #008080;">11</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">克</span><span style="color: #800000;">'</span>
<span style="color: #008080;">12</span>   <span style="color: #0000ff;">elif</span> unit == 6<span style="color: #000000;"> :
</span><span style="color: #008080;">13</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">升</span><span style="color: #800000;">'</span>
<span style="color: #008080;">14</span>   <span style="color: #0000ff;">elif</span> unit == 7<span style="color: #000000;"> :
</span><span style="color: #008080;">15</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">箱</span><span style="color: #800000;">'</span>
<span style="color: #008080;">16</span>   <span style="color: #0000ff;">elif</span> unit == 8<span style="color: #000000;"> :
</span><span style="color: #008080;">17</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">盒</span><span style="color: #800000;">'</span>
<span style="color: #008080;">18</span>   <span style="color: #0000ff;">elif</span> unit == 9<span style="color: #000000;"> :
</span><span style="color: #008080;">19</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">件</span><span style="color: #800000;">'</span>
<span style="color: #008080;">20</span>   <span style="color: #0000ff;">elif</span> unit == 10<span style="color: #000000;"> :
</span><span style="color: #008080;">21</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">筐</span><span style="color: #800000;">'</span>
<span style="color: #008080;">22</span>   <span style="color: #0000ff;">elif</span> unit == 11<span style="color: #000000;"> :
</span><span style="color: #008080;">23</span>    name =<span style="color: #800000;">'</span><span style="color: #800000;">包</span><span style="color: #800000;">'</span>
<span style="color: #008080;">24</span>   <span style="color: #0000ff;">else</span><span style="color: #000000;">:
</span><span style="color: #008080;">25</span>    name =<span style="color: #800000;">''</span>
<span style="color: #008080;">26</span>   <span style="color: #0000ff;">return</span> name</pre>
</div>
<p>【8.13 周四】</p>
<p>　　今日任务：商品秒杀seckill<br />　　1、 新建秒杀－后台数据获取：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> (1)先获取到当前店铺的group_id-<span style="color: #000000;">group_name对照表
</span><span style="color: #008080;"> 2</span> (2)获取当前店铺的group_id-<span style="color: #000000;">[(fruit_id,fruit_name),...]对照表
</span><span style="color: #008080;"> 3</span> (3<span style="color: #000000;">)获取当前店铺的上架和下架的fruit_id表
</span><span style="color: #008080;"> 4</span> (4)遍历fruit_id表，查询fruit_id-<span style="color: #000000;">storage对照表，只保留库存storage不为0的项。其中storage为一个有两个元素的列表，第一个元素为浮点型，表示库存的数目，第二个元素为字符串，
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">表示库存的单位（如：斤，箱等）
</span><span style="color: #008080;"> 7</span> (5)取fruit_id-<span style="color: #000000;">storage对照表的keys列表：fruit_id_usable_list,表示筛选出库存不为0的且为上架或下架的商品id
</span><span style="color: #008080;"> 8</span> (6<span style="color: #000000;">)遍历fruit_id_usable_list表，从charge_type 表中查询：
</span><span style="color: #008080;"> 9</span> 查询出fruit_id-<span style="color: #000000;">[(price,num,unit,relate),..]对照表fruit_id_charge_type
</span><span style="color: #008080;">10</span> 说明：假如苹果的总库存为storage=1000kg,苹果的其中一种计价方式为18元/<span style="color: #000000;">3盒，每7盒14kg.
</span><span style="color: #008080;">11</span> 那么这里的各个量的值分别为：price=18,num=3,self.getUnit(unit)=<span style="color: #800000;">'</span><span style="color: #800000;">盒</span><span style="color: #800000;">'</span>,relate=14/7=2<span style="color: #000000;">(kg)
</span><span style="color: #008080;">12</span> 那么当前库存对应的该计价方式的份数为：storage_piece=storage/relate/num = 1000/2/3<span style="color: #000000;"> (份)
</span><span style="color: #008080;">13</span> 把storage_piece append到fruit_id-<span style="color: #000000;">[(price,num,unit,relate),..]对照表的每一项中。
</span><span style="color: #008080;">14</span> (7<span style="color: #000000;">)整理传给前端的数据：
</span><span style="color: #008080;">15</span> ①group_id-<span style="color: #000000;">group_name对照表
</span><span style="color: #008080;">16</span> <span style="color: #000000;">②group_fruit_dict对照表中删去库存为0的fruit项成为group_usable_fruit_dict
</span><span style="color: #008080;">17</span> ③fruit_id-<span style="color: #000000;">storage对照表
</span><span style="color: #008080;">18</span> ④fruit_id-[(price,num,unit,relate,storage_piece),..]对照表</pre>
</div>
<p>　　2、 js中用eval只能把python的列表转换为obj,不能把字典转换成obj.<br />　　　　所以如果后台python通过get方法传给页面，然后js从页面相应元素读取的是一个字典，那么需要先在python中把这个列表外面套一个字典才行。<br />　　3、 jquery输入框获得焦点事件：$("p").focus(); 或$("p").focus(fn) <br />　　　　失去焦点事件：$("p").blur(); 或$("p").blur(fn) <br />　　4、 jquery判断正数的正则表达式：<br />　　　　var reg = /^[1-9]\d*.\d*|0.\d*[1-9]\d*$/;<br />　　　　console.log(reg.test('2.333'));<br />　　　　输出：true<br />　　5、 jquery dom元素遍历：<br />　　　　jQuery中用$()方法获取的dom元素都会返回数组 并且jQuery中有隐形迭代，有些操作你无须去刻意循环它们，例如：$("div").text("hello");那么就会在所有的DIV中都加上hello.&nbsp;&nbsp; 若果硬要循环它们以进行某些处理 你可以使用jQuery提供的$.each()方法，或者这样写：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $(<span style="color: #800000;">"</span><span style="color: #800000;">div</span><span style="color: #800000;">"</span><span style="color: #000000;">).each(function(){
</span><span style="color: #008080;">2</span>     //<span style="color: #000000;">这里干你想干的事情 
</span><span style="color: #008080;">3</span>     //<span style="color: #000000;">用$(this)可以访问正在循环的元素 
</span><span style="color: #008080;">4</span> });</pre>
</div>
<p>　　6、 必须设置距离现在最少五分钟以后秒杀才能开始<br />　　7、 jquery的return只能return出一层方法，如果有多个方法嵌套，内层return,则要设置stop-flag变量来return.<br />　　8、 数据中少一个计价方式id.<br />　　9、 *各列分析:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #800000; font-weight: bold;">1</span>.id(该条秒杀数据项的id,id<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span>False,primary_key<span style="color: #808080;">=</span>True,autoincrement<span style="color: #808080;">=</span><span style="color: #000000;">True))
</span><span style="color: #008080;"> 2</span> <span style="color: #800000; font-weight: bold;">2</span>.activity_id(秒杀活动id,不具有唯一性，可以有多行的activity_id相同，activity_id<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False);设定activity_id为当前秒杀的店铺id字符串加上当前秒杀活动
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #000000;">的整形时间戳字符串)
</span><span style="color: #008080;"> 5</span> <span style="color: #800000; font-weight: bold;">3</span>.shop_id(该条秒杀所在的店铺的id,shop_id<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False))
</span><span style="color: #008080;"> 6</span> <span style="color: #800000; font-weight: bold;">4</span>.start_time(秒杀开始时间,时间戳类型,start_time<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False))
</span><span style="color: #008080;"> 7</span> <span style="color: #800000; font-weight: bold;">5</span>.end_time(秒杀结束时间,时间戳类型,end_time<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;"> 8</span> <span style="color: #800000; font-weight: bold;">6</span>.continue_time(秒杀持续的时间,时间戳类型,continue_time<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;"> 9</span> <span style="color: #800000; font-weight: bold;">7</span>.fruit_id(商品id,fruit_id <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,ForeignKey(Fruit.id,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False)))
</span><span style="color: #008080;">10</span> <span style="color: #800000; font-weight: bold;">8</span>.charge_type_id(当前秒杀商品的计价方式id,charge_type_id <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,ForeignKey(ChargeType.id),nullable<span style="color: #808080;">=</span><span style="color: #000000;">False,))
</span><span style="color: #008080;">11</span> <span style="color: #800000; font-weight: bold;">9</span>.former_price(原价，浮点型，former_price<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Float</span><span style="color: #000000;">))
</span><span style="color: #008080;">12</span> <span style="color: #800000; font-weight: bold;">10</span>.seckill_price(秒杀价,浮点型，计价方式与former_price相同，seckill_price<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Float</span>,nullable<span style="color: #808080;">=</span><span style="color: #000000;">False))
</span><span style="color: #008080;">13</span> <span style="color: #800000; font-weight: bold;">11</span>.storage_piece(当前商品剩余库存换算成当前计价方式的份数，取整，整形,storage_piece<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;">14</span> <span style="color: #800000; font-weight: bold;">12</span>.activity_piece(活动库存的份数,整形，activity_piece<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span><span style="color: #000000;">))
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span> <span style="color: #800000; font-weight: bold;">13</span>.activity_status(当前秒杀活动的状态，整形，activity_status <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">TINYINT</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">1</span>,nullable<span style="color: #808080;">=</span>False);取值：<span style="color: #808080;">-</span><span style="color: #800000; font-weight: bold;">1</span>(已停用)，<span style="color: #800000; font-weight: bold;">0</span>(已结束),<span style="color: #800000; font-weight: bold;">1</span>(未开始)，<span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;">(进行中))
</span><span style="color: #008080;">17</span> <span style="color: #800000; font-weight: bold;">14</span>.not_pick(未领取的商品的份数，默认等于当前活动库存的份数，整形，not_pick<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">))
</span><span style="color: #008080;">18</span> <span style="color: #800000; font-weight: bold;">15</span>.picked(已经领取的商品的份数，默认为0，整形，picked<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">))
</span><span style="color: #008080;">19</span> <span style="color: #800000; font-weight: bold;">16</span>.ordered(已经下单的商品的份数，默认为0，整形，ordered<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">))
</span><span style="color: #008080;">20</span> <span style="color: #800000; font-weight: bold;">17</span>.deleted(已经被从该秒杀活动中删除的商品的份数，默认为0，整形，deleted<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">0</span>)）</pre>
</div>
<p>　　10、 js取字符串的子串：<br />　　　　&nbsp; str = str.substr(start,lenth)（结果不包括下标为start+lenth的字符）<br />　　11、 python把字符串转换为时间戳：<br />　　　　&nbsp; 　　start_time = '2015-08-12 12:34:33'<br />　　　　&nbsp; 　　start_time = int(time.mktime(time.strptime(start_time,'%Y-%m-%d %H:%M:%S')))<br />　　　　&nbsp; 将时间戳转化为localtime字符串：<br />　　　　　　&nbsp; x = time.localtime(1317091800.0)<br />　　　　　　&nbsp; time.strftime('%Y-%m-%d %H:%M:%S',x)<br />　　　　　　&nbsp; &gt;&gt;2011-09-27 10:50:00</p>
<p>【8.14 周五】</p>
<p>　　今日任务：商品秒杀<br />　　1、 数据库建表：<br />　　　　</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> (<span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">)秒杀商品表
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span><span style="color: #000000;"> seckill_goods(
</span><span style="color: #008080;"> 3</span>  id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;"> 4</span>  fruit_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 5</span>  activity_id <span style="color: #0000ff;">bigint</span>(<span style="color: #800000; font-weight: bold;">20</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>  charge_type_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 8</span>  former_price <span style="color: #0000ff;">float</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 9</span>  seckill_price <span style="color: #0000ff;">float</span> <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">10</span>  
<span style="color: #008080;">11</span>  storage_piece <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">),
</span><span style="color: #008080;">12</span>  activity_piece <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">),
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>  not_pick <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">),
</span><span style="color: #008080;">15</span>  picked <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">16</span>  ordered <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">17</span>  deleted <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">18</span>  status <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">,
</span><span style="color: #008080;">19</span>  
<span style="color: #008080;">20</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(activity_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> seckill_activity(id),
</span><span style="color: #008080;">21</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(fruit_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> fruit(id),
</span><span style="color: #008080;">22</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(charge_type_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> charge_type(id)
</span><span style="color: #008080;">23</span> <span style="color: #000000;">);
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span> (<span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;">)秒杀活动表：
</span><span style="color: #008080;">26</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span><span style="color: #000000;"> seckill_activity(
</span><span style="color: #008080;">27</span>  <span style="color: #808080;">+++</span>id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;">28</span>  <span style="color: #008080;">--</span><span style="color: #008080;">-id bigint(20) not null,</span>
<span style="color: #008080;">29</span>  shop_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">30</span>  start_time <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">31</span>  end_time <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">32</span>  continue_time <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">33</span>  
<span style="color: #008080;">34</span>  activity_status <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">),
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(shop_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> shop(id)
</span><span style="color: #008080;">37</span> <span style="color: #000000;">);
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span> (<span style="color: #800000; font-weight: bold;">3</span><span style="color: #000000;">)加字段：
</span><span style="color: #008080;">40</span> marketing表中新增加一个字段,控制店铺秒杀活动是否开启:seckill_active<span style="color: #808080;">=</span><span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">TINYINT</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">1</span>) #<span style="color: #800000; font-weight: bold;">0</span>:关闭  <span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">:开启
</span><span style="color: #008080;">41</span> <span style="color: #0000ff;">alter</span> <span style="color: #0000ff;">table</span> marketing <span style="color: #0000ff;">add</span> <span style="color: #0000ff;">column</span> seckill_active <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span>;</pre>
</div>
<p>　　2、 python延时函数：time.sleep(10),延时单位：秒</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">print</span> <span style="color: #800000;">"</span><span style="color: #800000;">a</span><span style="color: #800000;">"</span>
<span style="color: #008080;">3</span> time.sleep(5<span style="color: #000000;">)
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">print</span> <span style="color: #800000;">"</span><span style="color: #800000;">b</span><span style="color: #800000;">"</span>
<span style="color: #008080;">5</span> time.sleep(10)</pre>
</div>
<p>　　　　程序会先输出&ldquo;a&rdquo;，暂停5秒后再输出&ldquo;b&rdquo;</p>
<p><br />【8.18 周二】</p>
<p>　　今日任务：商品秒杀<br />　　1、 tornado在html中给一个新变量赋值要用set:<br />　　　　{% set data_item = output_data[0] %}<br />　　2、 让html input不可编辑的方法：<br />　　　　方法1: onfocus=this.blur() 当鼠标放不上就离开焦点<br />　　　　　　　 &lt;input type="text" name="input1" value="中国" onfocus=this.blur()&gt; <br />　　　　方法2:readonly <br />　　　　　　　 &lt;input type="text" name="input1" value="中国" readonly&gt; <br />　　　　　　　 &lt;input type="text" name="input1" value="中国" readonly="true"&gt; <br />　　　　方法3: disabled <br />　　　　　　　 &lt;input type="text" name="input1" value="中国" disabled="true"&gt;<br />　　3、 seckill_goods表新增加一个字段：<br />　　　　status tinyint(4) default 1<br />　　4、 二维码相关外部js:<br />　　　　&lt;script src="/static/js/third/qrcode.min.js"&gt;&lt;/script&gt;<br />　　5、 jquery如何click，2个事件切换:<br />　　　　在click外面设置一个数值变量初始为0，每次click触发后增加1，然后让该变量对2取余，不是就得到两个不同的状态了，然后根据这个值写函数就行了<br />　　6、 jquery实现点击一个div外部的任意地方隐藏这个div（假设其class为sw-er-tip）的方法：<br />　　　　假设div的外部是body,则先为body添加点击事件：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $(document).on("click",<span style="color: #0000ff;">function</span><span style="color: #000000;">(e){
</span><span style="color: #008080;">2</span>  <span style="color: #0000ff;">if</span>($(e.target).closest(".sw-er-tip").size()==0<span style="color: #000000;">){
</span><span style="color: #008080;">3</span>   $(".sw-er-tip").addClass("invisible"<span style="color: #000000;">);
</span><span style="color: #008080;">4</span> <span style="color: #000000;"> }
</span><span style="color: #008080;">5</span> });  </pre>
</div>
<p>　　　　然后为这个div添加点击事件并停止冒泡：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $(document).ready(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">2</span> <span style="color: #000000;"> ...
</span><span style="color: #008080;">3</span> )}.on("click",".spread-activity",<span style="color: #0000ff;">function</span><span style="color: #000000;">(e){
</span><span style="color: #008080;">4</span> <span style="color: #000000;"> e.stopPropagation();
</span><span style="color: #008080;">5</span>  $(".sw-er-tip").addClass("invisible"<span style="color: #000000;">);
</span><span style="color: #008080;">6</span>      $(<span style="color: #0000ff;">this</span>).closest(".operate").children(".sw-er-tip").removeClass("invisible");  <span style="color: #008000;">//</span><span style="color: #008000;">operate为sw-er-tip的外层父元素</span>
<span style="color: #008080;">7</span> });</pre>
</div>
<p>　　7、 github一次add所有文件：<br />　　　　sudo git add . --ignore-removal<br />　　8、 python把当前时间转换为时间戳：<br />　　　　now_date=int(time.time())<br />　　9、 当前如果有正在秒杀的活动，那么秒杀功能不能被关闭。<br />　　10、 Ubuntu 14.04 用户可以通过以下命令为chrome安装 Pepper Flash Player For Chromium ：<br />　　　　&nbsp; sudo apt-get install pepperflashplugin-nonfree<br />　　　　&nbsp; sudo update-pepperflashplugin-nonfree --install</p>
<p>【8.19 周三】</p>
<p>　　今日任务：商品秒杀商城端后台<br />　　1、 修改表结构重新建表：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">秒杀活动表：
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span><span style="color: #000000;"> seckill_activity(
</span><span style="color: #008080;"> 3</span>  id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;"> 4</span>  shop_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 5</span>  start_time <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span>  end_time <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 7</span>  continue_time <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 8</span>  
<span style="color: #008080;"> 9</span>  activity_status <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span><span style="color: #000000;">),
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(shop_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> shop(id)
</span><span style="color: #008080;">12</span> <span style="color: #000000;">);
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">秒杀商品表
</span><span style="color: #008080;">15</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span><span style="color: #000000;"> seckill_goods(
</span><span style="color: #008080;">16</span>  id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;">17</span>  fruit_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">18</span>  activity_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>  charge_type_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">21</span>  former_price <span style="color: #0000ff;">float</span><span style="color: #000000;">,
</span><span style="color: #008080;">22</span>  seckill_price <span style="color: #0000ff;">float</span> <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;">23</span>  
<span style="color: #008080;">24</span>  storage_piece <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">),
</span><span style="color: #008080;">25</span>  activity_piece <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">),
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>  not_pick <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">),
</span><span style="color: #008080;">28</span>  picked <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">29</span>  ordered <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">30</span>  deleted <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">,
</span><span style="color: #008080;">31</span>  status <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">,
</span><span style="color: #008080;">32</span>  
<span style="color: #008080;">33</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(activity_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> seckill_activity(id),
</span><span style="color: #008080;">34</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(fruit_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> fruit(id),
</span><span style="color: #008080;">35</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(charge_type_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> charge_type(id)
</span><span style="color: #008080;">36</span> );</pre>
</div>
<p>　　2、 github忽略本地工作区删除的文件：<br />&nbsp;　　　　git add --ignore-removal &lt;文件路径路径&gt;'，忽略本地工作区中移除的文件。<br />　　3、 fruit表新增加字段：（一种商品只能同时参与一种活动，活动在同一商品上不能叠加）</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> activity_status <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">TINYINT</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">0</span>)  #<span style="color: #800000; font-weight: bold;">0</span>(该商品未参与任何活动),<span style="color: #800000; font-weight: bold;">1</span>(参与秒杀活动),<span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;">(参与限时折扣),...(等待扩展中)
</span><span style="color: #008080;">2</span> seckill_charge_type <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(<span style="color: #0000ff;">Integer</span>,<span style="color: #0000ff;">default</span><span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">) #秒杀活动中该商品所使用的计价方式id
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">alter</span> <span style="color: #0000ff;">table</span> fruit <span style="color: #0000ff;">add</span> <span style="color: #0000ff;">column</span> activity_status <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">;
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">alter</span> <span style="color: #0000ff;">table</span> fruit <span style="color: #0000ff;">add</span> <span style="color: #0000ff;">column</span> seckill_charge_type <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span>; </pre>
</div>
<p>　　4、 如果24小时之内没有秒杀活动，那么发现页面的秒杀活动不显示。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> sec_fruit <span style="color: #808080;">=</span> self.session.query(models.Fruit).filter_by(id <span style="color: #808080;">=</span> fruit_id).with_lockmode(<span style="color: #ff0000;">'</span><span style="color: #ff0000;">update</span><span style="color: #ff0000;">'</span><span style="color: #000000;">).first()
</span><span style="color: #008080;">2</span>     sec_fruit.activity_status <span style="color: #808080;">=</span> <span style="color: #800000; font-weight: bold;">1</span>
<span style="color: #008080;">3</span>     sec_fruit.seckill_charge_type <span style="color: #808080;">=</span> charge_type_id</pre>
</div>
<p>　　5、 秒杀活动编辑限定：</p>
<p>　　　　*要在base的类中为秒杀活动增加全局刷新函数(店铺管理后台，商城后台，customer后台)<br />　　　　还没有开始的秒杀活动：所有信息都可以编辑<br />　　　　正在进行中的秒杀活动：<br />　　　　　　只能编辑活动的持续时间（而且只能比原来增加）、每种商品的活动库存（只能比原来的增加），正在进行的秒杀活动不能添加新商品，也不能删除现有的商品。<br />　　6、 /seckill/(\w+)页面数据分析：<br />　　　　需要：<br />　　　　[[活动id，秒杀活动开始时间，持续时间，[[商品秒杀id,商品fruit_id,商品img_url,商品名称,商品计价方式id,商品计价方式文字,商品秒杀价省钱数,商品活动库存],..]],...]<br />　　7、 sqlalchemy中filter和filter_by可以连着用，如：<br />　　　　aa = self.session.query(models.Fruit).filter_by(shop_id = 4).filter(models.Fruit.id &lt; 500).all()<br />　　　　print(len(aa))</p>
<p><br />【8.20 周四】</p>
<p>　　今日任务：商品秒杀商城端<br />　　1、 python中的字典直接传给js，js不能解析成对象，必须在python中为字典外面套上一个列表才行。<br />　　2、 sqlalchemy中预提交：<br />　　　　session.flush()（和commit类似）<br />　　　　如果预提交失败则会回滚<br />　　3、 全局实时更新店铺秒杀活动基类方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> update_seckill_base(self,shop_id):
</span><span style="color: #008080;"> 2</span>   current_shop_id =<span style="color: #000000;"> shop_id
</span><span style="color: #008080;"> 3</span>   notstart_list = self.session.query(models.SeckillActivity).filter_by(shop_id = current_shop_id,activity_status = 1<span style="color: #000000;">).all()
</span><span style="color: #008080;"> 4</span>   <span style="color: #0000ff;">for</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> notstart_list:
</span><span style="color: #008080;"> 5</span>    now_time =<span style="color: #000000;"> int(time.time())
</span><span style="color: #008080;"> 6</span>    <span style="color: #0000ff;">if</span> item.start_time &lt;= now_time <span style="color: #0000ff;">and</span> item.end_time &gt;<span style="color: #000000;"> now_time:
</span><span style="color: #008080;"> 7</span>     item.activity_status = 2
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    self.session.flush()
</span><span style="color: #008080;"> 9</span>    <span style="color: #0000ff;">elif</span> item.start_time &lt;= now_time <span style="color: #0000ff;">and</span> item.end_time &lt;=<span style="color: #000000;"> now_time:
</span><span style="color: #008080;">10</span>     item.activity_status =<span style="color: #000000;"> 0
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    self.session.flush()
</span><span style="color: #008080;">12</span> <span style="color: #000000;">  self.session.commit()
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>   killing_list = self.session.query(models.SeckillActivity).filter_by(shop_id = current_shop_id,activity_status = 2<span style="color: #000000;">).all()
</span><span style="color: #008080;">15</span>   <span style="color: #0000ff;">for</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> killing_list:
</span><span style="color: #008080;">16</span>    now_time =<span style="color: #000000;"> int(time.time())
</span><span style="color: #008080;">17</span>    <span style="color: #0000ff;">if</span> item.end_time &lt;=<span style="color: #000000;"> now_time:
</span><span style="color: #008080;">18</span>     item.activity_status =<span style="color: #000000;"> 0
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    self.session.flush()
</span><span style="color: #008080;">20</span> <span style="color: #000000;">  self.session.commit()
</span><span style="color: #008080;">21</span>   <span style="color: #0000ff;">return</span> None</pre>
</div>
<p>　　4、 python字节码<br />　　5、 刷新数据库店铺秒杀活动信息<br />　　6、 js中用hide和show方法的时候容易导致元素显示异常，这种情况下就要改用addClass('hidden')和removeClass('hidden')<br />　　7、 python中字符串split，如果字符串中不包含split中的分隔符，那么就会返回整个字符串，不会报错。<br />　　8、 商城商品首页商品列表秒杀商品需要数据：<br />　　　　先判断当前店铺当前时刻是否有秒杀活动(activity_status=2)，如果有，则先返回给前台一个秒杀活动标志变量，秒杀img_url：<br />　　　　has_seckill_activity:1,seckill_img_url:xxx(这个url只对应一个图片，是存放在七牛上写死的图片链接)<br />　　　　遍历商品列表的时候，先通过fruit表的activity_status字段判断每个商品是否是秒杀商品(fruit表的activity_status字段对应的秒杀商品状态码)，如果是，把返回数据的is_seckill赋值为1<br />　　　　[is_seckill:1,activity_id:xxx,seckill_goods_id:xxx,***fruit_id:xxx,charge_type_id:xxx,***img_url:xxx(只要个),***fruit_name:xxx,charge_type_text: xxx,price_dif:xxx,activity_piece:xxx]<br />　　9、 ?要加一个限制：新建秒杀活动的时候，不能新建和当前seckill_goods表中所有activity_status=1或2(未开始秒杀和正在进行的秒杀)的fruit_id相同的商品.<br />?还要加一个限制：同一个秒杀活动中同一个商品只能出现一次。<br />　　10、 在商城首页公告表notice表中加入四个字段，用于存放活动的公告图片url(目前url暂时是写死的):<br />　　　　&nbsp; <a href="http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7mu3281ms2fnd51q17hsqqo7">http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7mu3281ms2fnd51q17hsqqo7</a>&nbsp;&nbsp; 团购<br />&nbsp;　　　　 <a href="http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7mvj70f7dn221sd1pfn18l2d">http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7mvj70f7dn221sd1pfn18l2d</a>&nbsp;&nbsp; 折扣<br />　　　　&nbsp; <a href="http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7n0emj17d71ml9lftn6u1cocj">http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7n0emj17d71ml9lftn6u1cocj</a>&nbsp; 预售<br />　　　　&nbsp; <a href="http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7n14fh1c0s1g0hne1gu45jhp">http://7rf3aw.com2.z0.glb.qiniucdn.com/o_19t7n14fh1c0s1g0hne1gu45jhp</a>&nbsp;&nbsp; 秒杀</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> seckill_img_url <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(String(<span style="color: #800000; font-weight: bold;">100</span><span style="color: #000000;">)) #秒杀公告背景
</span><span style="color: #008080;">2</span> gbuy_img_url <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(String(<span style="color: #800000; font-weight: bold;">100</span><span style="color: #000000;">)) #团购公告背景
</span><span style="color: #008080;">3</span> dscount_img_url <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(String(<span style="color: #800000; font-weight: bold;">100</span><span style="color: #000000;">)) #折扣公告背景
</span><span style="color: #008080;">4</span> presell_img_url <span style="color: #808080;">=</span> <span style="color: #0000ff;">Column</span>(String(<span style="color: #800000; font-weight: bold;">100</span>)) #预售公告背景</pre>
</div>
<p>　　　　注：notice表中config_id就是shop_id<br />　　　　字段数据添加时机：只要店铺开启某项活动，就把该店铺的notice表中对应的url字段赋值为七牛云上的图片url.<br />　　10、 商城商品首页商品列表后台返回数据中增加判断字段：is_activity(0:当前无活动，1:秒杀,2:xxx,...)<br />　　11、 ?秒杀商品表要加一个已经抢过该商品的顾客的customer_id字段，以保证同一个活动中同一件商品每个人只能抢一份（bought_customer）<br />　　　　&nbsp; bought_customer = Column(String(5000))<br />　　　　&nbsp; alter table seckill_goods add column bought_customer varchar(5000);<br />　　　　&nbsp; 经过思考后，发现这种方法不太合理，而且查询起来比较复杂，所以改变方案：新建一个customer_seckill_goods表(用户抢购的秒杀商品表)：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">create</span> <span style="color: #0000ff;">table</span><span style="color: #000000;"> customer_seckill_goods(
</span><span style="color: #008080;"> 2</span>  id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">primary</span> <span style="color: #0000ff;">key</span><span style="color: #000000;"> auto_increment,
</span><span style="color: #008080;"> 3</span>  customer_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 4</span>  shop_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 5</span>  seckill_goods_id <span style="color: #0000ff;">int</span>(<span style="color: #800000; font-weight: bold;">11</span>) <span style="color: #808080;">not</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span>  status <span style="color: #0000ff;">tinyint</span>(<span style="color: #800000; font-weight: bold;">4</span>) <span style="color: #0000ff;">default</span> <span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">, 
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(customer_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> customer(id),
</span><span style="color: #008080;"> 9</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(shop_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> shop(id),
</span><span style="color: #008080;">10</span>  <span style="color: #0000ff;">foreign</span> <span style="color: #0000ff;">key</span>(seckill_goods_id) <span style="color: #0000ff;">references</span><span style="color: #000000;"> seckill_goods(id)
</span><span style="color: #008080;">11</span> );</pre>
</div>
<p>　　12、 用户抢购的秒杀商品表</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> CustomerSeckillGoods(MapBase, _CommonApi):
</span><span style="color: #008080;">2</span>  <span style="color: #800080;">__tablename__</span>=<span style="color: #800000;">'</span><span style="color: #800000;">customer_seckill_goods</span><span style="color: #800000;">'</span>
<span style="color: #008080;">3</span>  id = Column(Integer,nullable=False,primary_key=True,autoincrement=<span style="color: #000000;">True)
</span><span style="color: #008080;">4</span>  customer_id = Column(Integer,ForeignKey(Customer.id),nullable=<span style="color: #000000;">False)
</span><span style="color: #008080;">5</span>  shop_id = Column(Integer,ForeignKey(Shop.id),nullable=<span style="color: #000000;">False)
</span><span style="color: #008080;">6</span>  seckill_goods_id = Column(Integer,ForeignKey(SeckillGoods.id),nullable=<span style="color: #000000;">False)
</span><span style="color: #008080;">7</span>  status = Column(TINYINT,default=0)</pre>
</div>
<p>　　13、 postJson可以向别的页面发请求，只用把url改成其他页面即可。<br />　　14、 删除表中的一列：<br />　　　　&nbsp; alter table AAA drop column aName;</p>
<p>【8.21 周五】</p>
<p>　　今日任务：商品秒杀商城首页<br />　　1、 在sqlalchemy的py文件中新建数据库表class之后，运行系统会自动在数据库中新建相应的表，而往已有的表中新插入字段则需要手动往数据库中插入，并不能自动插入。<br />　　2、 mysql自动增长的id怎么知道刚插入的数据的id是多少？<br />　　　　解决方法：<br />　　　　①先新建要插入的记录：<br />　　　　（假设Fruit表的id是自动增长的）<br />　　　　　　record = models.Fruit(name='aaa',price=12.3)<br />　　　　②add记录：<br />　　　　　　self.session.add(record)<br />　　　　③flush:<br />　　　　　　self.session.flush()<br />　　　　④insert_id = record.id<br />　　　　⑤commit:<br />　　　　　　self.session.commit()<br />　　　　⑥再用第④步取得到的insert_id做其他事情。<br />　　3、 遍历fruit_id_usable_list表，从charge_type 表中查询：<br />　　　　查询出fruit_id-[(price,num,unit,relate),..]对照表fruit_id_charge_type<br />　　　　说明：假如苹果的总库存为storage=1000kg,苹果的其中一种计价方式为18元/3盒，每7盒14kg.<br />　　　　　　&nbsp;&nbsp; 那么这里的各个量的值分别为：price=18,num=3,self.getUnit(unit)='盒',relate=14/7=2(kg)<br />　　　　　　　那么当前库存对应的该计价方式的份数为：storage_piece=storage/relate/num = 1000/2/3 (份)<br />　　　　把storage_piece append到fruit_id-[(price,num,unit,relate),..]对照表的每一项中。<br />　　4、 在处理秒杀商品的计价方式的时候遇到了较复杂的问题，讨论了一下午：<br />　　　　如果不将秒杀商品的计价方式作为一种新的计价方式插入计价方式表中，那么在生成订单和统计数据的时候将会遇到不方便和数据不完整的问题；如果将秒杀商品的计价方式作为一种新的计价方式插入计价方式表中，那么很多和计价方式相关的地方都要相应的改变，工作量很大。<br />最后权衡利弊之后，决定这样处理：<br />　　　　在计价方式表中新增一个字段activity_type = Column(TINYINT,default=0)，用于表示当前这条计价方式对应的活动类型，默认值是0，表示当前计价方式不属于任何活动，其他值：1(秒杀活动新建的计价方式),2(限时折扣活动新建的计价方式)，...<br />　　　　然后在每次新建或者编辑秒杀商品信息后，都向计价方式表中插入该秒杀商品对应的计价方式记录，并把生成的计价方式id插入到秒杀商品表中。在抢购和下单的时候，都以这个计价方式为依据进行处理。<br />　　　　最后再在所有有对计价方式进行遍历的地方判断计价方式的activity_type，筛选出来需要的计价方式。<br />　　5、 python列表删除符合条件的元素：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> &gt;&gt;&gt; a = [1,2,3,4<span style="color: #000000;">]
</span><span style="color: #008080;"> 2</span> &gt;&gt;&gt; list(filter(<span style="color: #0000ff;">lambda</span> e:e!=1<span style="color: #000000;">,a))
</span><span style="color: #008080;"> 3</span> [2, 3, 4<span style="color: #000000;">]
</span><span style="color: #008080;"> 4</span> &gt;&gt;&gt;<span style="color: #000000;"> a
</span><span style="color: #008080;"> 5</span> [1, 2, 3, 4<span style="color: #000000;">]
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> &gt;&gt;&gt; a = [{<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>:111,<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>:345},{<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>:23,<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>:3<span style="color: #000000;">}]
</span><span style="color: #008080;"> 8</span> &gt;&gt;&gt;<span style="color: #000000;"> a
</span><span style="color: #008080;"> 9</span> [{<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 345, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 111}, {<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 3, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 23<span style="color: #000000;">}]
</span><span style="color: #008080;">10</span> &gt;&gt;&gt; a = list(filter(<span style="color: #0000ff;">lambda</span> item:item[<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>] != 111<span style="color: #000000;">,a))
</span><span style="color: #008080;">11</span> &gt;&gt;&gt;<span style="color: #000000;"> a
</span><span style="color: #008080;">12</span> [{<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>: 3, <span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>: 23<span style="color: #000000;">}]
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span> <span style="color: #000000;">或者：
</span><span style="color: #008080;">15</span> a = [e <span style="color: #0000ff;">for</span> e <span style="color: #0000ff;">in</span> a <span style="color: #0000ff;">if</span> e!=1<span style="color: #000000;">]
</span><span style="color: #008080;">16</span> a = [e <span style="color: #0000ff;">for</span> e <span style="color: #0000ff;">in</span> a <span style="color: #0000ff;">if</span> e[<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>] != 111]</pre>
</div>
<p>　　6、 jquery中each方法中发ajax请求时候，可能会由于异步的原因导致先执行后面的代码再执行请求导致逻辑错乱，为了避免这个问题，需要在发ajax请求之前关闭异步:</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">$.ajaxSetup({
</span><span style="color: #008080;">2</span>  async : <span style="color: #0000ff;">false</span>
<span style="color: #008080;">3</span> });</pre>
</div>
<p>　　7、 linux截屏软件：<br />　　　　sudo apt-get install scrot<br />　　　　然后命令行输入:scrot -s可以用鼠标选区然后保存截图到当前目录。&nbsp;</p>
<p>【8.24 周一】<br />　　1、 今日任务：商品秒杀商城端支付环节<br />　　2、 要加一个限制：同一个秒杀活动中不能存在两种相同的商品。<br />　　3、 jquery中遍历某个类的所有元素的两种方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> ①<span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> i=0; i&lt;$('.aaa').size;i++<span style="color: #000000;">){
</span><span style="color: #008080;">2</span>  <span style="color: #0000ff;">var</span> $<span style="color: #0000ff;">this</span> = $('.aaa'<span style="color: #000000;">).eq(i);
</span><span style="color: #008080;">3</span>  <span style="color: #0000ff;">function</span>($<span style="color: #0000ff;">this</span><span style="color: #000000;">){
</span><span style="color: #008080;">4</span> <span style="color: #000000;">  ... 
</span><span style="color: #008080;">5</span> <span style="color: #000000;"> }
</span><span style="color: #008080;">6</span> }</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> ②$('.aaa').each(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){
</span><span style="color: #008080;">2</span> <span style="color: #000000;"> ...
</span><span style="color: #008080;">3</span> }</pre>
</div>
<p>　　　　注：用each方法遍历如果each中有ajax函数，那么要在执行ajax函数前关闭异步，否则会导致执行时候逻辑错乱的问题。<br />　　4、 关闭ajax异步：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">$.ajaxSetup({
</span><span style="color: #008080;">2</span>  async : <span style="color: #0000ff;">false</span>
<span style="color: #008080;">3</span> });</pre>
</div>
<p>　　5、 对于charge_type表的分析：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">price　unit　num　unit_num　active　market_price　select_num　relate
</span><span style="color: #008080;">2</span> <span style="color: #800000; font-weight: bold;">50</span>      <span style="color: #800000; font-weight: bold;">8</span>    <span style="color: #800000; font-weight: bold;">2</span>      <span style="color: #800000; font-weight: bold;">7</span>        <span style="color: #800000; font-weight: bold;">1</span>         <span style="color: #800000; font-weight: bold;">48</span>            <span style="color: #800000; font-weight: bold;">19</span>         <span style="color: #800000; font-weight: bold;">2.714</span>
<span style="color: #008080;">3</span> 转换成<span style="color: #ff0000;">'</span><span style="color: #ff0000;">每份</span><span style="color: #ff0000;">'</span><span style="color: #000000;">的计价方式：
</span><span style="color: #008080;">4</span> <span style="color: #800000; font-weight: bold;">50</span>      <span style="color: #800000; font-weight: bold;">3</span>    <span style="color: #800000; font-weight: bold;">1</span>     <span style="color: #800000; font-weight: bold;">7</span><span style="color: #808080;">/</span><span style="color: #800000; font-weight: bold;">2</span>       <span style="color: #800000; font-weight: bold;">1</span>         <span style="color: #800000; font-weight: bold;">48</span>            <span style="color: #800000; font-weight: bold;">19</span>    <span style="color: #800000; font-weight: bold;">19</span><span style="color: #808080;">/</span>(<span style="color: #800000; font-weight: bold;">7</span><span style="color: #808080;">/</span><span style="color: #800000; font-weight: bold;">2</span>)(<span style="color: #808080;">=</span><span style="color: #800000; font-weight: bold;">2.714</span><span style="color: #808080;">*</span><span style="color: #800000; font-weight: bold;">2</span>)</pre>
</div>
<p>　　6、 seckill_goods表加一个字段：<br />　　　　seckill_charge_type_id = Column(Integer,ForeignKey(ChargeType.id),nullable=False)&nbsp; #当前秒杀商品的计价方式id<br />　　　　alter table seckill_goods add column seckill_charge_type_id int(11) not null references </p>
<p>　　　　charge_type(id);<br />　　7、 charge_type表新增加一个字段：<br />　　　　activity_type = activity_type = Column(TINYINT,default=0) #0:正常计价方式，未参与任何活动;1:秒杀活动计价方式;2:限时折扣活动计价方式<br />　　　　alter table charge_type add column activity_type tinyint(4) default 0;<br />　　　　注：每次新建或编辑秒杀活动后都往charge_type表中插入秒杀活动新建的计价方式。<br />　　8、 m-admin/js/util.js里面有各种工具方法。<br />　　9、 商品如果正在参加秒杀活动，那么不允许下架(在商品下架接口中要加以判断)</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>    end_charge_type = [x <span style="color: #0000ff;">for</span> x <span style="color: #0000ff;">in</span> charge_types <span style="color: #0000ff;">if</span> x.activity_type == -1<span style="color: #000000;">]
</span><span style="color: #008080;"> 2</span>    end_charge_type_id =<span style="color: #000000;"> []
</span><span style="color: #008080;"> 3</span>    <span style="color: #0000ff;">for</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> end_charge_type:
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    end_charge_type_id.append(item.id)
</span><span style="color: #008080;"> 5</span>    seckill_goods_list =<span style="color: #000000;"> self.session.query
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">(models.SeckillGoods).filter(models.SeckillGoods.seckill_charge_type_id.in_
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> (end_charge_type_id)).with_lockmode(<span style="color: #800000;">'</span><span style="color: #800000;">update</span><span style="color: #800000;">'</span><span style="color: #000000;">).all()
</span><span style="color: #008080;">10</span>    <span style="color: #0000ff;">for</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> seckill_goods_list:
</span><span style="color: #008080;">11</span>     item.picked -= 1
<span style="color: #008080;">12</span>     item.not_pick += 1
<span style="color: #008080;">13</span>    self.session.commit()</pre>
</div>
<p>　　10、 店铺商品管理中，商品详细信息是在base.py的getGoodsData方法中查询到的。</p>
<p>　　11、 用户在购物车中删除秒杀商品后要有相应的响应。</p>
<p>　　12、 mysqldump -uroot -psenguo senguocc &gt; senguocc2015-8-24.sql</p>
<p>【8.25 周二】<br />　　今日任务：商品秒杀商城端支付环节<br />　　1、 今天遇到好几次python3的错误：'段错误（核心已转储）'<br />　　2、 seckill_goods表的activity_piece,not_pick,picked,ordered四个字段之间的关系：<br />　　　　商品首页和秒杀的发现页面显示的秒杀商品的库存为activity_piece,只有当一个商品被下单成功后该库存才减去1;当一个商品被用户放到购物车里时，not_pick减1,picked加1，另外两个不变;当一个正在参与秒杀的商品被用户从购物车里删除时，not_pick加1,picked减1;当一个秒杀商品被用户下单成功后，activity_piece减1.<br />　　3、 加载商品首页时遇到如下警告，加载速度非常慢，达到一分钟多：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> /usr/local/lib/python3.4/dist-packages/sqlalchemy/sql/default_comparator.py:153<span style="color: #000000;">: SAWarning: 
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> The <span style="color: #0000ff;">IN</span>-predicate on <span style="color: #800000;">"</span><span style="color: #800000;">charge_type.id</span><span style="color: #800000;">"</span> was invoked with an empty sequence. This results <span style="color: #0000ff;">in</span><span style="color: #000000;"> a 
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #000000;">contradiction, which nonetheless can be expensive to evaluate.  Consider alternative 
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> strategies <span style="color: #0000ff;">for</span><span style="color: #000000;"> improved performance.
</span><span style="color: #008080;"> 8</span>   'strategies <span style="color: #0000ff;">for</span> improved performance.' %<span style="color: #000000;"> expr)
</span><span style="color: #008080;"> 9</span> /usr/local/lib/python3.4/dist-packages/sqlalchemy/sql/default_comparator.py:153<span style="color: #000000;">: SAWarning: 
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> The <span style="color: #0000ff;">IN</span>-predicate on <span style="color: #800000;">"</span><span style="color: #800000;">seckill_goods.seckill_charge_type_id</span><span style="color: #800000;">"</span><span style="color: #000000;"> was invoked with an empty 
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> sequence. This results <span style="color: #0000ff;">in</span><span style="color: #000000;"> a contradiction, which nonetheless can be expensive to evaluate.  
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> Consider alternative strategies <span style="color: #0000ff;">for</span><span style="color: #000000;"> improved performance.
</span><span style="color: #008080;">16</span>   'strategies <span style="color: #0000ff;">for</span> improved performance.' %<span style="color: #000000;"> expr)
</span><span style="color: #008080;">17</span> [I 150825 18:39:40 web:1811] 200 GET /jyjfruit (127.0.0.1) 73<span style="color: #000000;">.69ms
</span><span style="color: #008080;">18</span> /usr/local/lib/python3.4/dist-packages/sqlalchemy/sql/default_comparator.py:153<span style="color: #000000;">: SAWarning: 
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span> The <span style="color: #0000ff;">IN</span>-predicate on <span style="color: #800000;">"</span><span style="color: #800000;">seckill_goods.activity_id</span><span style="color: #800000;">"</span><span style="color: #000000;"> was invoked with an empty sequence. This 
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span> results <span style="color: #0000ff;">in</span><span style="color: #000000;"> a contradiction, which nonetheless can be expensive to evaluate.  Consider 
</span><span style="color: #008080;">23</span> 
<span style="color: #008080;">24</span> alternative strategies <span style="color: #0000ff;">for</span> improved performance.</pre>
</div>
<p>　　　　后来重新导入数据库，换了一家店铺进行测试，问题解决。<br />　　3、 新建秒杀时要判断各个商品是否在同一时间段的其他商品已经存在，如果存在，则不能进行新建。</p>
<p>【8.26 周三】<br />　　今日任务：商品秒杀商城端支付环节<br />　　1、 点击购物车的'提交订单'后，js向后台发post请求的参数中，fruits参数的形式为：<br />&nbsp;　　　　{'12668': 2, '12641': 3, '12645': 1}，表示计价方式和数量的键值对字典；<br />　　　　在该post请求的一开始要更新秒杀数据，然后设置一个overdue变量，初始化为0，然后遍历fruits列表的计价方式判断有没有商品的活动过期，如果有商品的活动过则置overdue为1,直接self.send_success(overdue=overdue)，前台根据overdue的值重定向到当前购物车页面，并给用户发出提示，刷新购物车</p>
<p>页面，重新进行处理。<br />　　2、 问题：编辑秒杀活动时，在判定选择商品是否与该时间段其他活动的商品重复时，会出现'与当前活动秒杀商品重复'的错误。<br />　　3、 对于余额支付和货到付款的订单，商家删除订单后，会恢复库存；在线支付的还不能删除。<br />　　4、 在商城端显示秒杀商品的时候，要先判定该秒杀商品的ordered值是否等于activity_piece，如果相等，则表明已经被抢光了，不予显示。<br />　　5、 在线支付是有15分钟的付款时间的，如果15分钟内未付款，那么订单将会自动取消，返还库存。<br />　　　　对于秒杀活动的在线支付这样处理：<br />　　　　　　给用户15分钟的在线支付时间，在这期间只要完成在线支付即可，不用管活动是否到期。15分钟以后自动取消订单。<br />　　6、 秒杀商品和限时折扣商品的去重问题：同一时间段内同一商品不能参加不同的活动，也不能参加同一种活动在同一时间段内的不同场次。<br />因为限时折扣涉及到周期性活动的问题，所以去重比较复杂。而且在与循环时间比较的时候还要注意python的时区问题。<br />　　　　*思路：在全局基类中为秒杀活动和限时折扣活动分别写judge_seckill和judge_discount方法，其他活动可以调用这两个方法判断其他活动将要新建的商品是否在这两个活动里面，参数基本形式如下：def judge_seckill(self,fruit_id,time_way,start_time,end_time,f_time,t_time,weeks)</p>
<p>　　　　*参数分析：其中time_way表示参数时间的形式，time_way=0表示参数时间为start_time和end_time，非周期时间，此时忽略f_time,t_time,weeks三个参数；若time_way=1则表示参数时间为f_time和t_time以及weeks,这为周期时间，此时忽略start_time和end_time两个参数。其中weeks为一个整型列表，元素为代表周几的整数(取值1-7),f_time表示每天的开始时间（是一个整型的秒数，介于0到24小时之间）,t_time表示每天的结束时间（是一个整型的秒数，介于0到24小时之间）返回值：True(传入参数fruit_id对应的商品和当前已经建立的秒杀活动时间上无冲突);False(传入参数fruit_id对应的商品和当前已经建立的秒杀活动时间上有冲突)<br />　　7、 获取星期数：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt;&gt;&gt; x = time.localtime(1317091800.0<span style="color: #000000;">)
</span><span style="color: #008080;">2</span> &gt;&gt;&gt; time.strftime(<span style="color: #800000;">'</span><span style="color: #800000;">%w</span><span style="color: #800000;">'</span><span style="color: #000000;">,x)
</span><span style="color: #008080;">3</span> <span style="color: #800000;">'</span><span style="color: #800000;">2</span><span style="color: #800000;">'</span>
<span style="color: #008080;">4</span> &gt;&gt;&gt; time.strftime(<span style="color: #800000;">'</span><span style="color: #800000;">%Y-%m-%d %H:%M:%S</span><span style="color: #800000;">'</span><span style="color: #000000;">,x)
</span><span style="color: #008080;">5</span> <span style="color: #800000;">'</span><span style="color: #800000;">2011-09-27 10:50:00</span><span style="color: #800000;">'</span></pre>
</div>
<p>&nbsp;</p>
<p>【8.27 周四】<br />　　今日任务：已经完成商品秒杀从商城端到店铺后台端的全部功能，接下来的两天主要是全方位debug.<br />　　1、 python延时执行函数的方法：<br />　　　　work = Timer(60*15,func,(param1,param2,))<br />　　　　work.start()<br />　　2、 为order表新增字段activity_type，类型为键值对字符串，键是计价方式，值是计价方式对应的活动名称，用于存储该订单中每种计价方式id对应的水果参与的活动名称，如果值为空字符串，则表示未参与任何活动；如果值为非空，则表示参与了值字符串所表示的活动。<br />　　　　alter table senguocc.order add column fruit_activity varchar(1000); <br />　　　　fruit_activity = Column(String(1000)) <br />　　　　后来考虑不用新加字段，只用利用现有的fruits字段即可。<br />　　3、 在订单详情显示中，每种商品名称前都添加参与的活动名称，如果未参与任何活动则不添加，类似这样：<br />　　　　{% if 'activity_name' in list(fruits[key].keys()) and fruits[key]['activity_name'] %}（{{fruits[key]['activity_name']}}）{% end %}{{fruits[key]['fruit_name']}}<br />　　4、 access_token表存微信的认证信息，用于发模板消息。如果发现发送失败，那么先清空这个表再试试。<br />　　　　delete from access_token;<br />【8.28】</p>
<p>　　今日任务：商品秒杀全方位debug.<br />　　森果实习最后一天<br />　　1、 为所有包含折扣商品的订单的fruits字段添加折扣数(0~1之间)，非折扣商品的折扣数为1，显示订</p>
<p>单商品详情的时候折扣商品要显示原价乘上折扣数的价格。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">discount_rate
</span><span style="color: #008080;"> 2</span> {% <span style="color: #0000ff;">if</span> <span style="color: #800000;">'</span><span style="color: #800000;">discount_rate</span><span style="color: #800000;">'</span> <span style="color: #0000ff;">in</span> list(fruits[key].keys()) %}{{round(float(price1)*<span style="color: #000000;">fruits[key]
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> [<span style="color: #800000;">'</span><span style="color: #800000;">discount_rate</span><span style="color: #800000;">'</span>]*fruits[key][<span style="color: #800000;">'</span><span style="color: #800000;">num</span><span style="color: #800000;">'</span>], 2)}}{% <span style="color: #0000ff;">else</span> %}{{round(float(price1)*<span style="color: #000000;">fruits[key]
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> [<span style="color: #800000;">'</span><span style="color: #800000;">num</span><span style="color: #800000;">'</span>], 2)}}{% end %<span style="color: #000000;">}
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span> {% <span style="color: #0000ff;">if</span> <span style="color: #800000;">'</span><span style="color: #800000;">discount_rate</span><span style="color: #800000;">'</span> <span style="color: #0000ff;">in</span> list(fruits[charge_type.id].keys()) %<span style="color: #000000;">}{{round(float(price1)
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span> *fruits[charge_type.id][<span style="color: #800000;">'</span><span style="color: #800000;">discount_rate</span><span style="color: #800000;">'</span>]*fruits[charge_type.id][<span style="color: #800000;">'</span><span style="color: #800000;">num</span><span style="color: #800000;">'</span>], 2)}}{% <span style="color: #0000ff;">else</span> %<span style="color: #000000;">}
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> {{round(float(price1)*fruits[charge_type.id][<span style="color: #800000;">'</span><span style="color: #800000;">num</span><span style="color: #800000;">'</span>], 2)}}{% end %}</pre>
</div>
<p>　　2、 artTemplate中if语句用法：{{ if a == 1 }}...{{else}}...{{/if}},和tornado中不同。<br />　　3、 测试服务器测试报告：<br />　　　　1.新建秒杀页面商品信息卡的overflow:auto属性丢失，要加上。(ok)<br />　　　　2.店铺后台商品管理添加计价方式后，会将之前的计价方式全部成对显示。(ok)<br />　　　　解决：admin.py 2666行q_charge = self.session.query(models.ChargeType).filter_by(id=charge_type['id']).filter(models.ChargeType.activity_type.in_([0,-2]))一句中_in后面少了小括号，加上即可.<br />　　　　3.代码推到线上的时候，要改动的地方：<br />　　　　①店铺后台秒杀管理的'点击查看使用教程'的链接要改成bbs中正确的秒杀教程url链接。<br />　　　　②店铺后台秒杀管理的'推广链接'要改成线上的url.（ok）</p>
<p>******************************************************************************************************************end</p>
<p>　　至此，为期三个月的森果实习结束，感受颇多，成长颇多，感受及总结将会陆续总结在其他博文中。感谢森果。</p>]]></description></item></channel></rss>